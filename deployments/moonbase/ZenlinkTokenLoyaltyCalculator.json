{
  "address": "0x639E2d1b94781411bdAF566DD28E95869a22c7c9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vxZenlinkToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zenlinkToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minPenaltyRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPenaltyRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxPenaltyRatio",
          "type": "uint256"
        }
      ],
      "name": "CannotExceedMaxPenaltyRatio",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "InvalidPenaltyRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "Candidate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lockedContract",
          "type": "address"
        }
      ],
      "name": "addLockedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminCandidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidateConfirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCirculation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "circulation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        }
      ],
      "name": "getRatioValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getZenlinkTokenWithdrawFeeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPenaltyRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPenaltyRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lockedContract",
          "type": "address"
        }
      ],
      "name": "removeLockedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "setAdminCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minPenaltyRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPenaltyRatio",
          "type": "uint256"
        }
      ],
      "name": "updatePenaltyRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe54606ead7bf726c4b0bb7c1b61eb444531d9acf5d9f1bb2c522964772645bd7",
  "receipt": {
    "to": null,
    "from": "0x0597EB296eFbb84CA64C843a7F80d7F8Bff7d17d",
    "contractAddress": "0x639E2d1b94781411bdAF566DD28E95869a22c7c9",
    "transactionIndex": 92,
    "gasUsed": "765509",
    "logsBloom": "0x
    "blockHash": "0xb319dad7c81c222e9ff140f9ab959ce82e84a0e213947442ce1d9a0380f7667f",
    "transactionHash": "0xe54606ead7bf726c4b0bb7c1b61eb444531d9acf5d9f1bb2c522964772645bd7",
    "logs": [],
    "blockNumber": 2782554,
    "cumulativeGasUsed": "2727924",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb38188fEDff30bEc23aEf5C691AB647756771fF1",
    "0xB5989e3Eb10bBe04b962586910C0bBC1238baD78",
    "0",
    "500000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "007aa94c81b3bc67ae48537a63ee475f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vxZenlinkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zenlinkToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPenaltyRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPenaltyRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPenaltyRatio\",\"type\":\"uint256\"}],\"name\":\"CannotExceedMaxPenaltyRatio\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidPenaltyRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"Candidate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockedContract\",\"type\":\"address\"}],\"name\":\"addLockedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"circulation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"getRatioValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZenlinkTokenWithdrawFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPenaltyRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPenaltyRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockedContract\",\"type\":\"address\"}],\"name\":\"removeLockedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setAdminCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPenaltyRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPenaltyRatio\",\"type\":\"uint256\"}],\"name\":\"updatePenaltyRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol\":\"ZenlinkTokenLoyaltyCalculator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/libraries/AdminUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract AdminUpgradeable {\\n    address public admin;\\n    address public adminCandidate;\\n\\n    function _initializeAdmin(address _admin) internal {\\n        require(admin == address(0), \\\"admin already set\\\");\\n\\n        admin = _admin;\\n    }\\n\\n    function candidateConfirm() external {\\n        require(msg.sender == adminCandidate, \\\"not Candidate\\\");\\n        emit AdminChanged(admin, adminCandidate);\\n\\n        admin = adminCandidate;\\n        adminCandidate = address(0);\\n    }\\n\\n    function setAdminCandidate(address _candidate) external onlyAdmin {\\n        adminCandidate = _candidate;\\n        emit Candidate(_candidate);\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    event Candidate(address indexed newAdmin);\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n}\",\"keccak256\":\"0x1f6a33fd54009078e00c3b586e2b9bb359ff99d9c5cb87e3e32ec109480f99ae\",\"license\":\"MIT\"},\"contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {AdminUpgradeable} from \\\"./AdminUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract ZenlinkTokenLoyaltyCalculator is AdminUpgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address immutable vxZenlinkToken;\\n    address immutable zenlinkToken;\\n    uint256 public minPenaltyRatio;\\n    uint256 public maxPenaltyRatio;\\n\\n    EnumerableSet.AddressSet private _lockedContracts;\\n\\n    error ZeroAddress();\\n    error CannotExceedMaxPenaltyRatio(uint256 maxPenaltyRatio);\\n    error InvalidPenaltyRatio(uint256 min, uint256 max);\\n\\n    constructor(\\n        address _vxZenlinkToken, \\n        address _zenlinkToken,\\n        uint256 _minPenaltyRatio,\\n        uint256 _maxPenaltyRatio\\n    ) {\\n        vxZenlinkToken = _vxZenlinkToken;\\n        zenlinkToken = _zenlinkToken;\\n        _updatePenaltyRatio(_minPenaltyRatio, _maxPenaltyRatio);\\n        _initializeAdmin(msg.sender);\\n    }\\n\\n    function updatePenaltyRatio(\\n        uint256 _minPenaltyRatio, \\n        uint256 _maxPenaltyRatio\\n    ) external onlyAdmin {\\n        _updatePenaltyRatio(_minPenaltyRatio, _maxPenaltyRatio);\\n    }\\n\\n    function _updatePenaltyRatio(\\n        uint256 _minPenaltyRatio, \\n        uint256 _maxPenaltyRatio\\n    ) private {\\n        if (_maxPenaltyRatio > 5e17) \\n            revert CannotExceedMaxPenaltyRatio(5e17);\\n        if (_minPenaltyRatio > _maxPenaltyRatio) \\n            revert InvalidPenaltyRatio(_minPenaltyRatio, _maxPenaltyRatio);\\n        minPenaltyRatio = _minPenaltyRatio;\\n        maxPenaltyRatio = _maxPenaltyRatio;\\n    }\\n\\n    function lockedContracts() external view returns (address[] memory) {\\n        return _lockedContracts.values();\\n    }\\n\\n    function addLockedContract(address lockedContract) external onlyAdmin {\\n        if (lockedContract == address(0)) revert ZeroAddress();\\n        if (!_lockedContracts.contains(lockedContract)) {\\n            _lockedContracts.add(lockedContract);\\n        }\\n    }\\n\\n    function removeLockedContract(address lockedContract) external onlyAdmin {\\n        if (lockedContract == address(0)) revert ZeroAddress();\\n        if (_lockedContracts.contains(lockedContract)) {\\n            _lockedContracts.remove(lockedContract);\\n        }\\n    }\\n\\n    function getCirculation() public view returns (uint256 circulation) {\\n        circulation = IERC20(zenlinkToken).totalSupply();\\n        address[] memory contracts = _lockedContracts.values();\\n        for (uint256 i = 0; i < contracts.length; i++) {\\n            circulation -= IERC20(zenlinkToken).balanceOf(contracts[i]);\\n        }\\n    }\\n\\n    function getZenlinkTokenWithdrawFeeRatio() external view returns (uint256 ratio) {\\n        uint256 zenlinkCirculation = getCirculation();\\n        uint256 x = Math.mulDiv(\\n            IERC20(zenlinkToken).balanceOf(vxZenlinkToken),\\n            1e18,\\n            zenlinkCirculation\\n        );\\n        ratio = getRatioValue(x);\\n    }\\n\\n    function getRatioValue(uint256 input) public view returns (uint256) {\\n        // y = maxPenaltyRatio (x < 0.1)\\n        // y = minPenaltyRatio (x > 0.5)\\n        // y = maxPenaltyRatio - (input - 0.1) * step\\n        if (input < 1e17) {\\n            return maxPenaltyRatio;\\n        } else if (input > 5e17) {\\n            return minPenaltyRatio;\\n        } else {\\n            uint256 step = Math.mulDiv(\\n                maxPenaltyRatio - minPenaltyRatio,\\n                1e18,\\n                4e17\\n            );\\n            return maxPenaltyRatio - Math.mulDiv(input - 1e17, step, 1e18);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x22d8afaf5b1fe3bea1bb0799892c8b8c335f2af8f5c0e0e285c8af50a6667ac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610dc5380380610dc583398101604081905261002f9161015d565b6001600160601b0319606085811b821660805284901b1660a0526100538282610065565b61005c336100d2565b505050506101a0565b6706f05b59d3b2000081111561009d576040516369f8dcf160e01b81526706f05b59d3b2000060048201526024015b60405180910390fd5b808211156100c757604051624019f560e61b81526004810183905260248101829052604401610094565b600291909155600355565b6000546001600160a01b03161561011f5760405162461bcd60e51b815260206004820152601160248201527018591b5a5b88185b1c9958591e481cd95d607a1b6044820152606401610094565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160a01b038116811461015857600080fd5b919050565b6000806000806080858703121561017357600080fd5b61017c85610141565b935061018a60208601610141565b6040860151606090960151949790965092505050565b60805160601c60a05160601c610bec6101d9600039600081816102b10152818161051e01526105cb0152600061027f0152610bec6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637d9c21d71161008c578063bf151cb811610066578063bf151cb814610182578063c79dc2441461018a578063f851a4401461019f578063fa9e67f9146101b257600080fd5b80637d9c21d71461015357806396de7aa014610166578063b403f9c91461017957600080fd5b806310cdc01a146100d45780631bca1e23146100fa5780631f5f2e38146101035780633accfa6c1461010b5780633f023230146101365780635571bfcf14610140575b600080fd5b6100e76100e2366004610a68565b6101c5565b6040519081526020015b60405180910390f35b6100e760035481565b6100e761025d565b60015461011e906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b61013e61034e565b005b61013e61014e366004610a3f565b610401565b61013e610161366004610a9a565b610472565b61013e610174366004610a3f565b6104a6565b6100e760025481565b6100e761051a565b6101926106b0565b6040516100f19190610abc565b60005461011e906001600160a01b031681565b61013e6101c0366004610a3f565b6106c1565b600067016345785d8a00008210156101df57505060035490565b6706f05b59d3b200008211156101f757505060025490565b600061022360025460035461020c9190610b2c565b670de0b6b3a764000067058d15e17628000061072c565b905061024961023a67016345785d8a000085610b2c565b82670de0b6b3a764000061072c565b6003546102569190610b2c565b9392505050565b60008061026861051a565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291925060009161033c917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b1580156102f557600080fd5b505afa158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d9190610a81565b670de0b6b3a76400008461072c565b9050610347816101c5565b9250505090565b6001546001600160a01b0316331461039d5760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b60448201526064015b60405180910390fd5b600154600080546040516001600160a01b0393841693909116917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b0316331461042b5760405162461bcd60e51b815260040161039490610b09565b6001600160a01b0381166104525760405163d92e233d60e01b815260040160405180910390fd5b61045d6004826107db565b1561046f5761046d600482610802565b505b50565b6000546001600160a01b0316331461049c5760405162461bcd60e51b815260040161039490610b09565b61046d8282610817565b6000546001600160a01b031633146104d05760405162461bcd60e51b815260040161039490610b09565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057557600080fd5b505afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190610a81565b905060006105bb600461087f565b905060005b81518110156106ab577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a0823183838151811061060a5761060a610ba0565b60200260200101516040518263ffffffff1660e01b815260040161063d91906001600160a01b0391909116815260200190565b60206040518083038186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d9190610a81565b6106979084610b2c565b9250806106a381610b43565b9150506105c0565b505090565b60606106bc600461087f565b905090565b6000546001600160a01b031633146106eb5760405162461bcd60e51b815260040161039490610b09565b6001600160a01b0381166107125760405163d92e233d60e01b815260040160405180910390fd5b61071d6004826107db565b61046f5761046d60048261088c565b6000808060001985870985870292508281108382030391505080600014156107675783828161075d5761075d610b74565b0492505050610256565b80841161077357600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b60006107f9836001600160a01b0384166108a1565b6706f05b59d3b2000081111561084a576040516369f8dcf160e01b81526706f05b59d3b200006004820152602401610394565b8082111561087457604051624019f560e61b81526004810183905260248101829052604401610394565b600291909155600355565b6060600061025683610994565b60006107f9836001600160a01b0384166109f0565b6000818152600183016020526040812054801561098a5760006108c5600183610b2c565b85549091506000906108d990600190610b2c565b905081811461093e5760008660000182815481106108f9576108f9610ba0565b906000526020600020015490508087600001848154811061091c5761091c610ba0565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061094f5761094f610b8a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107fc565b60009150506107fc565b6060816000018054806020026020016040519081016040528092919081815260200182805480156109e457602002820191906000526020600020905b8154815260200190600101908083116109d0575b50505050509050919050565b6000818152600183016020526040812054610a37575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107fc565b5060006107fc565b600060208284031215610a5157600080fd5b81356001600160a01b038116811461025657600080fd5b600060208284031215610a7a57600080fd5b5035919050565b600060208284031215610a9357600080fd5b5051919050565b60008060408385031215610aad57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610afd5783516001600160a01b031683529284019291840191600101610ad8565b50909695505050505050565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b600082821015610b3e57610b3e610b5e565b500390565b6000600019821415610b5757610b57610b5e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212202e600fc647d06d943b611325b993b35f11bc4f68e7e9a394de345c71a715bef464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637d9c21d71161008c578063bf151cb811610066578063bf151cb814610182578063c79dc2441461018a578063f851a4401461019f578063fa9e67f9146101b257600080fd5b80637d9c21d71461015357806396de7aa014610166578063b403f9c91461017957600080fd5b806310cdc01a146100d45780631bca1e23146100fa5780631f5f2e38146101035780633accfa6c1461010b5780633f023230146101365780635571bfcf14610140575b600080fd5b6100e76100e2366004610a68565b6101c5565b6040519081526020015b60405180910390f35b6100e760035481565b6100e761025d565b60015461011e906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b61013e61034e565b005b61013e61014e366004610a3f565b610401565b61013e610161366004610a9a565b610472565b61013e610174366004610a3f565b6104a6565b6100e760025481565b6100e761051a565b6101926106b0565b6040516100f19190610abc565b60005461011e906001600160a01b031681565b61013e6101c0366004610a3f565b6106c1565b600067016345785d8a00008210156101df57505060035490565b6706f05b59d3b200008211156101f757505060025490565b600061022360025460035461020c9190610b2c565b670de0b6b3a764000067058d15e17628000061072c565b905061024961023a67016345785d8a000085610b2c565b82670de0b6b3a764000061072c565b6003546102569190610b2c565b9392505050565b60008061026861051a565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291925060009161033c917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b1580156102f557600080fd5b505afa158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d9190610a81565b670de0b6b3a76400008461072c565b9050610347816101c5565b9250505090565b6001546001600160a01b0316331461039d5760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b60448201526064015b60405180910390fd5b600154600080546040516001600160a01b0393841693909116917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b0316331461042b5760405162461bcd60e51b815260040161039490610b09565b6001600160a01b0381166104525760405163d92e233d60e01b815260040160405180910390fd5b61045d6004826107db565b1561046f5761046d600482610802565b505b50565b6000546001600160a01b0316331461049c5760405162461bcd60e51b815260040161039490610b09565b61046d8282610817565b6000546001600160a01b031633146104d05760405162461bcd60e51b815260040161039490610b09565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057557600080fd5b505afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190610a81565b905060006105bb600461087f565b905060005b81518110156106ab577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a0823183838151811061060a5761060a610ba0565b60200260200101516040518263ffffffff1660e01b815260040161063d91906001600160a01b0391909116815260200190565b60206040518083038186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d9190610a81565b6106979084610b2c565b9250806106a381610b43565b9150506105c0565b505090565b60606106bc600461087f565b905090565b6000546001600160a01b031633146106eb5760405162461bcd60e51b815260040161039490610b09565b6001600160a01b0381166107125760405163d92e233d60e01b815260040160405180910390fd5b61071d6004826107db565b61046f5761046d60048261088c565b6000808060001985870985870292508281108382030391505080600014156107675783828161075d5761075d610b74565b0492505050610256565b80841161077357600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b60006107f9836001600160a01b0384166108a1565b6706f05b59d3b2000081111561084a576040516369f8dcf160e01b81526706f05b59d3b200006004820152602401610394565b8082111561087457604051624019f560e61b81526004810183905260248101829052604401610394565b600291909155600355565b6060600061025683610994565b60006107f9836001600160a01b0384166109f0565b6000818152600183016020526040812054801561098a5760006108c5600183610b2c565b85549091506000906108d990600190610b2c565b905081811461093e5760008660000182815481106108f9576108f9610ba0565b906000526020600020015490508087600001848154811061091c5761091c610ba0565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061094f5761094f610b8a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107fc565b60009150506107fc565b6060816000018054806020026020016040519081016040528092919081815260200182805480156109e457602002820191906000526020600020905b8154815260200190600101908083116109d0575b50505050509050919050565b6000818152600183016020526040812054610a37575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107fc565b5060006107fc565b600060208284031215610a5157600080fd5b81356001600160a01b038116811461025657600080fd5b600060208284031215610a7a57600080fd5b5035919050565b600060208284031215610a9357600080fd5b5051919050565b60008060408385031215610aad57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610afd5783516001600160a01b031683529284019291840191600101610ad8565b50909695505050505050565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b600082821015610b3e57610b3e610b5e565b500390565b6000600019821415610b5757610b57610b5e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212202e600fc647d06d943b611325b993b35f11bc4f68e7e9a394de345c71a715bef464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7604,
        "contract": "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol:ZenlinkTokenLoyaltyCalculator",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7606,
        "contract": "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol:ZenlinkTokenLoyaltyCalculator",
        "label": "adminCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8941,
        "contract": "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol:ZenlinkTokenLoyaltyCalculator",
        "label": "minPenaltyRatio",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8943,
        "contract": "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol:ZenlinkTokenLoyaltyCalculator",
        "label": "maxPenaltyRatio",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8946,
        "contract": "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol:ZenlinkTokenLoyaltyCalculator",
        "label": "_lockedContracts",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)3838_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3838_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3837,
            "contract": "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol:ZenlinkTokenLoyaltyCalculator",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3537_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3537_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3532,
            "contract": "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol:ZenlinkTokenLoyaltyCalculator",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3536,
            "contract": "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol:ZenlinkTokenLoyaltyCalculator",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}