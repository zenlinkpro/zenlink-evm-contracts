{
  "address": "0xca81CAdf309B4fd90CA13Fba676bdB9e69685dA6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts_out",
          "type": "uint256[]"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b79b3ef2682bf04fa6c061cdbcfe56d845123a75b74d33adb22b6fad07cd97e",
  "receipt": {
    "to": null,
    "from": "0x7D3C7Ab81bD677EE1cfd58505Cb8BcbF8856B634",
    "contractAddress": "0xca81CAdf309B4fd90CA13Fba676bdB9e69685dA6",
    "transactionIndex": 46,
    "gasUsed": "3469496",
    "logsBloom": "0x
    "blockHash": "0x134c8d46694f9be03653060b92cd1b46579d19a2fb7b5e512d992a40e3ea4ffc",
    "transactionHash": "0x0b79b3ef2682bf04fa6c061cdbcfe56d845123a75b74d33adb22b6fad07cd97e",
    "logs": [],
    "blockNumber": 2782329,
    "cumulativeGasUsed": "4525673",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "007aa94c81b3bc67ae48537a63ee475f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts_out\",\"type\":\"uint256[]\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(StableSwapStorage.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calculate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(StableSwapStorage.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(StableSwapStorage.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"getAPrecise(StableSwapStorage.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(StableSwapStorage.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableswap/StableSwapStorage.sol\":\"StableSwapStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/stableswap/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x86c437195727727a42b37c6bfd9a233cec2c5b5a3730fa77542e549e2c1104e2\",\"license\":\"MIT\"},\"contracts/stableswap/StableSwapStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IStableSwapCallee.sol\\\";\\nimport \\\"./LPToken.sol\\\";\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary StableSwapStorage {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    event FlashLoan(\\n        address indexed caller,\\n        address indexed receiver,\\n        uint256[] amounts_out\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 sold_id,\\n        uint256 tokens_sold,\\n        uint256 bought_id,\\n        uint256 tokens_bought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calculate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        uint256[] tokenMultipliers; // token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] balances; // effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256 fee; // swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 adminFee; // admin fee in ratio of swap fee.\\n        uint256 initialA; // observation of A, multiplied with A_PRECISION\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"initialDepositRequireAllTokens\\\");\\n            }\\n            // get real transfer in amount\\n            if (amounts[i] > 0) {\\n                newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    function flashLoan(\\n        SwapStorage storage self,\\n        uint256[] memory amountsOut,\\n        address to,\\n        bytes calldata data\\n    ) external {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amountsOut.length == nCoins, \\\"invalidAmountsLength\\\");\\n        {\\n            uint256 tokenSupply = self.lpToken.totalSupply();\\n            require(tokenSupply > 0, \\\"insufficientLiquidity\\\");\\n        }\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amountsOut[i] > 0) {\\n                require(amountsOut[i] < self.balances[i], \\\"insufficientBalance\\\");\\n                fees[i] = (_fee * amountsOut[i]) / FEE_DENOMINATOR;\\n                self.pooledTokens[i].safeTransfer(to, amountsOut[i]);\\n            }\\n        }\\n\\n        if (data.length > 0) {\\n            IStableSwapCallee(to).zenlinkStableSwapCall(\\n                msg.sender, \\n                self.pooledTokens,\\n                amountsOut, \\n                fees, \\n                data\\n            );\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amountsOut[i] > 0) {\\n                newBalances[i] += (_doTransferIn(self.pooledTokens[i], amountsOut[i] + fees[i]) - amountsOut[i]);\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0);\\n\\n        uint256 diff = 0;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n        }\\n\\n        emit FlashLoan(msg.sender, to, amountsOut);\\n    }\\n\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // just in case there were some rounding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(msg.sender, dy);\\n        emit TokenExchange(msg.sender, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> slippage\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> slippage\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount += 1; // in case of rounding errors\\n        require(burnAmount <= maxBurnAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        if (tokenSupply > 0) {\\n            return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n        }\\n        return 0;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance - 1) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    function calculateRemoveLiquidity(SwapStorage storage self, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _calculateRemoveLiquidity(self, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, lpAmount, tokenIndex);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return\\n                self.initialA +\\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\\n                (self.futureATime - self.initialATime);\\n        }\\n\\n        return\\n            self.initialA -\\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\\n            (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D =\\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap success\\n     * @return NORMALIZED balance of output token if the swap success\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp);\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(SwapStorage storage self, uint256 amount)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (amount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n}\\n\",\"keccak256\":\"0xe076e725685db301a109ed7e19e67bec09a1594ea8ee3cc13a8ae6db61b03ce7\",\"license\":\"MIT\"},\"contracts/stableswap/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../LPToken.sol\\\";\\n\\ninterface IStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event FlashLoan(\\n        address indexed caller,\\n        address indexed receiver,\\n        uint256[] amounts_out\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 soldId,\\n        uint256 tokensSold,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            LPToken,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        uint256[] memory amountsOut,\\n        address to,\\n        bytes calldata data,\\n        uint256 deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdrawAdminFee() external;\\n}\\n\",\"keccak256\":\"0xa6fbab4b724f9264e156cc78ef4fb5998932462485f0592855b95d9939e94a73\",\"license\":\"MIT\"},\"contracts/stableswap/interfaces/IStableSwapCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwapCallee {\\n    function zenlinkStableSwapCall(\\n        address sender, \\n        IERC20[] memory tokens,\\n        uint256[] memory amounts, \\n        uint256[] memory fees, \\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x72e42ecacb3cc3f89e0e23c029560588b5627bbc0613be79db16394576fbbf24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613dce61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c8063a5416c7b116100ac578063d0b1a0051161007b578063d0b1a00514610231578063d73792a91461025e578063e42f75fa1461026a578063ec623a1e1461028a578063f94eed871461029d57600080fd5b8063a5416c7b146101ec578063b9510fc81461020e578063c20aace814610221578063d011f9181461022957600080fd5b80634ddd2918116100e85780634ddd291814610186578063576b9735146101995780637461cf1b146101b95780638ce65d8e146101cc57600080fd5b80630a1368cd1461011a57806337ac5bea146101405780633a8d10bd1461015357806345b69ab714610173575b600080fd5b61012d6101283660046137d7565b6102b0565b6040519081526020015b60405180910390f35b61012d61014e366004613654565b6103a8565b81801561015f57600080fd5b5061012d61016e3660046138a7565b61048c565b61012d61018136600461372c565b61073b565b61012d610194366004613849565b610a62565b8180156101a557600080fd5b5061012d6101b4366004613787565b610a78565b61012d6101c7366004613654565b61105e565b8180156101d857600080fd5b5061012d6101e7366004613875565b611069565b8180156101f857600080fd5b5061020c61020736600461366d565b6113cf565b005b61012d61021c366004613654565b611ad8565b61012d601281565b61012d606481565b81801561023d57600080fd5b5061025161024c3660046137f9565b611aef565b6040516101379190613a19565b61012d6402540be40081565b81801561027657600080fd5b5061012d610285366004613787565b611da2565b61012d610298366004613875565b612400565b6102516102ab3660046137d7565b61250d565b815460009082106102dc5760405162461bcd60e51b81526004016102d390613b12565b60405180910390fd5b8260030182815481106102f1576102f1613d5b565b906000526020600020015483600001838154811061031157610311613d5b565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561035d57600080fd5b505afa158015610371573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039591906138e2565b61039f9190613cd1565b90505b92915050565b6000806103c56103b784612519565b6103c0856125c7565b6126a0565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906138e2565b9050801561048257806104666012600a613c0a565b6104709084613cb2565b61047a9190613ba5565b949350505050565b5060009392505050565b6000808660000186815481106104a4576104a4613d5b565b60009182526020822001546001600160a01b031691506104c388612519565b90506104cf828661283c565b945060008860020188815481106104e8576104e8613d5b565b9060005260206000200154866104fe9190613cb2565b82898151811061051057610510613d5b565b60200260200101516105229190613b8d565b905060006105338a8a8a8587612952565b90506000600182858b8151811061054c5761054c613d5b565b602002602001015161055e9190613cd1565b6105689190613cd1565b905060006402540be4008c60040154836105829190613cb2565b61058c9190613ba5565b90508b6002018a815481106105a3576105a3613d5b565b906000526020600020015481836105ba9190613cd1565b6105c49190613ba5565b9150878210156105e65760405162461bcd60e51b81526004016102d390613b69565b60008c6002018b815481106105fd576105fd613d5b565b90600052602060002001546402540be4008e600501548461061e9190613cb2565b6106289190613ba5565b6106329190613ba5565b9050898d6003018d8154811061064a5761064a613d5b565b9060005260206000200160008282546106639190613b8d565b9091555061067390508184613b8d565b8d6003018c8154811061068857610688613d5b565b9060005260206000200160008282546106a19190613cd1565b925050819055506106de33848f6000018e815481106106c2576106c2613d5b565b6000918252602090912001546001600160a01b03169190612b84565b604080518d8152602081018c90529081018c90526060810184905233907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a25090955050505050505b95945050505050565b825482516000919081146107615760405162461bcd60e51b81526004016102d390613b3b565b600061076c866125c7565b9050600061078261077c88612519565b836126a0565b90506000876003018054806020026020016040519081016040528092919081815260200182805480156107d457602002820191906000526020600020905b8154815260200190600101908083116107c0575b5050505050905060005b8481101561088a578615610834578781815181106107fe576107fe613d5b565b602002602001015182828151811061081857610818613d5b565b6020026020010181815161082c9190613b8d565b905250610878565b87818151811061084657610846613d5b565b602002602001015182828151811061086057610860613d5b565b602002602001018181516108749190613cd1565b9052505b8061088281613d14565b9150506107de565b5060006108f26108ec838b6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020905b8154815260200190600101908083116108ce575b5050505050612bec565b856126a0565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e91906138e2565b90508061099257509450610a5b9350505050565b6000886109a8576109a38386613cd1565b6109b2565b6109b28584613cd1565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0557600080fd5b505afa158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d91906138e2565b610a479083613cb2565b610a519190613ba5565b9750505050505050505b9392505050565b6000610a6f848484612c6f565b50949350505050565b82548251600091908114610a9e5760405162461bcd60e51b81526004016102d390613b3b565b6001850154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d91906138e2565b905080610b5e5760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b60448201526064016102d3565b6000610b6987612f63565b90506000610b76886125c7565b9050600088600301805480602002602001604051908101604052809291908181526020018280548015610bc857602002820191906000526020600020905b815481526020019060010190808311610bb4575b505050505090506000610be3610bdd8b612519565b846126a0565b905060005b86811015610c4557898181518110610c0257610c02613d5b565b6020026020010151838281518110610c1c57610c1c613d5b565b60200260200101818151610c309190613cd1565b90525080610c3d81613d14565b915050610be8565b506000610ca56108ec848d6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b905060008767ffffffffffffffff811115610cc257610cc2613d71565b604051908082528060200260200182016040528015610ceb578160200160208202803683370190505b50905060005b88811015610e6b576000848e6003018381548110610d1157610d11613d5b565b906000526020600020015485610d279190613cb2565b610d319190613ba5565b90506000610d58878481518110610d4a57610d4a613d5b565b602002602001015183612f98565b90506402540be400610d6a828b613cb2565b610d749190613ba5565b848481518110610d8657610d86613d5b565b6020026020010181815250506402540be4008f60050154858581518110610daf57610daf613d5b565b6020026020010151610dc19190613cb2565b610dcb9190613ba5565b878481518110610ddd57610ddd613d5b565b6020026020010151610def9190613cd1565b8f6003018481548110610e0457610e04613d5b565b9060005260206000200181905550838381518110610e2457610e24613d5b565b6020026020010151878481518110610e3e57610e3e613d5b565b60200260200101818151610e529190613cd1565b905250829150610e63905081613d14565b915050610cf1565b50610ecf610ec9858e6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b866126a0565b91508287610edd8483613cd1565b610ee79190613cb2565b610ef19190613ba5565b985060008911610f0357610f03613d2f565b610f0e60018a613b8d565b985089891115610f305760405162461bcd60e51b81526004016102d390613b69565b60018c015460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610f7e57600080fd5b505af1158015610f92573d6000803e3d6000fd5b5050505060005b88811015611007578b8181518110610fb357610fb3613d5b565b6020026020010151600014610ff557610ff5338d8381518110610fd857610fd8613d5b565b60200260200101518f60000184815481106106c2576106c2613d5b565b80610fff81613d14565b915050610f99565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c83856110378e8d613cd1565b6040516110479493929190613aa6565b60405180910390a250505050505050509392505050565b60006103a2826125c7565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f491906138e2565b9050600081116111385760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b60448201526064016102d3565b855460018701546040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561117f57600080fd5b505afa158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b791906138e2565b8611156111f25760405162461bcd60e51b81526020600482015260096024820152683e2062616c616e636560b81b60448201526064016102d3565b818611156112325760405162461bcd60e51b815260206004820152600d60248201526c3e20746f74616c537570706c7960981b60448201526064016102d3565b8085106112715760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b60448201526064016102d3565b60008061127f898989612c6f565b92509050858110156112a35760405162461bcd60e51b81526004016102d390613b69565b6402540be4008960050154836112b99190613cb2565b6112c39190613ba5565b6112cd9082613b8d565b8960030188815481106112e2576112e2613d5b565b9060005260206000200160008282546112fb9190613cd1565b9091555050600189015460405163079cc67960e41b8152336004820152602481018a90526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b5050505061138033828b6000018a815481106106c2576106c2613d5b565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b8454845181146113f15760405162461bcd60e51b81526004016102d390613b3b565b6001860154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561143857600080fd5b505afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147091906138e2565b9050600081116114ba5760405162461bcd60e51b8152602060048201526015602482015274696e73756666696369656e744c697175696469747960581b60448201526064016102d3565b5060008167ffffffffffffffff8111156114d6576114d6613d71565b6040519080825280602002602001820160405280156114ff578160200160208202803683370190505b509050600061150d88612f63565b9050600061151a896125c7565b905060006115cd61077c8b60030180548060200260200160405190810160405280929190818152602001828054801561157257602002820191906000526020600020905b81548152602001906001019080831161155e575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b905060005b858110156117115760008a82815181106115ee576115ee613d5b565b602002602001015111156116ff578a600301818154811061161157611611613d5b565b90600052602060002001548a828151811061162e5761162e613d5b565b6020026020010151106116795760405162461bcd60e51b8152602060048201526013602482015272696e73756666696369656e7442616c616e636560681b60448201526064016102d3565b6402540be4008a828151811061169157611691613d5b565b6020026020010151856116a49190613cb2565b6116ae9190613ba5565b8582815181106116c0576116c0613d5b565b6020026020010181815250506116ff898b83815181106116e2576116e2613d5b565b60200260200101518d60000184815481106106c2576106c2613d5b565b8061170981613d14565b9150506115d2565b508515611781576040516366f9eaab60e01b81526001600160a01b038916906366f9eaab9061174e9033908e908e908a908e908e9060040161397b565b600060405180830381600087803b15801561176857600080fd5b505af115801561177c573d6000803e3d6000fd5b505050505b60008a6003018054806020026020016040519081016040528092919081815260200182805480156117d157602002820191906000526020600020905b8154815260200190600101908083116117bd575b5050505050905060005b868110156118de5760008b82815181106117f7576117f7613d5b565b602002602001015111156118cc578a818151811061181757611817613d5b565b60200260200101516118988d600001838154811061183757611837613d5b565b9060005260206000200160009054906101000a90046001600160a01b031688848151811061186757611867613d5b565b60200260200101518e858151811061188157611881613d5b565b60200260200101516118939190613b8d565b61283c565b6118a29190613cd1565b8282815181106118b4576118b4613d5b565b602002602001018181516118c89190613b8d565b9052505b806118d681613d14565b9150506117db565b50600061193e6108ec838e6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b905082811161194f5761194f613d2f565b6000805b88811015611a7d576119b3858f600301838154811061197457611974613d5b565b90600052602060002001548561198a9190613cb2565b6119949190613ba5565b8583815181106119a6576119a6613d5b565b6020026020010151612f98565b91506402540be4006119c58389613cb2565b6119cf9190613ba5565b8882815181106119e1576119e1613d5b565b6020026020010181815250506402540be4008e60050154898381518110611a0a57611a0a613d5b565b6020026020010151611a1c9190613cb2565b611a269190613ba5565b848281518110611a3857611a38613d5b565b6020026020010151611a4a9190613cd1565b8e6003018281548110611a5f57611a5f613d5b565b60009182526020909120015580611a7581613d14565b915050611953565b508a6001600160a01b0316336001600160a01b03167f1e659566d9cc1f93351027d53422a1ec429f52c34bc45ee462dd91e99bdd26bb8e604051611ac19190613a5d565b60405180910390a350505050505050505050505050565b60006064611ae5836125c7565b6103a29190613ba5565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4357600080fd5b505afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b91906138e2565b905080841115611b8a57600080fd5b845460008167ffffffffffffffff811115611ba757611ba7613d71565b604051908082528060200260200182016040528015611bd0578160200160208202803683370190505b509050611bdd8787612fba565b935060005b8451811015611ce957858181518110611bfd57611bfd613d5b565b6020026020010151858281518110611c1757611c17613d5b565b60200260200101511015611c3d5760405162461bcd60e51b81526004016102d390613b69565b848181518110611c4f57611c4f613d5b565b6020026020010151886003018281548110611c6c57611c6c613d5b565b9060005260206000200154611c819190613cd1565b886003018281548110611c9657611c96613d5b565b9060005260206000200181905550611cd733868381518110611cba57611cba613d5b565b60200260200101518a60000184815481106106c2576106c2613d5b565b80611ce181613d14565b915050611be2565b50600187015460405163079cc67960e41b8152336004820152602481018890526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015611d3857600080fd5b505af1158015611d4c573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea915086905083611d818a88613cd1565b604051611d9093929190613a70565b60405180910390a25050509392505050565b82548251600091908114611dc85760405162461bcd60e51b81526004016102d390613b3b565b60008167ffffffffffffffff811115611de357611de3613d71565b604051908082528060200260200182016040528015611e0c578160200160208202803683370190505b5090506000611e1a87612f63565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6e57600080fd5b505afa158015611e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea691906138e2565b90506000611eb3896125c7565b905060008215611f6d57611f6a61077c8b600301805480602002602001604051908101604052809291908181526020018280548015611572576020028201919060005260206000209081548152602001906001019080831161155e5750505050508c6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015611fbd57602002820191906000526020600020905b815481526020019060010190808311611fa9575b5050505050905060005b878110156120f0578461203d5760008b8281518110611fe857611fe8613d5b565b60200260200101511161203d5760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016102d3565b60008b828151811061205157612051613d5b565b602002602001015111156120de576120b48c600001828154811061207757612077613d5b565b9060005260206000200160009054906101000a90046001600160a01b03168c83815181106120a7576120a7613d5b565b602002602001015161283c565b8282815181106120c6576120c6613d5b565b602002602001018181516120da9190613b8d565b9052505b806120e881613d14565b915050611fc7565b5060006121506108ec838e6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b905082811161216157612161613d2f565b8461218457815161217b9060038e01906020850190613536565b5080985061233b565b6000805b898110156122b8576121a9858f600301838154811061197457611974613d5b565b91506402540be4006121bb838a613cb2565b6121c59190613ba5565b8982815181106121d7576121d7613d5b565b6020026020010181815250506402540be4008e600501548a838151811061220057612200613d5b565b60200260200101516122129190613cb2565b61221c9190613ba5565b84828151811061222e5761222e613d5b565b60200260200101516122409190613cd1565b8e600301828154811061225557612255613d5b565b906000526020600020018190555088818151811061227557612275613d5b565b602002602001015184828151811061228f5761228f613d5b565b602002602001018181516122a39190613cd1565b905250806122b081613d14565b915050612188565b50612316610ec9848f6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b9150836123238184613cd1565b61232d9088613cb2565b6123379190613ba5565b9950505b8989101561235b5760405162461bcd60e51b81526004016102d390613b69565b60018c01546040516340c10f1960e01b8152336004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156123a957600080fd5b505af11580156123bd573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516110479493929190613aa6565b60008061240c86612519565b9050600086600201868154811061242557612425613d5b565b90600052602060002001548461243b9190613cb2565b82878151811061244d5761244d613d5b565b602002602001015161245f9190613b8d565b905060006124708888888587612952565b9050600088600201878154811061248957612489613d5b565b9060005260206000200154600183868a815181106124a9576124a9613d5b565b60200260200101516124bb9190613cd1565b6124c59190613cd1565b6124cf9190613ba5565b905060006402540be400828b600401546124e99190613cb2565b6124f39190613ba5565b90506124ff8183613cd1565b9a9950505050505050505050565b606061039f8383612fba565b60606103a28260030180548060200260200160405190810160405280929190818152602001828054801561256c57602002820191906000526020600020905b815481526020019060010190808311612558575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b6000816009015442106125dc57506007015490565b81600601548260070154111561264657816008015482600901546126009190613cd1565b600883015461260f9042613cd1565b836006015484600701546126239190613cd1565b61262d9190613cb2565b6126379190613ba5565b82600601546103a29190613b8d565b8160080154826009015461265a9190613cd1565b60088301546126699042613cd1565b8360070154846006015461267d9190613cd1565b6126879190613cb2565b6126919190613ba5565b82600601546103a29190613cd1565b8151600090816126af85613152565b9050806126c1576000925050506103a2565b600081816126cf8588613cb2565b905060005b6101008110156127f3578260005b8a5181101561273857878b82815181106126fe576126fe613d5b565b60200260200101516127109190613cb2565b61271a8684613cb2565b6127249190613ba5565b91508061273081613d14565b9150506126e2565b508394508087600161274a9190613b8d565b6127549190613cb2565b6064856127618287613cd1565b61276b9190613cb2565b6127759190613ba5565b61277f9190613b8d565b8461278a8984613cb2565b60646127968a88613cb2565b6127a09190613ba5565b6127aa9190613b8d565b6127b49190613cb2565b6127be9190613ba5565b935060016127cc8587612f98565b116127e057839750505050505050506103a2565b50806127eb81613d14565b9150506126d4565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016102d3565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561288057600080fd5b505afa158015612894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b891906138e2565b90506128cf6001600160a01b03851633308661319e565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a082319060240160206040518083038186803b15801561291057600080fd5b505afa158015612924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294891906138e2565b61047a9190613cd1565b6000838514156129905760405162461bcd60e51b815260206004820152600960248201526839b0b6b2aa37b5b2b760b91b60448201526064016102d3565b855480861080156129a057508085105b6129bc5760405162461bcd60e51b81526004016102d390613b12565b60006129c7886125c7565b905060006129d58383613cb2565b905060006129e386846126a0565b9050600081815b86811015612a6b578a8114156129ff57612a59565b60008c8214612a2757898281518110612a1a57612a1a613d5b565b6020026020010151612a29565b8a5b9050612a358185613b8d565b9350612a418882613cb2565b612a4b8685613cb2565b612a559190613ba5565b9250505b80612a6381613d14565b9150506129ea565b50612a768685613cb2565b6064612a828584613cb2565b612a8c9190613cb2565b612a969190613ba5565b9050600084612aa6606486613cb2565b612ab09190613ba5565b612aba9084613b8d565b9050600084815b610100811015612b46578192508684836002612add9190613cb2565b612ae79190613b8d565b612af19190613cd1565b85612afc8480613cb2565b612b069190613b8d565b612b109190613ba5565b91506001612b1e8484612f98565b11612b3457509850610732975050505050505050565b80612b3e81613d14565b915050612ac1565b5060405162461bcd60e51b81526020600482015260126024820152711e50d85b18dd5b185d1a5bdb91985a5b195960721b60448201526064016102d3565b6040516001600160a01b038316602482015260448101829052612be790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526131dc565b505050565b606060005b8351811015612c6757838181518110612c0c57612c0c613d5b565b6020026020010151838281518110612c2657612c26613d5b565b6020026020010151612c389190613cb2565b838281518110612c4a57612c4a613d5b565b602090810291909101015280612c5f81613d14565b915050612bf1565b509092915050565b825460009081908310612c945760405162461bcd60e51b81526004016102d390613b12565b6000612c9f866125c7565b90506000612cac87612519565b90506000612cba82846126a0565b905060008860010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d0e57600080fd5b505afa158015612d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4691906138e2565b612d50838a613cb2565b612d5a9190613ba5565b612d649083613cd1565b90506000612d758a868a87866132ae565b9050836000612d838c612f63565b905060005b8c54811015612e8b5760008b821415612ddd578487878a8581518110612db057612db0613d5b565b6020026020010151612dc29190613cb2565b612dcc9190613ba5565b612dd69190613cd1565b9050612e34565b8686898481518110612df157612df1613d5b565b6020026020010151612e039190613cb2565b612e0d9190613ba5565b888381518110612e1f57612e1f613d5b565b6020026020010151612e319190613cd1565b90505b6402540be400612e448285613cb2565b612e4e9190613ba5565b848381518110612e6057612e60613d5b565b60200260200101818151612e749190613cd1565b905250819050612e8381613d14565b915050612d88565b50612e998c888c85886132ae565b828b81518110612eab57612eab613d5b565b6020026020010151612ebd9190613cd1565b98508b6002018a81548110612ed457612ed4613d5b565b906000526020600020015460018a612eec9190613cd1565b612ef69190613ba5565b9850888c6002018b81548110612f0e57612f0e613d5b565b906000526020600020015484888d81518110612f2c57612f2c613d5b565b6020026020010151612f3e9190613cd1565b612f489190613ba5565b612f529190613cd1565b975050505050505050935093915050565b8054600090612f73600182613cd1565b612f7e906004613cb2565b818460040154612f8e9190613cb2565b610a5b9190613ba5565b6000818311612fb057612fab8383613cd1565b61039f565b61039f8284613cd1565b606060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561300e57600080fd5b505afa158015613022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304691906138e2565b9050808311156130985760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c7900000000000060448201526064016102d3565b835460009067ffffffffffffffff8111156130b5576130b5613d71565b6040519080825280602002602001820160405280156130de578160200160208202803683370190505b50905060005b8554811015610a6f57828587600301838154811061310457613104613d5b565b90600052602060002001546131199190613cb2565b6131239190613ba5565b82828151811061313557613135613d5b565b60209081029190910101528061314a81613d14565b9150506130e4565b6000805b82518110156131985782818151811061317157613171613d5b565b6020026020010151826131849190613b8d565b91508061319081613d14565b915050613156565b50919050565b6040516001600160a01b03808516602483015283166044820152606481018290526131d69085906323b872dd60e01b90608401612bb0565b50505050565b6000613231826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134229092919063ffffffff16565b805190915015612be7578080602001905181019061324f9190613637565b612be75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102d3565b84546000908085106132c2576132c2613d2f565b60006132ce8288613cb2565b90508360008080805b86811015613349578a8114156132ec57613337565b8981815181106132fe576132fe613d5b565b6020026020010151925082846133149190613b8d565b93506133208784613cb2565b61332a8a87613cb2565b6133349190613ba5565b94505b8061334181613d14565b9150506132d7565b506133548686613cb2565b60646133608a87613cb2565b61336a9190613cb2565b6133749190613ba5565b935060008561338460648b613cb2565b61338e9190613ba5565b6133989085613b8d565b90508860005b6101008110156127f3578193508a838360026133ba9190613cb2565b6133c49190613b8d565b6133ce9190613cd1565b876133d98480613cb2565b6133e39190613b8d565b6133ed9190613ba5565b915060016133fb8584612f98565b11613410575097506107329650505050505050565b8061341a81613d14565b91505061339e565b606061047a8484600085856001600160a01b0385163b6134845760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d3565b600080866001600160a01b031685876040516134a0919061395f565b60006040518083038185875af1925050503d80600081146134dd576040519150601f19603f3d011682016040523d82523d6000602084013e6134e2565b606091505b50915091506134f28282866134fd565b979650505050505050565b6060831561350c575081610a5b565b82511561351c5782518084602001fd5b8160405162461bcd60e51b81526004016102d39190613adf565b828054828255906000526020600020908101928215613571579160200282015b82811115613571578251825591602001919060010190613556565b5061357d929150613581565b5090565b5b8082111561357d5760008155600101613582565b600082601f8301126135a757600080fd5b8135602067ffffffffffffffff808311156135c4576135c4613d71565b8260051b604051601f19603f830116810181811084821117156135e9576135e9613d71565b6040528481528381019250868401828801850189101561360857600080fd5b600092505b8583101561362b57803584529284019260019290920191840161360d565b50979650505050505050565b60006020828403121561364957600080fd5b8151610a5b81613d87565b60006020828403121561366657600080fd5b5035919050565b60008060008060006080868803121561368557600080fd5b85359450602086013567ffffffffffffffff808211156136a457600080fd5b6136b089838a01613596565b9550604088013591506001600160a01b03821682146136ce57600080fd5b909350606087013590808211156136e457600080fd5b818801915088601f8301126136f857600080fd5b81358181111561370757600080fd5b89602082850101111561371957600080fd5b9699959850939650602001949392505050565b60008060006060848603121561374157600080fd5b83359250602084013567ffffffffffffffff81111561375f57600080fd5b61376b86828701613596565b925050604084013561377c81613d87565b809150509250925092565b60008060006060848603121561379c57600080fd5b83359250602084013567ffffffffffffffff8111156137ba57600080fd5b6137c686828701613596565b925050604084013590509250925092565b600080604083850312156137ea57600080fd5b50508035926020909101359150565b60008060006060848603121561380e57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561383357600080fd5b61383f86828701613596565b9150509250925092565b60008060006060848603121561385e57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561388b57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a086880312156138bf57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156138f457600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561392b5781518752958201959082019060010161390f565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008251613971818460208701613ce8565b9190910192915050565b600060a0820160018060a01b03808a168452602060a081860152828a5480855260c0870191508b60005282600020945060005b818110156139cc5785548516835260019586019592840192016139ae565b505085810360408701526139e0818b6138fb565b935050505082810360608401526139f781876138fb565b90508281036080840152613a0c818587613936565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613a5157835183529284019291840191600101613a35565b50909695505050505050565b60208152600061039f60208301846138fb565b606081526000613a8360608301866138fb565b8281036020840152613a9581866138fb565b915050826040830152949350505050565b608081526000613ab960808301876138fb565b8281036020840152613acb81876138fb565b604084019590955250506060015292915050565b6020815260008251806020840152613afe816040850160208701613ce8565b601f01601f19169190910160400192915050565b6020808252600f908201526e696e6465784f75744f6652616e676560881b604082015260600190565b6020808252601490820152730d2dcecc2d8d2c882dadeeadce8e698cadccee8d60631b604082015260600190565b6020808252600a90820152693e20736c69707061676560b01b604082015260600190565b60008219821115613ba057613ba0613d45565b500190565b600082613bc257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613c02578160001904821115613be857613be8613d45565b80851615613bf557918102915b93841c9390800290613bcc565b509250929050565b600061039f8383600082613c20575060016103a2565b81613c2d575060006103a2565b8160018114613c435760028114613c4d57613c69565b60019150506103a2565b60ff841115613c5e57613c5e613d45565b50506001821b6103a2565b5060208310610133831016604e8410600b8410161715613c8c575081810a6103a2565b613c968383613bc7565b8060001904821115613caa57613caa613d45565b029392505050565b6000816000190483118215151615613ccc57613ccc613d45565b500290565b600082821015613ce357613ce3613d45565b500390565b60005b83811015613d03578181015183820152602001613ceb565b838111156131d65750506000910152565b6000600019821415613d2857613d28613d45565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114613d9557600080fd5b5056fea26469706673582212209b1e52aec30bf63ef74679141e8adade544a71d45a0a5eef2c9fbbfe4cdc77c464736f6c63430008070033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c8063a5416c7b116100ac578063d0b1a0051161007b578063d0b1a00514610231578063d73792a91461025e578063e42f75fa1461026a578063ec623a1e1461028a578063f94eed871461029d57600080fd5b8063a5416c7b146101ec578063b9510fc81461020e578063c20aace814610221578063d011f9181461022957600080fd5b80634ddd2918116100e85780634ddd291814610186578063576b9735146101995780637461cf1b146101b95780638ce65d8e146101cc57600080fd5b80630a1368cd1461011a57806337ac5bea146101405780633a8d10bd1461015357806345b69ab714610173575b600080fd5b61012d6101283660046137d7565b6102b0565b6040519081526020015b60405180910390f35b61012d61014e366004613654565b6103a8565b81801561015f57600080fd5b5061012d61016e3660046138a7565b61048c565b61012d61018136600461372c565b61073b565b61012d610194366004613849565b610a62565b8180156101a557600080fd5b5061012d6101b4366004613787565b610a78565b61012d6101c7366004613654565b61105e565b8180156101d857600080fd5b5061012d6101e7366004613875565b611069565b8180156101f857600080fd5b5061020c61020736600461366d565b6113cf565b005b61012d61021c366004613654565b611ad8565b61012d601281565b61012d606481565b81801561023d57600080fd5b5061025161024c3660046137f9565b611aef565b6040516101379190613a19565b61012d6402540be40081565b81801561027657600080fd5b5061012d610285366004613787565b611da2565b61012d610298366004613875565b612400565b6102516102ab3660046137d7565b61250d565b815460009082106102dc5760405162461bcd60e51b81526004016102d390613b12565b60405180910390fd5b8260030182815481106102f1576102f1613d5b565b906000526020600020015483600001838154811061031157610311613d5b565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561035d57600080fd5b505afa158015610371573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039591906138e2565b61039f9190613cd1565b90505b92915050565b6000806103c56103b784612519565b6103c0856125c7565b6126a0565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906138e2565b9050801561048257806104666012600a613c0a565b6104709084613cb2565b61047a9190613ba5565b949350505050565b5060009392505050565b6000808660000186815481106104a4576104a4613d5b565b60009182526020822001546001600160a01b031691506104c388612519565b90506104cf828661283c565b945060008860020188815481106104e8576104e8613d5b565b9060005260206000200154866104fe9190613cb2565b82898151811061051057610510613d5b565b60200260200101516105229190613b8d565b905060006105338a8a8a8587612952565b90506000600182858b8151811061054c5761054c613d5b565b602002602001015161055e9190613cd1565b6105689190613cd1565b905060006402540be4008c60040154836105829190613cb2565b61058c9190613ba5565b90508b6002018a815481106105a3576105a3613d5b565b906000526020600020015481836105ba9190613cd1565b6105c49190613ba5565b9150878210156105e65760405162461bcd60e51b81526004016102d390613b69565b60008c6002018b815481106105fd576105fd613d5b565b90600052602060002001546402540be4008e600501548461061e9190613cb2565b6106289190613ba5565b6106329190613ba5565b9050898d6003018d8154811061064a5761064a613d5b565b9060005260206000200160008282546106639190613b8d565b9091555061067390508184613b8d565b8d6003018c8154811061068857610688613d5b565b9060005260206000200160008282546106a19190613cd1565b925050819055506106de33848f6000018e815481106106c2576106c2613d5b565b6000918252602090912001546001600160a01b03169190612b84565b604080518d8152602081018c90529081018c90526060810184905233907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a25090955050505050505b95945050505050565b825482516000919081146107615760405162461bcd60e51b81526004016102d390613b3b565b600061076c866125c7565b9050600061078261077c88612519565b836126a0565b90506000876003018054806020026020016040519081016040528092919081815260200182805480156107d457602002820191906000526020600020905b8154815260200190600101908083116107c0575b5050505050905060005b8481101561088a578615610834578781815181106107fe576107fe613d5b565b602002602001015182828151811061081857610818613d5b565b6020026020010181815161082c9190613b8d565b905250610878565b87818151811061084657610846613d5b565b602002602001015182828151811061086057610860613d5b565b602002602001018181516108749190613cd1565b9052505b8061088281613d14565b9150506107de565b5060006108f26108ec838b6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020905b8154815260200190600101908083116108ce575b5050505050612bec565b856126a0565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e91906138e2565b90508061099257509450610a5b9350505050565b6000886109a8576109a38386613cd1565b6109b2565b6109b28584613cd1565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0557600080fd5b505afa158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d91906138e2565b610a479083613cb2565b610a519190613ba5565b9750505050505050505b9392505050565b6000610a6f848484612c6f565b50949350505050565b82548251600091908114610a9e5760405162461bcd60e51b81526004016102d390613b3b565b6001850154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d91906138e2565b905080610b5e5760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b60448201526064016102d3565b6000610b6987612f63565b90506000610b76886125c7565b9050600088600301805480602002602001604051908101604052809291908181526020018280548015610bc857602002820191906000526020600020905b815481526020019060010190808311610bb4575b505050505090506000610be3610bdd8b612519565b846126a0565b905060005b86811015610c4557898181518110610c0257610c02613d5b565b6020026020010151838281518110610c1c57610c1c613d5b565b60200260200101818151610c309190613cd1565b90525080610c3d81613d14565b915050610be8565b506000610ca56108ec848d6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b905060008767ffffffffffffffff811115610cc257610cc2613d71565b604051908082528060200260200182016040528015610ceb578160200160208202803683370190505b50905060005b88811015610e6b576000848e6003018381548110610d1157610d11613d5b565b906000526020600020015485610d279190613cb2565b610d319190613ba5565b90506000610d58878481518110610d4a57610d4a613d5b565b602002602001015183612f98565b90506402540be400610d6a828b613cb2565b610d749190613ba5565b848481518110610d8657610d86613d5b565b6020026020010181815250506402540be4008f60050154858581518110610daf57610daf613d5b565b6020026020010151610dc19190613cb2565b610dcb9190613ba5565b878481518110610ddd57610ddd613d5b565b6020026020010151610def9190613cd1565b8f6003018481548110610e0457610e04613d5b565b9060005260206000200181905550838381518110610e2457610e24613d5b565b6020026020010151878481518110610e3e57610e3e613d5b565b60200260200101818151610e529190613cd1565b905250829150610e63905081613d14565b915050610cf1565b50610ecf610ec9858e6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b866126a0565b91508287610edd8483613cd1565b610ee79190613cb2565b610ef19190613ba5565b985060008911610f0357610f03613d2f565b610f0e60018a613b8d565b985089891115610f305760405162461bcd60e51b81526004016102d390613b69565b60018c015460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610f7e57600080fd5b505af1158015610f92573d6000803e3d6000fd5b5050505060005b88811015611007578b8181518110610fb357610fb3613d5b565b6020026020010151600014610ff557610ff5338d8381518110610fd857610fd8613d5b565b60200260200101518f60000184815481106106c2576106c2613d5b565b80610fff81613d14565b915050610f99565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c83856110378e8d613cd1565b6040516110479493929190613aa6565b60405180910390a250505050505050509392505050565b60006103a2826125c7565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f491906138e2565b9050600081116111385760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b60448201526064016102d3565b855460018701546040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561117f57600080fd5b505afa158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b791906138e2565b8611156111f25760405162461bcd60e51b81526020600482015260096024820152683e2062616c616e636560b81b60448201526064016102d3565b818611156112325760405162461bcd60e51b815260206004820152600d60248201526c3e20746f74616c537570706c7960981b60448201526064016102d3565b8085106112715760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b60448201526064016102d3565b60008061127f898989612c6f565b92509050858110156112a35760405162461bcd60e51b81526004016102d390613b69565b6402540be4008960050154836112b99190613cb2565b6112c39190613ba5565b6112cd9082613b8d565b8960030188815481106112e2576112e2613d5b565b9060005260206000200160008282546112fb9190613cd1565b9091555050600189015460405163079cc67960e41b8152336004820152602481018a90526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b5050505061138033828b6000018a815481106106c2576106c2613d5b565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b8454845181146113f15760405162461bcd60e51b81526004016102d390613b3b565b6001860154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561143857600080fd5b505afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147091906138e2565b9050600081116114ba5760405162461bcd60e51b8152602060048201526015602482015274696e73756666696369656e744c697175696469747960581b60448201526064016102d3565b5060008167ffffffffffffffff8111156114d6576114d6613d71565b6040519080825280602002602001820160405280156114ff578160200160208202803683370190505b509050600061150d88612f63565b9050600061151a896125c7565b905060006115cd61077c8b60030180548060200260200160405190810160405280929190818152602001828054801561157257602002820191906000526020600020905b81548152602001906001019080831161155e575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b905060005b858110156117115760008a82815181106115ee576115ee613d5b565b602002602001015111156116ff578a600301818154811061161157611611613d5b565b90600052602060002001548a828151811061162e5761162e613d5b565b6020026020010151106116795760405162461bcd60e51b8152602060048201526013602482015272696e73756666696369656e7442616c616e636560681b60448201526064016102d3565b6402540be4008a828151811061169157611691613d5b565b6020026020010151856116a49190613cb2565b6116ae9190613ba5565b8582815181106116c0576116c0613d5b565b6020026020010181815250506116ff898b83815181106116e2576116e2613d5b565b60200260200101518d60000184815481106106c2576106c2613d5b565b8061170981613d14565b9150506115d2565b508515611781576040516366f9eaab60e01b81526001600160a01b038916906366f9eaab9061174e9033908e908e908a908e908e9060040161397b565b600060405180830381600087803b15801561176857600080fd5b505af115801561177c573d6000803e3d6000fd5b505050505b60008a6003018054806020026020016040519081016040528092919081815260200182805480156117d157602002820191906000526020600020905b8154815260200190600101908083116117bd575b5050505050905060005b868110156118de5760008b82815181106117f7576117f7613d5b565b602002602001015111156118cc578a818151811061181757611817613d5b565b60200260200101516118988d600001838154811061183757611837613d5b565b9060005260206000200160009054906101000a90046001600160a01b031688848151811061186757611867613d5b565b60200260200101518e858151811061188157611881613d5b565b60200260200101516118939190613b8d565b61283c565b6118a29190613cd1565b8282815181106118b4576118b4613d5b565b602002602001018181516118c89190613b8d565b9052505b806118d681613d14565b9150506117db565b50600061193e6108ec838e6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b905082811161194f5761194f613d2f565b6000805b88811015611a7d576119b3858f600301838154811061197457611974613d5b565b90600052602060002001548561198a9190613cb2565b6119949190613ba5565b8583815181106119a6576119a6613d5b565b6020026020010151612f98565b91506402540be4006119c58389613cb2565b6119cf9190613ba5565b8882815181106119e1576119e1613d5b565b6020026020010181815250506402540be4008e60050154898381518110611a0a57611a0a613d5b565b6020026020010151611a1c9190613cb2565b611a269190613ba5565b848281518110611a3857611a38613d5b565b6020026020010151611a4a9190613cd1565b8e6003018281548110611a5f57611a5f613d5b565b60009182526020909120015580611a7581613d14565b915050611953565b508a6001600160a01b0316336001600160a01b03167f1e659566d9cc1f93351027d53422a1ec429f52c34bc45ee462dd91e99bdd26bb8e604051611ac19190613a5d565b60405180910390a350505050505050505050505050565b60006064611ae5836125c7565b6103a29190613ba5565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4357600080fd5b505afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b91906138e2565b905080841115611b8a57600080fd5b845460008167ffffffffffffffff811115611ba757611ba7613d71565b604051908082528060200260200182016040528015611bd0578160200160208202803683370190505b509050611bdd8787612fba565b935060005b8451811015611ce957858181518110611bfd57611bfd613d5b565b6020026020010151858281518110611c1757611c17613d5b565b60200260200101511015611c3d5760405162461bcd60e51b81526004016102d390613b69565b848181518110611c4f57611c4f613d5b565b6020026020010151886003018281548110611c6c57611c6c613d5b565b9060005260206000200154611c819190613cd1565b886003018281548110611c9657611c96613d5b565b9060005260206000200181905550611cd733868381518110611cba57611cba613d5b565b60200260200101518a60000184815481106106c2576106c2613d5b565b80611ce181613d14565b915050611be2565b50600187015460405163079cc67960e41b8152336004820152602481018890526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015611d3857600080fd5b505af1158015611d4c573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea915086905083611d818a88613cd1565b604051611d9093929190613a70565b60405180910390a25050509392505050565b82548251600091908114611dc85760405162461bcd60e51b81526004016102d390613b3b565b60008167ffffffffffffffff811115611de357611de3613d71565b604051908082528060200260200182016040528015611e0c578160200160208202803683370190505b5090506000611e1a87612f63565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6e57600080fd5b505afa158015611e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea691906138e2565b90506000611eb3896125c7565b905060008215611f6d57611f6a61077c8b600301805480602002602001604051908101604052809291908181526020018280548015611572576020028201919060005260206000209081548152602001906001019080831161155e5750505050508c6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015611fbd57602002820191906000526020600020905b815481526020019060010190808311611fa9575b5050505050905060005b878110156120f0578461203d5760008b8281518110611fe857611fe8613d5b565b60200260200101511161203d5760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016102d3565b60008b828151811061205157612051613d5b565b602002602001015111156120de576120b48c600001828154811061207757612077613d5b565b9060005260206000200160009054906101000a90046001600160a01b03168c83815181106120a7576120a7613d5b565b602002602001015161283c565b8282815181106120c6576120c6613d5b565b602002602001018181516120da9190613b8d565b9052505b806120e881613d14565b915050611fc7565b5060006121506108ec838e6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b905082811161216157612161613d2f565b8461218457815161217b9060038e01906020850190613536565b5080985061233b565b6000805b898110156122b8576121a9858f600301838154811061197457611974613d5b565b91506402540be4006121bb838a613cb2565b6121c59190613ba5565b8982815181106121d7576121d7613d5b565b6020026020010181815250506402540be4008e600501548a838151811061220057612200613d5b565b60200260200101516122129190613cb2565b61221c9190613ba5565b84828151811061222e5761222e613d5b565b60200260200101516122409190613cd1565b8e600301828154811061225557612255613d5b565b906000526020600020018190555088818151811061227557612275613d5b565b602002602001015184828151811061228f5761228f613d5b565b602002602001018181516122a39190613cd1565b905250806122b081613d14565b915050612188565b50612316610ec9848f6002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b9150836123238184613cd1565b61232d9088613cb2565b6123379190613ba5565b9950505b8989101561235b5760405162461bcd60e51b81526004016102d390613b69565b60018c01546040516340c10f1960e01b8152336004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156123a957600080fd5b505af11580156123bd573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516110479493929190613aa6565b60008061240c86612519565b9050600086600201868154811061242557612425613d5b565b90600052602060002001548461243b9190613cb2565b82878151811061244d5761244d613d5b565b602002602001015161245f9190613b8d565b905060006124708888888587612952565b9050600088600201878154811061248957612489613d5b565b9060005260206000200154600183868a815181106124a9576124a9613d5b565b60200260200101516124bb9190613cd1565b6124c59190613cd1565b6124cf9190613ba5565b905060006402540be400828b600401546124e99190613cb2565b6124f39190613ba5565b90506124ff8183613cd1565b9a9950505050505050505050565b606061039f8383612fba565b60606103a28260030180548060200260200160405190810160405280929190818152602001828054801561256c57602002820191906000526020600020905b815481526020019060010190808311612558575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156108e257602002820191906000526020600020908154815260200190600101908083116108ce575050505050612bec565b6000816009015442106125dc57506007015490565b81600601548260070154111561264657816008015482600901546126009190613cd1565b600883015461260f9042613cd1565b836006015484600701546126239190613cd1565b61262d9190613cb2565b6126379190613ba5565b82600601546103a29190613b8d565b8160080154826009015461265a9190613cd1565b60088301546126699042613cd1565b8360070154846006015461267d9190613cd1565b6126879190613cb2565b6126919190613ba5565b82600601546103a29190613cd1565b8151600090816126af85613152565b9050806126c1576000925050506103a2565b600081816126cf8588613cb2565b905060005b6101008110156127f3578260005b8a5181101561273857878b82815181106126fe576126fe613d5b565b60200260200101516127109190613cb2565b61271a8684613cb2565b6127249190613ba5565b91508061273081613d14565b9150506126e2565b508394508087600161274a9190613b8d565b6127549190613cb2565b6064856127618287613cd1565b61276b9190613cb2565b6127759190613ba5565b61277f9190613b8d565b8461278a8984613cb2565b60646127968a88613cb2565b6127a09190613ba5565b6127aa9190613b8d565b6127b49190613cb2565b6127be9190613ba5565b935060016127cc8587612f98565b116127e057839750505050505050506103a2565b50806127eb81613d14565b9150506126d4565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016102d3565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561288057600080fd5b505afa158015612894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b891906138e2565b90506128cf6001600160a01b03851633308661319e565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a082319060240160206040518083038186803b15801561291057600080fd5b505afa158015612924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294891906138e2565b61047a9190613cd1565b6000838514156129905760405162461bcd60e51b815260206004820152600960248201526839b0b6b2aa37b5b2b760b91b60448201526064016102d3565b855480861080156129a057508085105b6129bc5760405162461bcd60e51b81526004016102d390613b12565b60006129c7886125c7565b905060006129d58383613cb2565b905060006129e386846126a0565b9050600081815b86811015612a6b578a8114156129ff57612a59565b60008c8214612a2757898281518110612a1a57612a1a613d5b565b6020026020010151612a29565b8a5b9050612a358185613b8d565b9350612a418882613cb2565b612a4b8685613cb2565b612a559190613ba5565b9250505b80612a6381613d14565b9150506129ea565b50612a768685613cb2565b6064612a828584613cb2565b612a8c9190613cb2565b612a969190613ba5565b9050600084612aa6606486613cb2565b612ab09190613ba5565b612aba9084613b8d565b9050600084815b610100811015612b46578192508684836002612add9190613cb2565b612ae79190613b8d565b612af19190613cd1565b85612afc8480613cb2565b612b069190613b8d565b612b109190613ba5565b91506001612b1e8484612f98565b11612b3457509850610732975050505050505050565b80612b3e81613d14565b915050612ac1565b5060405162461bcd60e51b81526020600482015260126024820152711e50d85b18dd5b185d1a5bdb91985a5b195960721b60448201526064016102d3565b6040516001600160a01b038316602482015260448101829052612be790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526131dc565b505050565b606060005b8351811015612c6757838181518110612c0c57612c0c613d5b565b6020026020010151838281518110612c2657612c26613d5b565b6020026020010151612c389190613cb2565b838281518110612c4a57612c4a613d5b565b602090810291909101015280612c5f81613d14565b915050612bf1565b509092915050565b825460009081908310612c945760405162461bcd60e51b81526004016102d390613b12565b6000612c9f866125c7565b90506000612cac87612519565b90506000612cba82846126a0565b905060008860010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d0e57600080fd5b505afa158015612d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4691906138e2565b612d50838a613cb2565b612d5a9190613ba5565b612d649083613cd1565b90506000612d758a868a87866132ae565b9050836000612d838c612f63565b905060005b8c54811015612e8b5760008b821415612ddd578487878a8581518110612db057612db0613d5b565b6020026020010151612dc29190613cb2565b612dcc9190613ba5565b612dd69190613cd1565b9050612e34565b8686898481518110612df157612df1613d5b565b6020026020010151612e039190613cb2565b612e0d9190613ba5565b888381518110612e1f57612e1f613d5b565b6020026020010151612e319190613cd1565b90505b6402540be400612e448285613cb2565b612e4e9190613ba5565b848381518110612e6057612e60613d5b565b60200260200101818151612e749190613cd1565b905250819050612e8381613d14565b915050612d88565b50612e998c888c85886132ae565b828b81518110612eab57612eab613d5b565b6020026020010151612ebd9190613cd1565b98508b6002018a81548110612ed457612ed4613d5b565b906000526020600020015460018a612eec9190613cd1565b612ef69190613ba5565b9850888c6002018b81548110612f0e57612f0e613d5b565b906000526020600020015484888d81518110612f2c57612f2c613d5b565b6020026020010151612f3e9190613cd1565b612f489190613ba5565b612f529190613cd1565b975050505050505050935093915050565b8054600090612f73600182613cd1565b612f7e906004613cb2565b818460040154612f8e9190613cb2565b610a5b9190613ba5565b6000818311612fb057612fab8383613cd1565b61039f565b61039f8284613cd1565b606060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561300e57600080fd5b505afa158015613022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304691906138e2565b9050808311156130985760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c7900000000000060448201526064016102d3565b835460009067ffffffffffffffff8111156130b5576130b5613d71565b6040519080825280602002602001820160405280156130de578160200160208202803683370190505b50905060005b8554811015610a6f57828587600301838154811061310457613104613d5b565b90600052602060002001546131199190613cb2565b6131239190613ba5565b82828151811061313557613135613d5b565b60209081029190910101528061314a81613d14565b9150506130e4565b6000805b82518110156131985782818151811061317157613171613d5b565b6020026020010151826131849190613b8d565b91508061319081613d14565b915050613156565b50919050565b6040516001600160a01b03808516602483015283166044820152606481018290526131d69085906323b872dd60e01b90608401612bb0565b50505050565b6000613231826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134229092919063ffffffff16565b805190915015612be7578080602001905181019061324f9190613637565b612be75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102d3565b84546000908085106132c2576132c2613d2f565b60006132ce8288613cb2565b90508360008080805b86811015613349578a8114156132ec57613337565b8981815181106132fe576132fe613d5b565b6020026020010151925082846133149190613b8d565b93506133208784613cb2565b61332a8a87613cb2565b6133349190613ba5565b94505b8061334181613d14565b9150506132d7565b506133548686613cb2565b60646133608a87613cb2565b61336a9190613cb2565b6133749190613ba5565b935060008561338460648b613cb2565b61338e9190613ba5565b6133989085613b8d565b90508860005b6101008110156127f3578193508a838360026133ba9190613cb2565b6133c49190613b8d565b6133ce9190613cd1565b876133d98480613cb2565b6133e39190613b8d565b6133ed9190613ba5565b915060016133fb8584612f98565b11613410575097506107329650505050505050565b8061341a81613d14565b91505061339e565b606061047a8484600085856001600160a01b0385163b6134845760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d3565b600080866001600160a01b031685876040516134a0919061395f565b60006040518083038185875af1925050503d80600081146134dd576040519150601f19603f3d011682016040523d82523d6000602084013e6134e2565b606091505b50915091506134f28282866134fd565b979650505050505050565b6060831561350c575081610a5b565b82511561351c5782518084602001fd5b8160405162461bcd60e51b81526004016102d39190613adf565b828054828255906000526020600020908101928215613571579160200282015b82811115613571578251825591602001919060010190613556565b5061357d929150613581565b5090565b5b8082111561357d5760008155600101613582565b600082601f8301126135a757600080fd5b8135602067ffffffffffffffff808311156135c4576135c4613d71565b8260051b604051601f19603f830116810181811084821117156135e9576135e9613d71565b6040528481528381019250868401828801850189101561360857600080fd5b600092505b8583101561362b57803584529284019260019290920191840161360d565b50979650505050505050565b60006020828403121561364957600080fd5b8151610a5b81613d87565b60006020828403121561366657600080fd5b5035919050565b60008060008060006080868803121561368557600080fd5b85359450602086013567ffffffffffffffff808211156136a457600080fd5b6136b089838a01613596565b9550604088013591506001600160a01b03821682146136ce57600080fd5b909350606087013590808211156136e457600080fd5b818801915088601f8301126136f857600080fd5b81358181111561370757600080fd5b89602082850101111561371957600080fd5b9699959850939650602001949392505050565b60008060006060848603121561374157600080fd5b83359250602084013567ffffffffffffffff81111561375f57600080fd5b61376b86828701613596565b925050604084013561377c81613d87565b809150509250925092565b60008060006060848603121561379c57600080fd5b83359250602084013567ffffffffffffffff8111156137ba57600080fd5b6137c686828701613596565b925050604084013590509250925092565b600080604083850312156137ea57600080fd5b50508035926020909101359150565b60008060006060848603121561380e57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561383357600080fd5b61383f86828701613596565b9150509250925092565b60008060006060848603121561385e57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561388b57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a086880312156138bf57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156138f457600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561392b5781518752958201959082019060010161390f565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008251613971818460208701613ce8565b9190910192915050565b600060a0820160018060a01b03808a168452602060a081860152828a5480855260c0870191508b60005282600020945060005b818110156139cc5785548516835260019586019592840192016139ae565b505085810360408701526139e0818b6138fb565b935050505082810360608401526139f781876138fb565b90508281036080840152613a0c818587613936565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613a5157835183529284019291840191600101613a35565b50909695505050505050565b60208152600061039f60208301846138fb565b606081526000613a8360608301866138fb565b8281036020840152613a9581866138fb565b915050826040830152949350505050565b608081526000613ab960808301876138fb565b8281036020840152613acb81876138fb565b604084019590955250506060015292915050565b6020815260008251806020840152613afe816040850160208701613ce8565b601f01601f19169190910160400192915050565b6020808252600f908201526e696e6465784f75744f6652616e676560881b604082015260600190565b6020808252601490820152730d2dcecc2d8d2c882dadeeadce8e698cadccee8d60631b604082015260600190565b6020808252600a90820152693e20736c69707061676560b01b604082015260600190565b60008219821115613ba057613ba0613d45565b500190565b600082613bc257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613c02578160001904821115613be857613be8613d45565b80851615613bf557918102915b93841c9390800290613bcc565b509250929050565b600061039f8383600082613c20575060016103a2565b81613c2d575060006103a2565b8160018114613c435760028114613c4d57613c69565b60019150506103a2565b60ff841115613c5e57613c5e613d45565b50506001821b6103a2565b5060208310610133831016604e8410600b8410161715613c8c575081810a6103a2565b613c968383613bc7565b8060001904821115613caa57613caa613d45565b029392505050565b6000816000190483118215151615613ccc57613ccc613d45565b500290565b600082821015613ce357613ce3613d45565b500390565b60005b83811015613d03578181015183820152602001613ceb565b838111156131d65750506000910152565b6000600019821415613d2857613d28613d45565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114613d9557600080fd5b5056fea26469706673582212209b1e52aec30bf63ef74679141e8adade544a71d45a0a5eef2c9fbbfe4cdc77c464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(StableSwapStorage.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calculate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(StableSwapStorage.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(StableSwapStorage.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "getAPrecise(StableSwapStorage.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(StableSwapStorage.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}