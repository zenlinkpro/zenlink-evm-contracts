{
  "address": "0x36aa49803aF6c5b2b2Fe8488D78AbB334de52320",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "Candidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollectProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "FeeControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "FeeDistributorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts_out",
          "type": "uint256[]"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        }
      ],
      "name": "NewFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "A",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "soldId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ADMIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_A_CHANGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RAMP_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminCandidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "inIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "outIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidateConfirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amountsOut",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPrecise",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getAdminBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "adminBalances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPrecisionMultipliers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_coins",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_decimals",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lpTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureATime",
          "type": "uint256"
        }
      ],
      "name": "rampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "setAdminCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeController",
          "type": "address"
        }
      ],
      "name": "setFeeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "setFeeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopRampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "fromIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "toIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapStorage",
      "outputs": [
        {
          "internalType": "contract LPToken",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialATime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureATime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenIndexes",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x96d13e162a978f9603f8868533211941fb2873fa280e49df7603bfaad606ab1f",
  "receipt": {
    "to": null,
    "from": "0x0597EB296eFbb84CA64C843a7F80d7F8Bff7d17d",
    "contractAddress": "0x36aa49803aF6c5b2b2Fe8488D78AbB334de52320",
    "transactionIndex": 68,
    "gasUsed": "3914765",
    "logsBloom": "0x
    "blockHash": "0x904f471040d6f0081ec382e86e56732ca06e35845dbf020a52949e27cd9ed9b5",
    "transactionHash": "0x96d13e162a978f9603f8868533211941fb2873fa280e49df7603bfaad606ab1f",
    "logs": [],
    "blockNumber": 2782402,
    "cumulativeGasUsed": "5359355",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "007aa94c81b3bc67ae48537a63ee475f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"Candidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"FeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"FeeDistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts_out\",\"type\":\"uint256[]\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"}],\"name\":\"NewFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A_CHANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RAMP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"inIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"outIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPrecise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getAdminBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"adminBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrecisionMultipliers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_coins\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"}],\"name\":\"rampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setAdminCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeController\",\"type\":\"address\"}],\"name\":\"setFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStorage\",\"outputs\":[{\"internalType\":\"contract LPToken\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIndexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"rampA(uint256,uint256)\":{\"params\":{\"futureA\":\"the new A to ramp towards\",\"futureATime\":\"timestamp when the new A should be reached\"}},\"setFee(uint256,uint256)\":{\"details\":\"adminFee cannot be higher than 100% of the swap fee swap fee cannot be higher than 1% of each swap\",\"params\":{\"newAdminFee\":\"new admin fee to be applied on future transactions\",\"newSwapFee\":\"new swap fee to be applied on future transactions\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AddLiquidity(address,uint256[],uint256[],uint256,uint256)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"MIN_RAMP_TIME()\":{\"notice\":\"constants\"},\"addLiquidity(uint256[],uint256,uint256)\":{\"notice\":\"PUBLIC FUNCTIONS\"},\"getVirtualPrice()\":{\"notice\":\"VIEW FUNCTIONS\"},\"rampA(uint256,uint256)\":{\"notice\":\"Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range.\"},\"setFee(uint256,uint256)\":{\"notice\":\"Sets the admin fee\"},\"swapStorage()\":{\"notice\":\"STATE VARS\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableswap/StableSwap.sol\":\"StableSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/libraries/AdminUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract AdminUpgradeable {\\n    address public admin;\\n    address public adminCandidate;\\n\\n    function _initializeAdmin(address _admin) internal {\\n        require(admin == address(0), \\\"admin already set\\\");\\n\\n        admin = _admin;\\n    }\\n\\n    function candidateConfirm() external {\\n        require(msg.sender == adminCandidate, \\\"not Candidate\\\");\\n        emit AdminChanged(admin, adminCandidate);\\n\\n        admin = adminCandidate;\\n        adminCandidate = address(0);\\n    }\\n\\n    function setAdminCandidate(address _candidate) external onlyAdmin {\\n        adminCandidate = _candidate;\\n        emit Candidate(_candidate);\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    event Candidate(address indexed newAdmin);\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n}\",\"keccak256\":\"0x1f6a33fd54009078e00c3b586e2b9bb359ff99d9c5cb87e3e32ec109480f99ae\",\"license\":\"MIT\"},\"contracts/stableswap/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x86c437195727727a42b37c6bfd9a233cec2c5b5a3730fa77542e549e2c1104e2\",\"license\":\"MIT\"},\"contracts/stableswap/OwnerPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../libraries/AdminUpgradeable.sol\\\";\\n\\nabstract contract OwnerPausable is Pausable, AdminUpgradeable {\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x63c8cff06d17b79106a1688a55100c0c7bfb3a1b4e0390b2e54a4e831f8fa448\",\"license\":\"MIT\"},\"contracts/stableswap/StableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./OwnerPausable.sol\\\";\\nimport \\\"./StableSwapStorage.sol\\\";\\nimport \\\"./interfaces/IStableSwap.sol\\\";\\n\\ncontract StableSwap is OwnerPausable, ReentrancyGuard, Initializable, IStableSwap {\\n    using StableSwapStorage for StableSwapStorage.SwapStorage;\\n    using SafeERC20 for IERC20;\\n\\n    /// constants\\n    uint256 public constant MIN_RAMP_TIME = 1 days;\\n    uint256 public constant MAX_A = 1e6; // max_a with precision\\n    uint256 public constant MAX_A_CHANGE = 10;\\n    uint256 public constant MAX_ADMIN_FEE = 1e10; // 100%\\n    uint256 public constant MAX_SWAP_FEE = 1e8; // 1%\\n\\n    /// STATE VARS\\n    StableSwapStorage.SwapStorage public override swapStorage;\\n    address public feeDistributor;\\n    address public feeController;\\n    mapping(address => uint8) public tokenIndexes;\\n\\n    modifier deadlineCheck(uint256 _deadline) {\\n        require(block.timestamp <= _deadline, \\\"timeout\\\");\\n        _;\\n    }\\n\\n    modifier onlyFeeControllerOrOwner() {\\n        require(msg.sender == feeController || msg.sender == admin, \\\"!feeControllerOrOwner\\\");\\n        _;\\n    }\\n\\n    constructor () {\\n        _initializeAdmin(msg.sender);\\n    }\\n\\n    function initialize(\\n        address[] memory _coins,\\n        uint8[] memory _decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        address _feeDistributor\\n    ) public virtual onlyAdmin initializer {\\n        require(_coins.length == _decimals.length, \\\"coinsLength != decimalsLength\\\");\\n        require(_feeDistributor != address(0), \\\"feeDistributor = empty\\\");\\n        uint256 numberOfCoins = _coins.length;\\n        uint256[] memory rates = new uint256[](numberOfCoins);\\n        IERC20[] memory coins = new IERC20[](numberOfCoins);\\n        for (uint256 i = 0; i < numberOfCoins; i++) {\\n            require(_coins[i] != address(0), \\\"invalidTokenAddress\\\");\\n            require(_decimals[i] <= StableSwapStorage.POOL_TOKEN_COMMON_DECIMALS, \\\"invalidDecimals\\\");\\n            rates[i] = 10**(StableSwapStorage.POOL_TOKEN_COMMON_DECIMALS - _decimals[i]);\\n            coins[i] = IERC20(_coins[i]);\\n            tokenIndexes[address(coins[i])] = uint8(i);\\n        }\\n\\n        require(_A < MAX_A, \\\"> maxA\\\");\\n        require(_fee <= MAX_SWAP_FEE, \\\"> maxSwapFee\\\");\\n        require(_adminFee <= MAX_ADMIN_FEE, \\\"> maxAdminFee\\\");\\n\\n        swapStorage.lpToken = new LPToken(lpTokenName, lpTokenSymbol);\\n        swapStorage.balances = new uint256[](numberOfCoins);\\n        swapStorage.tokenMultipliers = rates;\\n        swapStorage.pooledTokens = coins;\\n        swapStorage.initialA = _A * StableSwapStorage.A_PRECISION;\\n        swapStorage.futureA = _A * StableSwapStorage.A_PRECISION;\\n        swapStorage.fee = _fee;\\n        swapStorage.adminFee = _adminFee;\\n        feeDistributor = _feeDistributor;\\n    }\\n\\n    /// PUBLIC FUNCTIONS\\n    function addLiquidity(\\n        uint256[] memory amounts,\\n        uint256 minMintAmount,\\n        uint256 deadline\\n    ) external virtual override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\\n        return swapStorage.addLiquidity(amounts, minMintAmount);\\n    }\\n\\n    function flashLoan(\\n        uint256[] memory amountsOut,\\n        address to,\\n        bytes calldata data,\\n        uint256 deadline\\n    ) external virtual override whenNotPaused nonReentrant deadlineCheck(deadline) {\\n        swapStorage.flashLoan(amountsOut, to, data);\\n    }\\n\\n    function swap(\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        uint256 deadline\\n    ) external virtual override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\\n        return swapStorage.swap(fromIndex, toIndex, inAmount, minOutAmount);\\n    }\\n\\n    function removeLiquidity(\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts,\\n        uint256 deadline\\n    ) external virtual override nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\\n        return swapStorage.removeLiquidity(lpAmount, minAmounts);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        uint256 lpAmount,\\n        uint8 index,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\\n        return swapStorage.removeLiquidityOneToken(lpAmount, index, minAmount);\\n    }\\n\\n    function removeLiquidityImbalance(\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\\n        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n\\n    function getVirtualPrice() external virtual view override returns (uint256) {\\n        return swapStorage.getVirtualPrice();\\n    }\\n\\n    function getA() external virtual view override returns (uint256) {\\n        return swapStorage.getA();\\n    }\\n\\n    function getAPrecise() external virtual view override returns (uint256) {\\n        return swapStorage.getAPrecise();\\n    }\\n\\n    function getTokens() external virtual view override returns (IERC20[] memory) {\\n        return swapStorage.pooledTokens;\\n    }\\n\\n    function getToken(uint8 index) external virtual view override returns (IERC20) {\\n        return swapStorage.pooledTokens[index];\\n    }\\n\\n    function getLpToken() external virtual view override returns (IERC20) {\\n        return swapStorage.lpToken;\\n    }\\n\\n    function getTokenIndex(address token) external virtual view override returns (uint8 index) {\\n        index = tokenIndexes[token];\\n        require(address(swapStorage.pooledTokens[index]) == token, \\\"tokenNotFound\\\");\\n    }\\n\\n    function getTokenPrecisionMultipliers() external virtual view returns (uint256[] memory) {\\n        return swapStorage.tokenMultipliers;\\n    }\\n\\n    function getTokenBalances() external virtual view override returns (uint256[] memory) {\\n        return swapStorage.balances;\\n    }\\n\\n    function getTokenBalance(uint8 index) external virtual view override returns (uint256) {\\n        return swapStorage.balances[index];\\n    }\\n\\n    function getNumberOfTokens() external virtual view override returns (uint256) {\\n        return swapStorage.pooledTokens.length;\\n    }\\n\\n    function getAdminBalances() external virtual view override returns (uint256[] memory adminBalances) {\\n        uint256 length = swapStorage.pooledTokens.length;\\n        adminBalances = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            adminBalances[i] = swapStorage.getAdminBalance(i);\\n        }\\n    }\\n\\n    function getAdminBalance(uint8 index) external virtual view override returns (uint256) {\\n        return swapStorage.getAdminBalance((index));\\n    }\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external virtual view override returns (uint256) {\\n        return swapStorage.calculateTokenAmount(amounts, deposit);\\n    }\\n\\n    function calculateSwap(\\n        uint8 inIndex,\\n        uint8 outIndex,\\n        uint256 inAmount\\n    ) external virtual view override returns (uint256) {\\n        return swapStorage.calculateSwap(inIndex, outIndex, inAmount);\\n    }\\n\\n    function calculateRemoveLiquidity(uint256 amount) external virtual view override returns (uint256[] memory) {\\n        return swapStorage.calculateRemoveLiquidity(amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(uint256 amount, uint8 index) external virtual view override returns (uint256) {\\n        return swapStorage.calculateRemoveLiquidityOneToken(amount, index);\\n    }\\n\\n    /// RESTRICTED FUNCTION\\n\\n    /**\\n     * @notice Sets the admin fee\\n     * @dev adminFee cannot be higher than 100% of the swap fee\\n     * swap fee cannot be higher than 1% of each swap\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setFee(uint256 newSwapFee, uint256 newAdminFee) external onlyAdmin {\\n        require(newSwapFee <= MAX_SWAP_FEE, \\\"> maxSwapFee\\\");\\n        require(newAdminFee <= MAX_ADMIN_FEE, \\\"> maxAdminFee\\\");\\n        swapStorage.adminFee = newAdminFee;\\n        swapStorage.fee = newSwapFee;\\n        emit NewFee(newSwapFee, newAdminFee);\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param futureA the new A to ramp towards\\n     * @param futureATime timestamp when the new A should be reached\\n     */\\n    function rampA(uint256 futureA, uint256 futureATime) external onlyAdmin {\\n        require(block.timestamp >= swapStorage.initialATime + (1 days), \\\"< rampDelay\\\"); // please wait 1 days before start a new ramping\\n        require(futureATime >= block.timestamp + (MIN_RAMP_TIME), \\\"< minRampTime\\\");\\n        require(0 < futureA && futureA < MAX_A, \\\"outOfRange\\\");\\n\\n        uint256 initialAPrecise = swapStorage.getAPrecise();\\n        uint256 futureAPrecise = futureA * StableSwapStorage.A_PRECISION;\\n\\n        if (futureAPrecise < initialAPrecise) {\\n            require(futureAPrecise * (MAX_A_CHANGE) >= initialAPrecise, \\\"> maxChange\\\");\\n        } else {\\n            require(futureAPrecise <= initialAPrecise * (MAX_A_CHANGE), \\\"> maxChange\\\");\\n        }\\n\\n        swapStorage.initialA = initialAPrecise;\\n        swapStorage.futureA = futureAPrecise;\\n        swapStorage.initialATime = block.timestamp;\\n        swapStorage.futureATime = futureATime;\\n\\n        emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureATime);\\n    }\\n\\n    function stopRampA() external onlyAdmin {\\n        require(swapStorage.futureATime > block.timestamp, \\\"alreadyStopped\\\");\\n        uint256 currentA = swapStorage.getAPrecise();\\n\\n        swapStorage.initialA = currentA;\\n        swapStorage.futureA = currentA;\\n        swapStorage.initialATime = block.timestamp;\\n        swapStorage.futureATime = block.timestamp;\\n\\n        emit StopRampA(currentA, block.timestamp);\\n    }\\n\\n    function setFeeController(address _feeController) external onlyAdmin {\\n        require(_feeController != address(0), \\\"zeroAddress\\\");\\n        feeController = _feeController;\\n        emit FeeControllerChanged(_feeController);\\n    }\\n\\n    function setFeeDistributor(address _feeDistributor) external onlyAdmin {\\n        require(_feeDistributor != address(0), \\\"zeroAddress\\\");\\n        feeDistributor = _feeDistributor;\\n        emit FeeDistributorChanged(_feeDistributor);\\n    }\\n\\n    function withdrawAdminFee() external override onlyFeeControllerOrOwner {\\n        for (uint256 i = 0; i < swapStorage.pooledTokens.length; i++) {\\n            IERC20 token = swapStorage.pooledTokens[i];\\n            uint256 balance = token.balanceOf(address(this)) - (swapStorage.balances[i]);\\n            if (balance != 0) {\\n                token.safeTransfer(feeDistributor, balance);\\n                emit CollectProtocolFee(address(token), balance);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edc85f956e1af75290782934e7bcad70fcdfff5df9f8491c4503544bbec6411\",\"license\":\"MIT\"},\"contracts/stableswap/StableSwapStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IStableSwapCallee.sol\\\";\\nimport \\\"./LPToken.sol\\\";\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary StableSwapStorage {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    event FlashLoan(\\n        address indexed caller,\\n        address indexed receiver,\\n        uint256[] amounts_out\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 sold_id,\\n        uint256 tokens_sold,\\n        uint256 bought_id,\\n        uint256 tokens_bought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calculate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        uint256[] tokenMultipliers; // token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] balances; // effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256 fee; // swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 adminFee; // admin fee in ratio of swap fee.\\n        uint256 initialA; // observation of A, multiplied with A_PRECISION\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"initialDepositRequireAllTokens\\\");\\n            }\\n            // get real transfer in amount\\n            if (amounts[i] > 0) {\\n                newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    function flashLoan(\\n        SwapStorage storage self,\\n        uint256[] memory amountsOut,\\n        address to,\\n        bytes calldata data\\n    ) external {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amountsOut.length == nCoins, \\\"invalidAmountsLength\\\");\\n        {\\n            uint256 tokenSupply = self.lpToken.totalSupply();\\n            require(tokenSupply > 0, \\\"insufficientLiquidity\\\");\\n        }\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amountsOut[i] > 0) {\\n                require(amountsOut[i] < self.balances[i], \\\"insufficientBalance\\\");\\n                fees[i] = (_fee * amountsOut[i]) / FEE_DENOMINATOR;\\n                self.pooledTokens[i].safeTransfer(to, amountsOut[i]);\\n            }\\n        }\\n\\n        if (data.length > 0) {\\n            IStableSwapCallee(to).zenlinkStableSwapCall(\\n                msg.sender, \\n                self.pooledTokens,\\n                amountsOut, \\n                fees, \\n                data\\n            );\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amountsOut[i] > 0) {\\n                newBalances[i] += (_doTransferIn(self.pooledTokens[i], amountsOut[i] + fees[i]) - amountsOut[i]);\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0);\\n\\n        uint256 diff = 0;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n        }\\n\\n        emit FlashLoan(msg.sender, to, amountsOut);\\n    }\\n\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // just in case there were some rounding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(msg.sender, dy);\\n        emit TokenExchange(msg.sender, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> slippage\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> slippage\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount += 1; // in case of rounding errors\\n        require(burnAmount <= maxBurnAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        if (tokenSupply > 0) {\\n            return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n        }\\n        return 0;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance - 1) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    function calculateRemoveLiquidity(SwapStorage storage self, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _calculateRemoveLiquidity(self, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, lpAmount, tokenIndex);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return\\n                self.initialA +\\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\\n                (self.futureATime - self.initialATime);\\n        }\\n\\n        return\\n            self.initialA -\\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\\n            (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D =\\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap success\\n     * @return NORMALIZED balance of output token if the swap success\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp);\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(SwapStorage storage self, uint256 amount)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (amount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n}\\n\",\"keccak256\":\"0xe076e725685db301a109ed7e19e67bec09a1594ea8ee3cc13a8ae6db61b03ce7\",\"license\":\"MIT\"},\"contracts/stableswap/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../LPToken.sol\\\";\\n\\ninterface IStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event FlashLoan(\\n        address indexed caller,\\n        address indexed receiver,\\n        uint256[] amounts_out\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 soldId,\\n        uint256 tokensSold,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            LPToken,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        uint256[] memory amountsOut,\\n        address to,\\n        bytes calldata data,\\n        uint256 deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdrawAdminFee() external;\\n}\\n\",\"keccak256\":\"0xa6fbab4b724f9264e156cc78ef4fb5998932462485f0592855b95d9939e94a73\",\"license\":\"MIT\"},\"contracts/stableswap/interfaces/IStableSwapCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwapCallee {\\n    function zenlinkStableSwapCall(\\n        address sender, \\n        IERC20[] memory tokens,\\n        uint256[] memory amounts, \\n        uint256[] memory fees, \\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x72e42ecacb3cc3f89e0e23c029560588b5627bbc0613be79db16394576fbbf24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002c15760003560e01c80638456cb591162000179578063b28cb6dc11620000df578063e6ab28061162000092578063e6ab28061462000653578063efeecb51146200066a578063f2fad2b61462000673578063f3de0362146200068a578063f851a4401462000697578063fe49abe314620006b057600080fd5b8063b28cb6dc14620005fd578063c4db7fa01462000614578063ccfc2e8d146200061e578063d41f65681462000635578063d46300fd146200063f578063e25aa5fa146200064957600080fd5b806396de7aa0116200013857806396de7aa01462000597578063a1dc903114620005ae578063a95b089f14620005b8578063aa6ca80814620005cf578063ab3d854414620005e8578063ab5ac06114620005f457600080fd5b80638456cb59146200053157806384cdd9bc146200053b5780638554a7d4146200055257806391695586146200056957806391ceb3eb146200058057600080fd5b80633ed4c678116200022b5780635c975abb11620001de5780635c975abb146200045a5780635fd65f0f146200047157806366c0bd2414620004dd5780636999b37714620004f45780638214f5a4146200050857806382b86600146200051a57600080fd5b80633ed4c67814620003ea5780633f02323014620004015780633f4ba83a146200040b5780634d49e87d146200041557806352f7c988146200042c578063593d132c146200044357600080fd5b806318f52ce2116200028457806318f52ce2146200036d57806331cd52b01462000386578063342a87a1146200039d5780633969841514620003b45780633accfa6c14620003bf5780633e3a156014620003d357600080fd5b806304bc3b1c14620002c657806306e9481c14620003035780630ba81959146200031d5780630d43e8ad14620003275780630e0807f61462000354575b600080fd5b620002ec620002d736600462002a16565b60106020526000908152604090205460ff1681565b60405160ff90911681526020015b60405180910390f35b6200030e6201518081565b604051908152602001620002fa565b6200030e620006ba565b600e546200033b906001600160a01b031681565b6040516001600160a01b039091168152602001620002fa565b6200036b6200036536600462002c49565b62000749565b005b6200037762000829565b604051620002fa91906200300d565b620003776200039736600462002da1565b6200094a565b6200030e620003ae36600462002e17565b62000a3c565b6200030e620f424081565b6001546200033b906001600160a01b031681565b6200030e620003e436600462002e46565b62000ade565b6200036b620003fb36600462002a16565b62000be3565b6200036b62000cb0565b6200036b62000d71565b6200030e6200042636600462002cfc565b62000daf565b6200036b6200043d36600462002df4565b62000e99565b6200036b6200045436600462002df4565b62000f9e565b60005460ff166040519015158152602001620002fa565b600554600854600954600a54600b54600c54600d546200049d966001600160a01b031695949392919087565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001620002fa565b620002ec620004ee36600462002a16565b62001264565b600f546200033b906001600160a01b031681565b6005546001600160a01b03166200033b565b6200033b6200052b36600462002e84565b620012f4565b6200036b6200132d565b6200030e6200054c36600462002cfc565b62001369565b6200030e6200056336600462002e84565b620013ff565b6200030e6200057a36600462002ee3565b62001491565b6200030e6200059136600462002e84565b6200159f565b6200036b620005a836600462002a16565b620015cf565b620003776200164b565b6200030e620005c936600462002ea2565b620016a8565b620005d962001754565b604051620002fa919062002fbe565b6200030e6305f5e10081565b6200030e600a81565b6200036b6200060e36600462002a34565b620017ba565b6200036b62001e39565b6200036b6200062f36600462002a16565b62001f88565b620003776200204f565b6200030e620020aa565b6200030e620020e5565b6200030e6200066436600462002b1d565b62002120565b6004546200030e565b620003776200068436600462002d6d565b62002162565b6200030e6402540be40081565b6000546200033b9061010090046001600160a01b031681565b6200036b620021f6565b604051637461cf1b60e01b815260048082015260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__90637461cf1b906024015b60206040518083038186803b1580156200070957600080fd5b505af41580156200071e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000744919062002d87565b905090565b62000753620023d4565b600280541415620007815760405162461bcd60e51b81526004016200077890620030d2565b60405180910390fd5b600280558042811015620007a95760405162461bcd60e51b81526004016200077890620030b1565b60405163a5416c7b60e01b815273__$7cc55797c499de4fb3bba1e07e89d0e3e2$__9063a5416c7b90620007ea906004908a908a908a908a9085016200315b565b60006040518083038186803b1580156200080357600080fd5b505af415801562000818573d6000803e3d6000fd5b505060016002555050505050505050565b600454606090806001600160401b038111156200084a576200084a62003438565b60405190808252806020026020018201604052801562000874578160200160208202803683370190505b50915060005b818110156200094557604051630a1368cd60e01b81526004808201526024810182905273__$7cc55797c499de4fb3bba1e07e89d0e3e2$__90630a1368cd9060440160206040518083038186803b158015620008d557600080fd5b505af4158015620008ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000910919062002d87565b83828151811062000925576200092562003422565b6020908102919091010152806200093c81620033ee565b9150506200087a565b505090565b6060600280541415620009715760405162461bcd60e51b81526004016200077890620030d2565b600280558142811015620009995760405162461bcd60e51b81526004016200077890620030b1565b60405163d0b1a00560e01b815273__$7cc55797c499de4fb3bba1e07e89d0e3e2$__9063d0b1a00590620009d690600490899089908301620031e5565b60006040518083038186803b158015620009ef57600080fd5b505af415801562000a04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000a2e919081019062002ba9565b600160025595945050505050565b6040516309bba52360e31b81526004808201526024810183905260ff8216604482015260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__90634ddd29189060640160206040518083038186803b15801562000a9a57600080fd5b505af415801562000aaf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ad5919062002d87565b90505b92915050565b600060028054141562000b055760405162461bcd60e51b81526004016200077890620030d2565b6002805562000b13620023d4565b818042111562000b375760405162461bcd60e51b81526004016200077890620030b1565b6040516346732ec760e11b81526004808201526024810187905260ff861660448201526064810185905273__$7cc55797c499de4fb3bba1e07e89d0e3e2$__90638ce65d8e9060840160206040518083038186803b15801562000b9957600080fd5b505af415801562000bae573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bd4919062002d87565b60016002559695505050505050565b60005461010090046001600160a01b0316331462000c155760405162461bcd60e51b815260040162000778906200308e565b6001600160a01b03811662000c5b5760405162461bcd60e51b815260206004820152600b60248201526a7a65726f4164647265737360a81b604482015260640162000778565b600f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f4c3f3b9852ccceadd50f16518f348e2624c8f0240acdd5bc81911c0fba83ec67906020015b60405180910390a150565b6001546001600160a01b0316331462000cfc5760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b604482015260640162000778565b600154600080546040516001600160a01b0393841693610100909204909116917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36001805460008054610100600160a81b0319166101006001600160a01b038416021790556001600160a01b0319169055565b60005461010090046001600160a01b0316331462000da35760405162461bcd60e51b815260040162000778906200308e565b62000dad6200241c565b565b600062000dbb620023d4565b60028054141562000de05760405162461bcd60e51b81526004016200077890620030d2565b60028055814281101562000e085760405162461bcd60e51b81526004016200077890620030b1565b604051637217bafd60e11b815273__$7cc55797c499de4fb3bba1e07e89d0e3e2$__9063e42f75fa9062000e4590600490899089908301620031ba565b60206040518083038186803b15801562000e5e57600080fd5b505af415801562000e73573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a2e919062002d87565b60005461010090046001600160a01b0316331462000ecb5760405162461bcd60e51b815260040162000778906200308e565b6305f5e10082111562000f105760405162461bcd60e51b815260206004820152600c60248201526b3e206d61785377617046656560a01b604482015260640162000778565b6402540be40081111562000f575760405162461bcd60e51b815260206004820152600d60248201526c3e206d617841646d696e46656560981b604482015260640162000778565b6009819055600882905560408051838152602081018390527fbe12859b636aed607d5230b2cc2711f68d70e51060e6cca1f575ef5d2fcc95d1910160405180910390a15050565b60005461010090046001600160a01b0316331462000fd05760405162461bcd60e51b815260040162000778906200308e565b600c5462000fe290620151806200325f565b421015620010215760405162461bcd60e51b815260206004820152600b60248201526a3c2072616d7044656c617960a81b604482015260640162000778565b6200103062015180426200325f565b811015620010715760405162461bcd60e51b815260206004820152600d60248201526c3c206d696e52616d7054696d6560981b604482015260640162000778565b816000108015620010845750620f424082105b620010bf5760405162461bcd60e51b815260206004820152600a6024820152696f75744f6652616e676560b01b604482015260640162000778565b604051637461cf1b60e01b815260048082015260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__90637461cf1b9060240160206040518083038186803b1580156200110d57600080fd5b505af415801562001122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001148919062002d87565b90506000620011596064856200337f565b905081811015620011b6578162001172600a836200337f565b1015620011b05760405162461bcd60e51b815260206004820152600b60248201526a3e206d61784368616e676560a81b604482015260640162000778565b62001202565b620011c3600a836200337f565b811115620012025760405162461bcd60e51b815260206004820152600b60248201526a3e206d61784368616e676560a81b604482015260640162000778565b600a829055600b81905542600c819055600d84905560408051848152602081018490528082019290925260608201859052517fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2549181900360800190a150505050565b6001600160a01b0381166000818152601060205260409020546004805460ff9092169291839081106200129b576200129b62003422565b6000918252602090912001546001600160a01b031614620012ef5760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b604482015260640162000778565b919050565b600060046000018260ff168154811062001312576200131262003422565b6000918252602090912001546001600160a01b031692915050565b60005461010090046001600160a01b031633146200135f5760405162461bcd60e51b815260040162000778906200308e565b62000dad62002470565b6000600280541415620013905760405162461bcd60e51b81526004016200077890620030d2565b600280556200139e620023d4565b8180421115620013c25760405162461bcd60e51b81526004016200077890620030b1565b60405163576b973560e01b815273__$7cc55797c499de4fb3bba1e07e89d0e3e2$__9063576b97359062000e4590600490899089908301620031ba565b604051630a1368cd60e01b815260048082015260ff8216602482015260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__90630a1368cd9060440160206040518083038186803b1580156200145657600080fd5b505af41580156200146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ad8919062002d87565b60006200149d620023d4565b600280541415620014c25760405162461bcd60e51b81526004016200077890620030d2565b600280558142811015620014ea5760405162461bcd60e51b81526004016200077890620030b1565b604051633a8d10bd60e01b815260048082015260ff808916602483015287166044820152606481018690526084810185905273__$7cc55797c499de4fb3bba1e07e89d0e3e2$__90633a8d10bd9060a40160206040518083038186803b1580156200155457600080fd5b505af415801562001569573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200158f919062002d87565b6001600255979650505050505050565b600060046003018260ff1681548110620015bd57620015bd62003422565b90600052602060002001549050919050565b60005461010090046001600160a01b03163314620016015760405162461bcd60e51b815260040162000778906200308e565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b606060046003018054806020026020016040519081016040528092919081815260200182805480156200169e57602002820191906000526020600020905b81548152602001906001019080831162001689575b5050505050905090565b6040516376311d0f60e11b815260048082015260ff8085166024830152831660448201526064810182905260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__9063ec623a1e906084015b60206040518083038186803b1580156200170f57600080fd5b505af415801562001724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200174a919062002d87565b90505b9392505050565b606060046000018054806020026020016040519081016040528092919081815260200182805480156200169e57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001792575050505050905090565b60005461010090046001600160a01b03163314620017ec5760405162461bcd60e51b815260040162000778906200308e565b600354610100900460ff16158080156200180d5750600354600160ff909116105b80620018295750303b15801562001829575060035460ff166001145b6200188e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000778565b6003805460ff191660011790558015620018b2576003805461ff0019166101001790555b8751895114620019055760405162461bcd60e51b815260206004820152601d60248201527f636f696e734c656e67746820213d20646563696d616c734c656e677468000000604482015260640162000778565b6001600160a01b038216620019565760405162461bcd60e51b81526020600482015260166024820152756665654469737472696275746f72203d20656d70747960501b604482015260640162000778565b88516000816001600160401b0381111562001975576200197562003438565b6040519080825280602002602001820160405280156200199f578160200160208202803683370190505b5090506000826001600160401b03811115620019bf57620019bf62003438565b604051908082528060200260200182016040528015620019e9578160200160208202803683370190505b50905060005b8381101562001bf15760006001600160a01b03168d828151811062001a185762001a1862003422565b60200260200101516001600160a01b0316141562001a6f5760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964546f6b656e4164647265737360681b604482015260640162000778565b60128c828151811062001a865762001a8662003422565b602002602001015160ff16111562001ad35760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964446563696d616c7360881b604482015260640162000778565b8b818151811062001ae85762001ae862003422565b602002602001015160ff16601262001b019190620033a1565b62001b0e90600a620032c3565b83828151811062001b235762001b2362003422565b6020026020010181815250508c818151811062001b445762001b4462003422565b602002602001015182828151811062001b615762001b6162003422565b60200260200101906001600160a01b031690816001600160a01b031681525050806010600084848151811062001b9b5762001b9b62003422565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908360ff160217905550808062001be890620033ee565b915050620019ef565b50620f4240881062001c2f5760405162461bcd60e51b81526020600482015260066024820152653e206d61784160d01b604482015260640162000778565b6305f5e10087111562001c745760405162461bcd60e51b815260206004820152600c60248201526b3e206d61785377617046656560a01b604482015260640162000778565b6402540be40086111562001cbb5760405162461bcd60e51b815260206004820152600d60248201526c3e206d617841646d696e46656560981b604482015260640162000778565b898960405162001ccb906200274f565b62001cd89291906200305c565b604051809103906000f08015801562001cf5573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055826001600160401b0381111562001d315762001d3162003438565b60405190808252806020026020018201604052801562001d5b578160200160208202803683370190505b50805162001d72916007916020909101906200275d565b50815162001d889060069060208501906200275d565b50805162001d9e906004906020840190620027ad565b5062001dac6064896200337f565b600a5562001dbc6064896200337f565b600b5550505060088490556009839055600e80546001600160a01b0319166001600160a01b038416179055801562001e2e576003805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b60005461010090046001600160a01b0316331462001e6b5760405162461bcd60e51b815260040162000778906200308e565b600d54421062001eaf5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e54dd1bdc1c195960921b604482015260640162000778565b604051637461cf1b60e01b815260048082015260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__90637461cf1b9060240160206040518083038186803b15801562001efd57600080fd5b505af415801562001f12573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f38919062002d87565b600a819055600b81905542600c819055600d8190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc2019389162000ca591848252602082015260400190565b60005461010090046001600160a01b0316331462001fba5760405162461bcd60e51b815260040162000778906200308e565b6001600160a01b038116620020005760405162461bcd60e51b815260206004820152600b60248201526a7a65726f4164647265737360a81b604482015260640162000778565b600e80546001600160a01b0319166001600160a01b0383169081179091556040519081527fae5a12c29e496b092467a620746b9eaf4e0e231a631a4370c233b1fac38e8e269060200162000ca5565b606060046002018054806020026020016040519081016040528092919081815260200182805480156200169e576020028201919060005260206000209081548152602001906001019080831162001689575050505050905090565b60405163172a21f960e31b815260048082015260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__9063b9510fc890602401620006f0565b604051631bd62df560e11b815260048082015260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__906337ac5bea90602401620006f0565b6040516345b69ab760e01b815260009073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__906345b69ab790620016f690600490889088908890840162003109565b60405163f94eed8760e01b81526004808201526024810182905260609073__$7cc55797c499de4fb3bba1e07e89d0e3e2$__9063f94eed879060440160006040518083038186803b158015620021b757600080fd5b505af4158015620021cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000ad8919081019062002ba9565b600f546001600160a01b03163314806200221f575060005461010090046001600160a01b031633145b620022655760405162461bcd60e51b815260206004820152601560248201527410b332b2a1b7b73a3937b63632b927b927bbb732b960591b604482015260640162000778565b60005b600454811015620023d1576000600460000182815481106200228e576200228e62003422565b6000918252602082200154600780546001600160a01b0390921693509084908110620022be57620022be62003422565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b038416906370a082319060240160206040518083038186803b1580156200230a57600080fd5b505afa1580156200231f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002345919062002d87565b620023519190620033a1565b90508015620023b957600e5462002376906001600160a01b03848116911683620024b0565b604080516001600160a01b0384168152602081018390527fee3859efa95e525bc2bcb149b51b60a8bb4e89c647392d9d4112e03c3e73bdd6910160405180910390a15b50508080620023c890620033ee565b91505062002268565b50565b60005460ff161562000dad5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000778565b6200242662002509565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6200247a620023d4565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620024533390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526200250490849062002554565b505050565b60005460ff1662000dad5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640162000778565b6000620025ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200262d9092919063ffffffff16565b805190915015620025045780806020019051810190620025cc919062002d4d565b620025045760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000778565b60606200174a8484600085856001600160a01b0385163b620026925760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000778565b600080866001600160a01b03168587604051620026b0919062002fa0565b60006040518083038185875af1925050503d8060008114620026ef576040519150601f19603f3d011682016040523d82523d6000602084013e620026f4565b606091505b50915091506200270682828662002711565b979650505050505050565b60608315620027225750816200174d565b825115620027335782518084602001fd5b8160405162461bcd60e51b815260040162000778919062003047565b611095806200345e83390190565b8280548282559060005260206000209081019282156200279b579160200282015b828111156200279b5782518255916020019190600101906200277e565b50620027a992915062002805565b5090565b8280548282559060005260206000209081019282156200279b579160200282015b828111156200279b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620027ce565b5b80821115620027a9576000815560010162002806565b80356001600160a01b0381168114620012ef57600080fd5b600082601f8301126200284657600080fd5b813560206200285f620028598362003239565b62003206565b80838252828201915082860187848660051b89010111156200288057600080fd5b60005b85811015620028aa5762002897826200281c565b8452928401929084019060010162002883565b5090979650505050505050565b600082601f830112620028c957600080fd5b81356020620028dc620028598362003239565b80838252828201915082860187848660051b8901011115620028fd57600080fd5b60005b85811015620028aa5781358452928401929084019060010162002900565b600082601f8301126200293057600080fd5b8135602062002943620028598362003239565b80838252828201915082860187848660051b89010111156200296457600080fd5b60005b85811015620028aa576200297b8262002a04565b8452928401929084019060010162002967565b600082601f830112620029a057600080fd5b81356001600160401b03811115620029bc57620029bc62003438565b620029d1601f8201601f191660200162003206565b818152846020838601011115620029e757600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff81168114620012ef57600080fd5b60006020828403121562002a2957600080fd5b62000ad5826200281c565b600080600080600080600080610100898b03121562002a5257600080fd5b88356001600160401b038082111562002a6a57600080fd5b62002a788c838d0162002834565b995060208b013591508082111562002a8f57600080fd5b62002a9d8c838d016200291e565b985060408b013591508082111562002ab457600080fd5b62002ac28c838d016200298e565b975060608b013591508082111562002ad957600080fd5b5062002ae88b828c016200298e565b9550506080890135935060a0890135925060c0890135915062002b0e60e08a016200281c565b90509295985092959890939650565b60008060006040848603121562002b3357600080fd5b83356001600160401b038082111562002b4b57600080fd5b818601915086601f83011262002b6057600080fd5b81358181111562002b7057600080fd5b8760208260051b850101111562002b8657600080fd5b6020928301955093505084013562002b9e816200344e565b809150509250925092565b6000602080838503121562002bbd57600080fd5b82516001600160401b0381111562002bd457600080fd5b8301601f8101851362002be657600080fd5b805162002bf7620028598262003239565b80828252848201915084840188868560051b870101111562002c1857600080fd5b600094505b8385101562002c3d57805183526001949094019391850191850162002c1d565b50979650505050505050565b60008060008060006080868803121562002c6257600080fd5b85356001600160401b038082111562002c7a57600080fd5b62002c8889838a01620028b7565b965062002c98602089016200281c565b9550604088013591508082111562002caf57600080fd5b818801915088601f83011262002cc457600080fd5b81358181111562002cd457600080fd5b89602082850101111562002ce757600080fd5b96999598505060200195606001359392505050565b60008060006060848603121562002d1257600080fd5b83356001600160401b0381111562002d2957600080fd5b62002d3786828701620028b7565b9660208601359650604090950135949350505050565b60006020828403121562002d6057600080fd5b81516200174d816200344e565b60006020828403121562002d8057600080fd5b5035919050565b60006020828403121562002d9a57600080fd5b5051919050565b60008060006060848603121562002db757600080fd5b8335925060208401356001600160401b0381111562002dd557600080fd5b62002de386828701620028b7565b925050604084013590509250925092565b6000806040838503121562002e0857600080fd5b50508035926020909101359150565b6000806040838503121562002e2b57600080fd5b8235915062002e3d6020840162002a04565b90509250929050565b6000806000806080858703121562002e5d57600080fd5b8435935062002e6f6020860162002a04565b93969395505050506040820135916060013590565b60006020828403121562002e9757600080fd5b62000ad58262002a04565b60008060006060848603121562002eb857600080fd5b62002ec38462002a04565b925062002ed36020850162002a04565b9150604084013590509250925092565b600080600080600060a0868803121562002efc57600080fd5b62002f078662002a04565b945062002f176020870162002a04565b94979496505050506040830135926060810135926080909101359150565b600081518084526020808501945080840160005b8381101562002f675781518752958201959082019060010162002f49565b509495945050505050565b6000815180845262002f8c816020860160208601620033bb565b601f01601f19169290920160200192915050565b6000825162002fb4818460208701620033bb565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015620030015783516001600160a01b03168352928401929184019160010162002fda565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620030015783518352928401929184019160010162003029565b60208152600062000ad5602083018462002f72565b60408152600062003071604083018562002f72565b828103602084015262003085818562002f72565b95945050505050565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b6020808252600790820152661d1a5b595bdd5d60ca1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b848152606060208201819052810183905260006001600160fb1b038411156200313157600080fd5b8360051b808660808501376000908301608001908152921515604090920191909152509392505050565b85815260806020820152600062003176608083018762002f35565b6001600160a01b03861660408401528281036060840152838152838560208301376000602085830101526020601f19601f8601168201019150509695505050505050565b838152606060208201526000620031d5606083018562002f35565b9050826040830152949350505050565b83815282602082015260606040820152600062003085606083018462002f35565b604051601f8201601f191681016001600160401b038111828210171562003231576200323162003438565b604052919050565b60006001600160401b0382111562003255576200325562003438565b5060051b60200190565b600082198211156200327557620032756200340c565b500190565b600181815b80851115620032bb5781600019048211156200329f576200329f6200340c565b80851615620032ad57918102915b93841c93908002906200327f565b509250929050565b600062000ad58383600082620032dc5750600162000ad8565b81620032eb5750600062000ad8565b81600181146200330457600281146200330f576200332f565b600191505062000ad8565b60ff8411156200332357620033236200340c565b50506001821b62000ad8565b5060208310610133831016604e8410600b841016171562003354575081810a62000ad8565b6200336083836200327a565b80600019048211156200337757620033776200340c565b029392505050565b60008160001904831182151516156200339c576200339c6200340c565b500290565b600082821015620033b657620033b66200340c565b500390565b60005b83811015620033d8578181015183820152602001620033be565b83811115620033e8576000848401525b50505050565b60006000198214156200340557620034056200340c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114620023d157600080fdfe60806040523480156200001157600080fd5b506040516200109538038062001095833981016040819052620000349162000237565b818162000041336200008a565b815162000056906004906020850190620000da565b5080516200006c906005906020840190620000da565b5050600680546001600160a01b0319163317905550620002f4915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620000e890620002a1565b90600052602060002090601f0160209004810192826200010c576000855562000157565b82601f106200012757805160ff191683800117855562000157565b8280016001018555821562000157579182015b82811115620001575782518255916020019190600101906200013a565b506200016592915062000169565b5090565b5b808211156200016557600081556001016200016a565b600082601f8301126200019257600080fd5b81516001600160401b0380821115620001af57620001af620002de565b604051601f8301601f19908116603f01168101908282118183101715620001da57620001da620002de565b81604052838152602092508683858801011115620001f757600080fd5b600091505b838210156200021b5785820183015181830184015290820190620001fc565b838211156200022d5760008385830101525b9695505050505050565b600080604083850312156200024b57600080fd5b82516001600160401b03808211156200026357600080fd5b620002718683870162000180565b935060208501519150808211156200028857600080fd5b50620002978582860162000180565b9150509250929050565b600181811c90821680620002b657607f821691505b60208210811415620002d857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610d9180620003046000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a257806395d89b411161007157806395d89b411461024b578063a457c2d714610253578063a9059cbb14610266578063dd62ed3e14610279578063f2fde38b1461028c57600080fd5b8063715018a6146101f457806379cc6790146101fc5780638119c0651461020f5780638da5cb5b1461023a57600080fd5b8063313ce567116100e9578063313ce56714610181578063395093511461019057806340c10f19146101a357806342966c68146101b857806370a08231146101cb57600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c57806323b872dd1461016e575b600080fd5b61012361029f565b6040516101309190610c86565b60405180910390f35b61014c610147366004610c43565b610331565b6040519015158152602001610130565b6003545b604051908152602001610130565b61014c61017c366004610c07565b610349565b60405160128152602001610130565b61014c61019e366004610c43565b61036d565b6101b66101b1366004610c43565b61038f565b005b6101b66101c6366004610c6d565b6103eb565b6101606101d9366004610bb2565b6001600160a01b031660009081526001602052604090205490565b6101b66103f8565b6101b661020a366004610c43565b61040c565b600654610222906001600160a01b031681565b6040516001600160a01b039091168152602001610130565b6000546001600160a01b0316610222565b610123610421565b61014c610261366004610c43565b610430565b61014c610274366004610c43565b6104ab565b610160610287366004610bd4565b6104b9565b6101b661029a366004610bb2565b6104e4565b6060600480546102ae90610d0a565b80601f01602080910402602001604051908101604052809291908181526020018280546102da90610d0a565b80156103275780601f106102fc57610100808354040283529160200191610327565b820191906000526020600020905b81548152906001019060200180831161030a57829003601f168201915b5050505050905090565b60003361033f81858561055a565b5060019392505050565b60003361035785828561067f565b6103628585856106f9565b506001949350505050565b60003361033f81858561038083836104b9565b61038a9190610cdb565b61055a565b6103976108c7565b600081116103dd5760405162461bcd60e51b815260206004820152600e60248201526d1e995c9bd35a5b9d105b5bdd5b9d60921b60448201526064015b60405180910390fd5b6103e78282610921565b5050565b6103f53382610a00565b50565b6104006108c7565b61040a6000610b46565b565b61041782338361067f565b6103e78282610a00565b6060600580546102ae90610d0a565b6000338161043e82866104b9565b90508381101561049e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103d4565b610362828686840361055a565b60003361033f8185856106f9565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6104ec6108c7565b6001600160a01b0381166105515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d4565b6103f581610b46565b6001600160a01b0383166105bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d4565b6001600160a01b03821661061d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d4565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061068b84846104b9565b905060001981146106f357818110156106e65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103d4565b6106f3848484840361055a565b50505050565b6001600160a01b03831661075d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d4565b6001600160a01b0382166107bf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d4565b6001600160a01b038316600090815260016020526040902054818110156108375760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d4565b6001600160a01b0380851660009081526001602052604080822085850390559185168152908120805484929061086e908490610cdb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108ba91815260200190565b60405180910390a36106f3565b6000546001600160a01b0316331461040a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d4565b6001600160a01b0382166109775760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103d4565b80600360008282546109899190610cdb565b90915550506001600160a01b038216600090815260016020526040812080548392906109b6908490610cdb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610a605760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d4565b6001600160a01b03821660009081526001602052604090205481811015610ad45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d4565b6001600160a01b0383166000908152600160205260408120838303905560038054849290610b03908490610cf3565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610672565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610bad57600080fd5b919050565b600060208284031215610bc457600080fd5b610bcd82610b96565b9392505050565b60008060408385031215610be757600080fd5b610bf083610b96565b9150610bfe60208401610b96565b90509250929050565b600080600060608486031215610c1c57600080fd5b610c2584610b96565b9250610c3360208501610b96565b9150604084013590509250925092565b60008060408385031215610c5657600080fd5b610c5f83610b96565b946020939093013593505050565b600060208284031215610c7f57600080fd5b5035919050565b600060208083528351808285015260005b81811015610cb357858101830151858201604001528201610c97565b81811115610cc5576000604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610cee57610cee610d45565b500190565b600082821015610d0557610d05610d45565b500390565b600181811c90821680610d1e57607f821691505b60208210811415610d3f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220736faaf4ad5c50e4f16832a2a0eb0f938136d3f29b77e40d5311fe21b50aa43d64736f6c63430008070033a264697066735822122078cd2fdd8bd9836ce46551b7fcb0fc9aaeaf028fb4bcebd43592ce37c2490bff64736f6c63430008070033",
  "libraries": {
    "StableSwapStorage": "0xca81CAdf309B4fd90CA13Fba676bdB9e69685dA6"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "rampA(uint256,uint256)": {
        "params": {
          "futureA": "the new A to ramp towards",
          "futureATime": "timestamp when the new A should be reached"
        }
      },
      "setFee(uint256,uint256)": {
        "details": "adminFee cannot be higher than 100% of the swap fee swap fee cannot be higher than 1% of each swap",
        "params": {
          "newAdminFee": "new admin fee to be applied on future transactions",
          "newSwapFee": "new swap fee to be applied on future transactions"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddLiquidity(address,uint256[],uint256[],uint256,uint256)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "MIN_RAMP_TIME()": {
        "notice": "constants"
      },
      "addLiquidity(uint256[],uint256,uint256)": {
        "notice": "PUBLIC FUNCTIONS"
      },
      "getVirtualPrice()": {
        "notice": "VIEW FUNCTIONS"
      },
      "rampA(uint256,uint256)": {
        "notice": "Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range."
      },
      "setFee(uint256,uint256)": {
        "notice": "Sets the admin fee"
      },
      "swapStorage()": {
        "notice": "STATE VARS"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 449,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7604,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "admin",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7606,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "adminCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 550,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 287,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 290,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "_initializing",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 25014,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "swapStorage",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(SwapStorage)26192_storage"
      },
      {
        "astId": 25016,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "feeDistributor",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 25018,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "feeController",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 25022,
        "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
        "label": "tokenIndexes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)1243)dyn_storage": {
        "base": "t_contract(IERC20)1243",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1243": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LPToken)20202": {
        "encoding": "inplace",
        "label": "contract LPToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(SwapStorage)26192_storage": {
        "encoding": "inplace",
        "label": "struct StableSwapStorage.SwapStorage",
        "members": [
          {
            "astId": 26170,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "pooledTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)1243)dyn_storage"
          },
          {
            "astId": 26173,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "lpToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(LPToken)20202"
          },
          {
            "astId": 26176,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "tokenMultipliers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 26179,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "balances",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 26181,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "fee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 26183,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "adminFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 26185,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "initialA",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 26187,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "futureA",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 26189,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "initialATime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 26191,
            "contract": "contracts/stableswap/StableSwap.sol:StableSwap",
            "label": "futureATime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}