{
  "address": "0x59EBBbC1ab1d13a21e5fd84028f04a21e566B63E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vxzlk",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zlk",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wnative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BridgeTokenInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "FeeExceedsMaximum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotEOA",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "feeTokenIndex",
          "type": "uint8"
        }
      ],
      "name": "TokenIndexInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "Candidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "FeeDistributorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "LogBridgeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountZLK",
          "type": "uint256"
        }
      ],
      "name": "LogConvertPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountZLK",
          "type": "uint256"
        }
      ],
      "name": "LogConvertStableSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "feeTokenIndex",
          "type": "uint8"
        }
      ],
      "name": "LogStableSwapFeeTokenIndexSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminCandidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "bridgeFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidateConfirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "convertPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens1",
          "type": "address[]"
        }
      ],
      "name": "convertPairMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "convertStableSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "convertStableSwapMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "feeTokenIndexFor",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "feeTokenIndex",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "setAdminCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "setFeeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "feeTokenIndex",
          "type": "uint8"
        }
      ],
      "name": "setFeeTokenIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vxzlk",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f2acd0a693e2b30bc2132ce2515af5fe2ed5ac3cb6cedca2074a8f07ef9e8f5",
  "receipt": {
    "to": null,
    "from": "0x0597EB296eFbb84CA64C843a7F80d7F8Bff7d17d",
    "contractAddress": "0x59EBBbC1ab1d13a21e5fd84028f04a21e566B63E",
    "transactionIndex": 0,
    "gasUsed": "1960161",
    "logsBloom": "0x
    "blockHash": "0xd09ef840d97707bfbff06ced3eb6c2a53348060c45b3e69b73cb99ad0e4fc4d5",
    "transactionHash": "0x4f2acd0a693e2b30bc2132ce2515af5fe2ed5ac3cb6cedca2074a8f07ef9e8f5",
    "logs": [],
    "blockNumber": 2782586,
    "cumulativeGasUsed": "1960161",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6ED3E6551Bb396091C15a9621aACa6DdB1C01992",
    "0xb38188fEDff30bEc23aEf5C691AB647756771fF1",
    "0xB5989e3Eb10bBe04b962586910C0bBC1238baD78",
    "0x674421E9567653EE76e96fEEA3B2B2966d000Dbd",
    "0x7D3C7Ab81bD677EE1cfd58505Cb8BcbF8856B634"
  ],
  "numDeployments": 1,
  "solcInputHash": "007aa94c81b3bc67ae48537a63ee475f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vxzlk\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zlk\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wnative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BridgeTokenInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"FeeExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeTokenIndex\",\"type\":\"uint8\"}],\"name\":\"TokenIndexInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"Candidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"FeeDistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"LogBridgeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountZLK\",\"type\":\"uint256\"}],\"name\":\"LogConvertPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountZLK\",\"type\":\"uint256\"}],\"name\":\"LogConvertStableSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"feeTokenIndex\",\"type\":\"uint8\"}],\"name\":\"LogStableSwapFeeTokenIndexSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"bridgeFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"convertPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens1\",\"type\":\"address[]\"}],\"name\":\"convertPairMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"convertStableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"convertStableSwapMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"feeTokenIndexFor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"feeTokenIndex\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setAdminCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feeTokenIndex\",\"type\":\"uint8\"}],\"name\":\"setFeeTokenIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vxzlk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tools/ZenlinkMaker.sol\":\"ZenlinkMaker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n    event PairCreateLocked(\\n        address indexed caller\\n    );\\n    event PairCreateUnlocked(\\n        address indexed caller\\n    );\\n    event BootstrapSetted(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address indexed bootstrap\\n    );\\n    event FeetoUpdated(\\n        address indexed feeto\\n    );\\n    event FeeBasePointUpdated(\\n        uint8 basePoint\\n    );\\n\\n    function feeto() external view returns (address);\\n\\n    function feeBasePoint() external view returns (uint8);\\n\\n    function lockForPairCreate() external view returns (bool);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n    \\n    function getBootstrap(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address bootstrap);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0x211140634ad85da83e50e8623d7fd7aeff89fb1fd472e2a8bec7927c416b3bf9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPair {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x384acf5ee76958b02b75d074934d79e0e6d0b5fcdb8a5f63752996cb4de7bffa\",\"license\":\"MIT\"},\"contracts/libraries/AdminUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract AdminUpgradeable {\\n    address public admin;\\n    address public adminCandidate;\\n\\n    function _initializeAdmin(address _admin) internal {\\n        require(admin == address(0), \\\"admin already set\\\");\\n\\n        admin = _admin;\\n    }\\n\\n    function candidateConfirm() external {\\n        require(msg.sender == adminCandidate, \\\"not Candidate\\\");\\n        emit AdminChanged(admin, adminCandidate);\\n\\n        admin = adminCandidate;\\n        adminCandidate = address(0);\\n    }\\n\\n    function setAdminCandidate(address _candidate) external onlyAdmin {\\n        adminCandidate = _candidate;\\n        emit Candidate(_candidate);\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    event Candidate(address indexed newAdmin);\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n}\",\"keccak256\":\"0x1f6a33fd54009078e00c3b586e2b9bb359ff99d9c5cb87e3e32ec109480f99ae\",\"license\":\"MIT\"},\"contracts/stableswap/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x86c437195727727a42b37c6bfd9a233cec2c5b5a3730fa77542e549e2c1104e2\",\"license\":\"MIT\"},\"contracts/stableswap/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../LPToken.sol\\\";\\n\\ninterface IStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event FlashLoan(\\n        address indexed caller,\\n        address indexed receiver,\\n        uint256[] amounts_out\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 soldId,\\n        uint256 tokensSold,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            LPToken,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        uint256[] memory amountsOut,\\n        address to,\\n        bytes calldata data,\\n        uint256 deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdrawAdminFee() external;\\n}\\n\",\"keccak256\":\"0xa6fbab4b724f9264e156cc78ef4fb5998932462485f0592855b95d9939e94a73\",\"license\":\"MIT\"},\"contracts/tools/ZenlinkMaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AdminUpgradeable} from \\\"../libraries/AdminUpgradeable.sol\\\";\\nimport {IFactory} from \\\"../core/interfaces/IFactory.sol\\\";\\nimport {IPair} from \\\"../core/interfaces/IPair.sol\\\";\\nimport {IStableSwap} from \\\"../stableswap/interfaces/IStableSwap.sol\\\";\\n\\ncontract ZenlinkMaker is AdminUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    IFactory public immutable factory;\\n    address public immutable vxzlk;\\n    address private immutable zlk;\\n    address private immutable wnative;\\n\\n    uint256 public constant PRECISION = 10**3;\\n    address public feeDistributor;\\n    uint256 public fee;\\n\\n    mapping(address => address) internal _bridges;\\n    mapping(address => uint8) internal _stableSwapFeeTokenIndex;\\n\\n    event LogBridgeSet(address indexed token, address indexed bridge);\\n    event LogStableSwapFeeTokenIndexSet(address indexed pool, uint8 indexed feeTokenIndex);\\n    event FeeDistributorChanged(address newController);\\n    event FeeChanged(uint256 newFee);\\n    event LogConvertPair(\\n        address indexed sender, \\n        address indexed token0, \\n        address indexed token1, \\n        uint256 amount0, \\n        uint256 amount1, \\n        uint256 amountZLK\\n    );\\n    event LogConvertStableSwap(\\n        address indexed sender, \\n        address indexed pool,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 amountZLK\\n    );\\n\\n    error NotEOA(address account);\\n    error BridgeTokenInvalid(address token);\\n    error TokenIndexInvalid(uint8 feeTokenIndex);\\n    error ZeroAddress();\\n    error FeeExceedsMaximum(uint256 newFee, uint256 max);\\n    error ArrayMismatch();\\n\\n    constructor(\\n        IFactory _factory,\\n        address _vxzlk,\\n        address _zlk,\\n        address _wnative,\\n        address _feeDistributor\\n    ) {\\n        factory = _factory;\\n        vxzlk = _vxzlk;\\n        zlk = _zlk;\\n        wnative = _wnative;\\n        feeDistributor = _feeDistributor;\\n        _initializeAdmin(msg.sender);\\n    }\\n\\n    modifier onlyEOA() {\\n        if (msg.sender != tx.origin) revert NotEOA(msg.sender);\\n        _;\\n    } \\n\\n    function bridgeFor(address token) public view returns (address bridge) {\\n        bridge = _bridges[token];\\n        if (bridge == address(0)) {\\n            bridge = wnative;\\n        }\\n    }\\n\\n    function feeTokenIndexFor(address pool) public view returns (uint8 feeTokenIndex) {\\n        feeTokenIndex = _stableSwapFeeTokenIndex[pool];\\n    }\\n\\n    function setBridge(address token, address bridge) external onlyAdmin {\\n        if (token == zlk || token == wnative || token == bridge) \\n            revert BridgeTokenInvalid(token);\\n\\n        _bridges[token] = bridge;\\n        emit LogBridgeSet(token, bridge);\\n    }\\n\\n    function setFeeTokenIndex(address pool, uint8 feeTokenIndex) external onlyAdmin {\\n        if (feeTokenIndex >= IStableSwap(pool).getNumberOfTokens())\\n            revert TokenIndexInvalid(feeTokenIndex);\\n\\n        _stableSwapFeeTokenIndex[pool] = feeTokenIndex;\\n        emit LogStableSwapFeeTokenIndexSet(pool, feeTokenIndex);\\n    }\\n\\n    function setFeeDistributor(address _feeDistributor) external onlyAdmin {\\n        if (_feeDistributor == address(0)) revert ZeroAddress();\\n        feeDistributor = _feeDistributor;\\n        emit FeeDistributorChanged(_feeDistributor);\\n    }\\n\\n    function setFee(uint256 newFee) external onlyAdmin {\\n        if (newFee > PRECISION) revert FeeExceedsMaximum(newFee, PRECISION);\\n        fee = newFee;\\n        emit FeeChanged(newFee);\\n    }\\n\\n    function convertPair(address token0, address token1) external onlyEOA() {\\n        _convertPair(token0, token1);\\n    }\\n\\n    function convertStableSwap(IStableSwap pool) external onlyEOA() {\\n        _convertStableSwap(pool);\\n    }\\n\\n    function convertPairMultiple(\\n        address[] calldata tokens0, \\n        address[] calldata tokens1\\n    ) external onlyEOA() {\\n        uint256 len = tokens0.length;\\n        if (len != tokens1.length) revert ArrayMismatch();\\n        for (uint256 i = 0; i < len; i++) {\\n            _convertPair(tokens0[i], tokens1[i]);\\n        }\\n    }\\n\\n    function convertStableSwapMultiple(IStableSwap[] calldata pools) external onlyEOA() {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            _convertStableSwap(pools[i]);\\n        }\\n    }\\n\\n    function _convertPair(address token0, address token1) internal {\\n        IPair pair = IPair(factory.getPair(token0, token1));\\n        if (address(pair) == address(0)) revert ZeroAddress();\\n\\n        uint256 amount = IERC20(address(pair)).balanceOf(address(this));\\n        IERC20(address(pair)).safeTransfer(address(pair), amount);\\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\\n        if (token0 != pair.token0()) {\\n            (amount0, amount1) = (amount1, amount0);\\n        }\\n        uint256 amount0Fee = (amount0 * fee) / PRECISION;\\n        uint256 amount1Fee = (amount1 * fee) / PRECISION;\\n        if (amount0Fee > 0) {\\n            IERC20(token0).safeTransfer(feeDistributor, amount0Fee);\\n        }\\n        if (amount1Fee > 0) {\\n            IERC20(token1).safeTransfer(feeDistributor, amount1Fee);\\n        }\\n        emit LogConvertPair(\\n            msg.sender, \\n            token0, \\n            token1, \\n            amount0 - amount0Fee, \\n            amount1 - amount1Fee, \\n            _convertStep(token0, token1, amount0 - amount0Fee, amount1 - amount1Fee)\\n        );\\n    }\\n\\n    function _convertStableSwap(IStableSwap pool) internal {\\n        pool.withdrawAdminFee();\\n        IERC20[] memory tokens = pool.getTokens();\\n        uint8 feeTokenIndex = _stableSwapFeeTokenIndex[address(pool)];\\n        IERC20 feeToken = pool.getToken(feeTokenIndex);\\n\\n        for (uint8 i = 0; i < tokens.length; i++) {\\n            if (i == feeTokenIndex) continue;\\n\\n            uint256 balance = tokens[i].balanceOf(address(this));\\n            tokens[i].safeIncreaseAllowance(address(pool), balance);\\n            pool.swap(i, feeTokenIndex, balance, 0, block.timestamp);\\n        }\\n\\n        uint256 amount = feeToken.balanceOf(address(this));\\n        uint256 feeAmount = (amount * fee) / PRECISION;\\n        if (feeAmount > 0) {\\n            feeToken.safeTransfer(feeDistributor, feeAmount);\\n        }\\n\\n        emit LogConvertStableSwap(\\n            msg.sender,\\n            address(pool),\\n            address(feeToken),\\n            amount - feeAmount,\\n            _convertStep(address(feeToken), address(feeToken), amount - feeAmount, 0)\\n        );\\n    }\\n\\n    function _convertStep(\\n        address token0,\\n        address token1,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal returns(uint256 zlkOut) {\\n        if (token0 == token1) {\\n            uint256 amount = amount0 + amount1;\\n            \\n            if (token0 == zlk) {\\n                IERC20(zlk).safeTransfer(vxzlk, amount);\\n                zlkOut = amount;\\n            } else if (token0 == wnative) {\\n                zlkOut = _toZLK(wnative, amount);\\n            } else {\\n                address bridge = bridgeFor(token0);\\n                amount = _swap(token0, bridge, amount, address(this));\\n                zlkOut = _convertStep(bridge, bridge, amount, 0);\\n            }\\n        } else if (token0 == zlk) {\\n            IERC20(zlk).safeTransfer(vxzlk, amount0);\\n            zlkOut = _toZLK(token1, amount1) + amount0;\\n        } else if (token1 == zlk) {\\n            IERC20(zlk).safeTransfer(vxzlk, amount1);\\n            zlkOut = _toZLK(token0, amount0) + amount1;\\n        } else if (token0 == wnative) {\\n            zlkOut = _toZLK(wnative, _swap(token1, wnative, amount1, address(this)) + amount0);\\n        } else if (token1 == wnative) {\\n            zlkOut = _toZLK(wnative, _swap(token0, wnative, amount0, address(this)) + amount1);\\n        } else {\\n            address bridge0 = bridgeFor(token0);\\n            address bridge1 = bridgeFor(token1);\\n\\n            if (bridge0 == token1) {\\n                zlkOut = _convertStep(\\n                    bridge0,\\n                    token1,\\n                    _swap(token0, bridge0, amount0, address(this)),\\n                    amount1\\n                );\\n            } else if (bridge1 == token0) {\\n                zlkOut = _convertStep(\\n                    token0,\\n                    bridge1,\\n                    amount0,\\n                    _swap(token1, bridge1, amount1, address(this))\\n                );\\n            } else {\\n                zlkOut = _convertStep(\\n                    bridge0,\\n                    bridge1,\\n                    _swap(token0, bridge0, amount0, address(this)),\\n                    _swap(token1, bridge1, amount1, address(this))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _swap(\\n        address fromToken, \\n        address toToken, \\n        uint256 amountIn, \\n        address to\\n    ) internal returns(uint256 amountOut) {\\n        IPair pair = IPair(factory.getPair(fromToken, toToken));\\n        if (address(pair) == address(0)) revert ZeroAddress();\\n\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        uint256 amountInWithFee = amountIn * 997;\\n\\n        if (fromToken == pair.token0()) {\\n            amountOut = (amountInWithFee * reserve1) / (reserve0 * 1000 + amountInWithFee);\\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n            pair.swap(0, amountOut, to, new bytes(0));\\n        } else {\\n            amountOut = (amountInWithFee * reserve0) / (reserve1 * 1000 + amountInWithFee);\\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n            pair.swap(amountOut, 0, to, new bytes(0));\\n        }\\n    }\\n\\n    function _toZLK(address token, uint256 amountIn) internal returns(uint256 amountOut) {\\n        amountOut = _swap(token, zlk, amountIn, vxzlk);\\n    }\\n}\\n\",\"keccak256\":\"0x5507d5dbf497377709e16ad7a73d140b3839cc834adda03bdd533873c6ca03e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200242438038062002424833981016040819052620000359162000106565b6001600160601b0319606086811b821660805285811b821660a05284811b821660c05283901b1660e052600280546001600160a01b0383166001600160a01b0319909116179055620000873362000092565b50505050506200019f565b6000546001600160a01b031615620000e45760405162461bcd60e51b815260206004820152601160248201527018591b5a5b88185b1c9958591e481cd95d607a1b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080600060a086880312156200011f57600080fd5b85516200012c8162000186565b60208701519095506200013f8162000186565b6040870151909450620001528162000186565b6060870151909350620001658162000186565b6080870151909250620001788162000186565b809150509295509295909350565b6001600160a01b03811681146200019c57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6121a56200027f60003960008181610671015281816107640152818161123401528181611271015281816114140152818161145101528181611477015281816114ae015281816114eb01526115110152600081816106360152818161119e015281816111e3015281816112d1015281816113160152818161137b015281816113c001526117810152600081816101fd0152818161120501528181611338015281816113e201526117a301526000818161024e0152818161099901526117fa01526121a56000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a761a939116100ad578063ccfc2e8d11610071578063ccfc2e8d14610270578063ddca3f4314610283578063e52ecc061461028c578063e61c93611461029f578063f851a440146102dd57600080fd5b8063a761a939146101e5578063aa6c2f4d146101f8578063aaf5eb681461021f578063bc393a0f14610236578063c45a01551461024957600080fd5b80633f023230116100f45780633f02323014610191578063403b8c221461019957806369fe0e2d146101ac57806396de7aa0146101bf5780639d22ae8c146101d257600080fd5b80630d43e8ad1461012657806318b316a1146101565780631f9915b81461016b5780633accfa6c1461017e575b600080fd5b600254610139906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610169610164366004611d4a565b6102f0565b005b610169610179366004611e82565b6103b3565b600154610139906001600160a01b031681565b610169610426565b6101696101a7366004611ca3565b6104d4565b6101696101ba366004611f36565b610502565b6101696101cd366004611ca3565b610596565b6101696101e0366004611cdd565b61060a565b6101396101f3366004611ca3565b610741565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6102286103e881565b60405190815260200161014d565b610169610244366004611cdd565b610789565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b61016961027e366004611ca3565b6107b9565b61022860035481565b61016961029a366004611d16565b610858565b6102cb6102ad366004611ca3565b6001600160a01b031660009081526005602052604090205460ff1690565b60405160ff909116815260200161014d565b600054610139906001600160a01b031681565b333214610317576040516377817ac360e01b81523360048201526024015b60405180910390fd5b828181146103385760405163b7c1140d60e01b815260040160405180910390fd5b60005b818110156103ab576103998686838181106103585761035861212e565b905060200201602081019061036d9190611ca3565b85858481811061037f5761037f61212e565b90506020020160208101906103949190611ca3565b61096f565b806103a3816120dd565b91505061033b565b505050505050565b3332146103d5576040516377817ac360e01b815233600482015260240161030e565b60005b818110156104215761040f8383838181106103f5576103f561212e565b905060200201602081019061040a9190611ca3565b610ce2565b80610419816120dd565b9150506103d8565b505050565b6001546001600160a01b031633146104705760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b604482015260640161030e565b600154600080546040516001600160a01b0393841693909116917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b3332146104f6576040516377817ac360e01b815233600482015260240161030e565b6104ff81610ce2565b50565b6000546001600160a01b0316331461052c5760405162461bcd60e51b815260040161030e9061201e565b6103e881111561055a5760405163037664ab60e21b8152600481018290526103e8602482015260440161030e565b60038190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c3906020015b60405180910390a150565b6000546001600160a01b031633146105c05760405162461bcd60e51b815260040161030e9061201e565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b6000546001600160a01b031633146106345760405162461bcd60e51b815260040161030e9061201e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806106a557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b806106c15750806001600160a01b0316826001600160a01b0316145b156106ea57604051637f67aed960e01b81526001600160a01b038316600482015260240161030e565b6001600160a01b0382811660008181526004602052604080822080546001600160a01b0319169486169485179055517f2e103aa707acc565f9a1547341914802b2bfe977fd79c595209f248ae4b006139190a35050565b6001600160a01b03808216600090815260046020526040902054168061078457507f00000000000000000000000000000000000000000000000000000000000000005b919050565b3332146107ab576040516377817ac360e01b815233600482015260240161030e565b6107b5828261096f565b5050565b6000546001600160a01b031633146107e35760405162461bcd60e51b815260040161030e9061201e565b6001600160a01b03811661080a5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fae5a12c29e496b092467a620746b9eaf4e0e231a631a4370c233b1fac38e8e269060200161058b565b6000546001600160a01b031633146108825760405162461bcd60e51b815260040161030e9061201e565b816001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190611f4f565b8160ff161061091a57604051635661022160e01b815260ff8216600482015260240161030e565b6001600160a01b038216600081815260056020526040808220805460ff191660ff861690811790915590519092917f09af193ef099b5f06d605e833e3ad8974749fe5d573bed1ed2619318c34c827a91a35050565b60405163e6a4390560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a439059060440160206040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190611cc0565b90506001600160a01b038116610a3e5760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015610a8057600080fd5b505afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190611f4f565b9050610ace6001600160a01b038316838361110f565b60405163226bf2d160e21b815230600482015260009081906001600160a01b038516906389afcb44906024016040805180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190611f68565b91509150836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8857600080fd5b505afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc09190611cc0565b6001600160a01b0316866001600160a01b031614610bda57905b60006103e860035484610bed919061207b565b610bf79190612059565b905060006103e860035484610c0c919061207b565b610c169190612059565b90508115610c3857600254610c38906001600160a01b038a811691168461110f565b8015610c5857600254610c58906001600160a01b0389811691168361110f565b6001600160a01b03808816908916337fb34d302380fcc86b721164311b357459321ee916186c2cc83e8555705490051e610c92868961209a565b610c9c868961209a565b610cba8e8e610cab8b8e61209a565b610cb58b8e61209a565b611172565b6040805193845260208401929092529082015260600160405180910390a45050505050505050565b806001600160a01b031663fe49abe36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d1d57600080fd5b505af1158015610d31573d6000803e3d6000fd5b505050506000816001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610d7057600080fd5b505afa158015610d84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dac9190810190611db6565b6001600160a01b03831660008181526005602052604080822054905162415c3360e91b815260ff909116600482018190529394509091906382b866009060240160206040518083038186803b158015610e0457600080fd5b505afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190611cc0565b905060005b83518160ff161015610fe3578260ff168160ff161415610e6057610fd1565b6000848260ff1681518110610e7757610e7761212e565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610ec257600080fd5b505afa158015610ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efa9190611f4f565b9050610f368682878560ff1681518110610f1657610f1661212e565b60200260200101516001600160a01b03166115e09092919063ffffffff16565b6040516348b4aac360e11b815260ff80841660048301528516602482015260448101829052600060648201524260848201526001600160a01b0387169063916955869060a401602060405180830381600087803b158015610f9657600080fd5b505af1158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce9190611f4f565b50505b80610fdb816120f8565b915050610e41565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561102657600080fd5b505afa15801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e9190611f4f565b905060006103e860035483611073919061207b565b61107d9190612059565b9050801561109f5760025461109f906001600160a01b0385811691168361110f565b6001600160a01b03808416908716337fe6edf68edaa0d0a22a68502fa4a7a79d12fb1b945e7abedd89402053d7ea69736110d9858761209a565b6110ef88806110e8898b61209a565b6000611172565b6040805192835260208301919091520160405180910390a4505050505050565b6040516001600160a01b03831660248201526044810182905261042190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116a7565b6000836001600160a01b0316856001600160a01b031614156112cf57600061119a8385612041565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031614156112325761122a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361110f565b8091506112c9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b0316141561129d576112967f000000000000000000000000000000000000000000000000000000000000000082611779565b91506112c9565b60006112a887610741565b90506112b6878284306117ce565b91506112c58182846000611172565b9250505b506115d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614156113795761135d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008561110f565b826113688584611779565b6113729190612041565b90506115d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415611412576114076001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008461110f565b816113688685611779565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614156114ac576113727f00000000000000000000000000000000000000000000000000000000000000008461149d877f000000000000000000000000000000000000000000000000000000000000000087306117ce565b6114a79190612041565b611779565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415611537576113727f00000000000000000000000000000000000000000000000000000000000000008361149d887f000000000000000000000000000000000000000000000000000000000000000088306117ce565b600061154286610741565b9050600061154f86610741565b9050856001600160a01b0316826001600160a01b0316141561158957611582828761157c8a868a306117ce565b87611172565b92506115d5565b866001600160a01b0316816001600160a01b031614156115b557611582878287610cb58a868a306117ce565b6115d282826115c68a868a306117ce565b610cb58a868a306117ce565b92505b50505b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116649190611f4f565b61166e9190612041565b6040516001600160a01b0385166024820152604481018290529091506116a190859063095ea7b360e01b9060640161113b565b50505050565b60006116fc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b319092919063ffffffff16565b805190915015610421578080602001905181019061171a9190611ec4565b6104215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161030e565b60006117c7837f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006117ce565b9392505050565b60405163e6a4390560e01b81526001600160a01b038581166004830152848116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e6a439059060440160206040518083038186803b15801561183c57600080fd5b505afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190611cc0565b90506001600160a01b03811661189d5760405163d92e233d60e01b815260040160405180910390fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156118d957600080fd5b505afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119119190611ee6565b506001600160701b0391821693501690506000611930876103e561207b565b9050836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a39190611cc0565b6001600160a01b0316896001600160a01b03161415611a7357806119c9846103e861207b565b6119d39190612041565b6119dd838361207b565b6119e79190612059565b94506119fd6001600160a01b038a16858961110f565b604080516000808252602082019283905263022c0d9f60e01b9092526001600160a01b0386169163022c0d9f91611a3c919089908b9060248101611fd4565b600060405180830381600087803b158015611a5657600080fd5b505af1158015611a6a573d6000803e3d6000fd5b50505050611b25565b80611a80836103e861207b565b611a8a9190612041565b611a94848361207b565b611a9e9190612059565b9450611ab46001600160a01b038a16858961110f565b604080516000808252602082019283905263022c0d9f60e01b9092526001600160a01b0386169163022c0d9f91611af29189918b9060248101611fd4565b600060405180830381600087803b158015611b0c57600080fd5b505af1158015611b20573d6000803e3d6000fd5b505050505b50505050949350505050565b60606115d88484600085856001600160a01b0385163b611b935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030e565b600080866001600160a01b03168587604051611baf9190611fb8565b60006040518083038185875af1925050503d8060008114611bec576040519150601f19603f3d011682016040523d82523d6000602084013e611bf1565b606091505b50915091506115d282828660608315611c0b5750816117c7565b825115611c1b5782518084602001fd5b8160405162461bcd60e51b815260040161030e919061200b565b60008083601f840112611c4757600080fd5b50813567ffffffffffffffff811115611c5f57600080fd5b6020830191508360208260051b8501011115611c7a57600080fd5b9250929050565b80516107848161215a565b80516001600160701b038116811461078457600080fd5b600060208284031215611cb557600080fd5b81356117c78161215a565b600060208284031215611cd257600080fd5b81516117c78161215a565b60008060408385031215611cf057600080fd5b8235611cfb8161215a565b91506020830135611d0b8161215a565b809150509250929050565b60008060408385031215611d2957600080fd5b8235611d348161215a565b9150602083013560ff81168114611d0b57600080fd5b60008060008060408587031215611d6057600080fd5b843567ffffffffffffffff80821115611d7857600080fd5b611d8488838901611c35565b90965094506020870135915080821115611d9d57600080fd5b50611daa87828801611c35565b95989497509550505050565b60006020808385031215611dc957600080fd5b825167ffffffffffffffff80821115611de157600080fd5b818501915085601f830112611df557600080fd5b815181811115611e0757611e07612144565b8060051b604051601f19603f83011681018181108582111715611e2c57611e2c612144565b604052828152858101935084860182860187018a1015611e4b57600080fd5b600095505b83861015611e7557611e6181611c81565b855260019590950194938601938601611e50565b5098975050505050505050565b60008060208385031215611e9557600080fd5b823567ffffffffffffffff811115611eac57600080fd5b611eb885828601611c35565b90969095509350505050565b600060208284031215611ed657600080fd5b815180151581146117c757600080fd5b600080600060608486031215611efb57600080fd5b611f0484611c8c565b9250611f1260208501611c8c565b9150604084015163ffffffff81168114611f2b57600080fd5b809150509250925092565b600060208284031215611f4857600080fd5b5035919050565b600060208284031215611f6157600080fd5b5051919050565b60008060408385031215611f7b57600080fd5b505080516020909101519092909150565b60008151808452611fa48160208601602086016120b1565b601f01601f19169290920160200192915050565b60008251611fca8184602087016120b1565b9190910192915050565b84815283602082015260018060a01b03831660408201526080606082015260006120016080830184611f8c565b9695505050505050565b6020815260006117c76020830184611f8c565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b6000821982111561205457612054612118565b500190565b60008261207657634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561209557612095612118565b500290565b6000828210156120ac576120ac612118565b500390565b60005b838110156120cc5781810151838201526020016120b4565b838111156116a15750506000910152565b60006000198214156120f1576120f1612118565b5060010190565b600060ff821660ff81141561210f5761210f612118565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104ff57600080fdfea2646970667358221220db8bca2ed0e6a51da6146f08e069cb36648c10d66d1c1b5316a73bff8756eb3f64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063a761a939116100ad578063ccfc2e8d11610071578063ccfc2e8d14610270578063ddca3f4314610283578063e52ecc061461028c578063e61c93611461029f578063f851a440146102dd57600080fd5b8063a761a939146101e5578063aa6c2f4d146101f8578063aaf5eb681461021f578063bc393a0f14610236578063c45a01551461024957600080fd5b80633f023230116100f45780633f02323014610191578063403b8c221461019957806369fe0e2d146101ac57806396de7aa0146101bf5780639d22ae8c146101d257600080fd5b80630d43e8ad1461012657806318b316a1146101565780631f9915b81461016b5780633accfa6c1461017e575b600080fd5b600254610139906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610169610164366004611d4a565b6102f0565b005b610169610179366004611e82565b6103b3565b600154610139906001600160a01b031681565b610169610426565b6101696101a7366004611ca3565b6104d4565b6101696101ba366004611f36565b610502565b6101696101cd366004611ca3565b610596565b6101696101e0366004611cdd565b61060a565b6101396101f3366004611ca3565b610741565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6102286103e881565b60405190815260200161014d565b610169610244366004611cdd565b610789565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b61016961027e366004611ca3565b6107b9565b61022860035481565b61016961029a366004611d16565b610858565b6102cb6102ad366004611ca3565b6001600160a01b031660009081526005602052604090205460ff1690565b60405160ff909116815260200161014d565b600054610139906001600160a01b031681565b333214610317576040516377817ac360e01b81523360048201526024015b60405180910390fd5b828181146103385760405163b7c1140d60e01b815260040160405180910390fd5b60005b818110156103ab576103998686838181106103585761035861212e565b905060200201602081019061036d9190611ca3565b85858481811061037f5761037f61212e565b90506020020160208101906103949190611ca3565b61096f565b806103a3816120dd565b91505061033b565b505050505050565b3332146103d5576040516377817ac360e01b815233600482015260240161030e565b60005b818110156104215761040f8383838181106103f5576103f561212e565b905060200201602081019061040a9190611ca3565b610ce2565b80610419816120dd565b9150506103d8565b505050565b6001546001600160a01b031633146104705760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b604482015260640161030e565b600154600080546040516001600160a01b0393841693909116917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b3332146104f6576040516377817ac360e01b815233600482015260240161030e565b6104ff81610ce2565b50565b6000546001600160a01b0316331461052c5760405162461bcd60e51b815260040161030e9061201e565b6103e881111561055a5760405163037664ab60e21b8152600481018290526103e8602482015260440161030e565b60038190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c3906020015b60405180910390a150565b6000546001600160a01b031633146105c05760405162461bcd60e51b815260040161030e9061201e565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b6000546001600160a01b031633146106345760405162461bcd60e51b815260040161030e9061201e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806106a557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b806106c15750806001600160a01b0316826001600160a01b0316145b156106ea57604051637f67aed960e01b81526001600160a01b038316600482015260240161030e565b6001600160a01b0382811660008181526004602052604080822080546001600160a01b0319169486169485179055517f2e103aa707acc565f9a1547341914802b2bfe977fd79c595209f248ae4b006139190a35050565b6001600160a01b03808216600090815260046020526040902054168061078457507f00000000000000000000000000000000000000000000000000000000000000005b919050565b3332146107ab576040516377817ac360e01b815233600482015260240161030e565b6107b5828261096f565b5050565b6000546001600160a01b031633146107e35760405162461bcd60e51b815260040161030e9061201e565b6001600160a01b03811661080a5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fae5a12c29e496b092467a620746b9eaf4e0e231a631a4370c233b1fac38e8e269060200161058b565b6000546001600160a01b031633146108825760405162461bcd60e51b815260040161030e9061201e565b816001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190611f4f565b8160ff161061091a57604051635661022160e01b815260ff8216600482015260240161030e565b6001600160a01b038216600081815260056020526040808220805460ff191660ff861690811790915590519092917f09af193ef099b5f06d605e833e3ad8974749fe5d573bed1ed2619318c34c827a91a35050565b60405163e6a4390560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a439059060440160206040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190611cc0565b90506001600160a01b038116610a3e5760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015610a8057600080fd5b505afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190611f4f565b9050610ace6001600160a01b038316838361110f565b60405163226bf2d160e21b815230600482015260009081906001600160a01b038516906389afcb44906024016040805180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190611f68565b91509150836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8857600080fd5b505afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc09190611cc0565b6001600160a01b0316866001600160a01b031614610bda57905b60006103e860035484610bed919061207b565b610bf79190612059565b905060006103e860035484610c0c919061207b565b610c169190612059565b90508115610c3857600254610c38906001600160a01b038a811691168461110f565b8015610c5857600254610c58906001600160a01b0389811691168361110f565b6001600160a01b03808816908916337fb34d302380fcc86b721164311b357459321ee916186c2cc83e8555705490051e610c92868961209a565b610c9c868961209a565b610cba8e8e610cab8b8e61209a565b610cb58b8e61209a565b611172565b6040805193845260208401929092529082015260600160405180910390a45050505050505050565b806001600160a01b031663fe49abe36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d1d57600080fd5b505af1158015610d31573d6000803e3d6000fd5b505050506000816001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610d7057600080fd5b505afa158015610d84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dac9190810190611db6565b6001600160a01b03831660008181526005602052604080822054905162415c3360e91b815260ff909116600482018190529394509091906382b866009060240160206040518083038186803b158015610e0457600080fd5b505afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190611cc0565b905060005b83518160ff161015610fe3578260ff168160ff161415610e6057610fd1565b6000848260ff1681518110610e7757610e7761212e565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610ec257600080fd5b505afa158015610ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efa9190611f4f565b9050610f368682878560ff1681518110610f1657610f1661212e565b60200260200101516001600160a01b03166115e09092919063ffffffff16565b6040516348b4aac360e11b815260ff80841660048301528516602482015260448101829052600060648201524260848201526001600160a01b0387169063916955869060a401602060405180830381600087803b158015610f9657600080fd5b505af1158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce9190611f4f565b50505b80610fdb816120f8565b915050610e41565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561102657600080fd5b505afa15801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e9190611f4f565b905060006103e860035483611073919061207b565b61107d9190612059565b9050801561109f5760025461109f906001600160a01b0385811691168361110f565b6001600160a01b03808416908716337fe6edf68edaa0d0a22a68502fa4a7a79d12fb1b945e7abedd89402053d7ea69736110d9858761209a565b6110ef88806110e8898b61209a565b6000611172565b6040805192835260208301919091520160405180910390a4505050505050565b6040516001600160a01b03831660248201526044810182905261042190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116a7565b6000836001600160a01b0316856001600160a01b031614156112cf57600061119a8385612041565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031614156112325761122a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361110f565b8091506112c9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b0316141561129d576112967f000000000000000000000000000000000000000000000000000000000000000082611779565b91506112c9565b60006112a887610741565b90506112b6878284306117ce565b91506112c58182846000611172565b9250505b506115d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614156113795761135d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008561110f565b826113688584611779565b6113729190612041565b90506115d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415611412576114076001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008461110f565b816113688685611779565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614156114ac576113727f00000000000000000000000000000000000000000000000000000000000000008461149d877f000000000000000000000000000000000000000000000000000000000000000087306117ce565b6114a79190612041565b611779565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415611537576113727f00000000000000000000000000000000000000000000000000000000000000008361149d887f000000000000000000000000000000000000000000000000000000000000000088306117ce565b600061154286610741565b9050600061154f86610741565b9050856001600160a01b0316826001600160a01b0316141561158957611582828761157c8a868a306117ce565b87611172565b92506115d5565b866001600160a01b0316816001600160a01b031614156115b557611582878287610cb58a868a306117ce565b6115d282826115c68a868a306117ce565b610cb58a868a306117ce565b92505b50505b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116649190611f4f565b61166e9190612041565b6040516001600160a01b0385166024820152604481018290529091506116a190859063095ea7b360e01b9060640161113b565b50505050565b60006116fc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b319092919063ffffffff16565b805190915015610421578080602001905181019061171a9190611ec4565b6104215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161030e565b60006117c7837f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006117ce565b9392505050565b60405163e6a4390560e01b81526001600160a01b038581166004830152848116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e6a439059060440160206040518083038186803b15801561183c57600080fd5b505afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190611cc0565b90506001600160a01b03811661189d5760405163d92e233d60e01b815260040160405180910390fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156118d957600080fd5b505afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119119190611ee6565b506001600160701b0391821693501690506000611930876103e561207b565b9050836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a39190611cc0565b6001600160a01b0316896001600160a01b03161415611a7357806119c9846103e861207b565b6119d39190612041565b6119dd838361207b565b6119e79190612059565b94506119fd6001600160a01b038a16858961110f565b604080516000808252602082019283905263022c0d9f60e01b9092526001600160a01b0386169163022c0d9f91611a3c919089908b9060248101611fd4565b600060405180830381600087803b158015611a5657600080fd5b505af1158015611a6a573d6000803e3d6000fd5b50505050611b25565b80611a80836103e861207b565b611a8a9190612041565b611a94848361207b565b611a9e9190612059565b9450611ab46001600160a01b038a16858961110f565b604080516000808252602082019283905263022c0d9f60e01b9092526001600160a01b0386169163022c0d9f91611af29189918b9060248101611fd4565b600060405180830381600087803b158015611b0c57600080fd5b505af1158015611b20573d6000803e3d6000fd5b505050505b50505050949350505050565b60606115d88484600085856001600160a01b0385163b611b935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030e565b600080866001600160a01b03168587604051611baf9190611fb8565b60006040518083038185875af1925050503d8060008114611bec576040519150601f19603f3d011682016040523d82523d6000602084013e611bf1565b606091505b50915091506115d282828660608315611c0b5750816117c7565b825115611c1b5782518084602001fd5b8160405162461bcd60e51b815260040161030e919061200b565b60008083601f840112611c4757600080fd5b50813567ffffffffffffffff811115611c5f57600080fd5b6020830191508360208260051b8501011115611c7a57600080fd5b9250929050565b80516107848161215a565b80516001600160701b038116811461078457600080fd5b600060208284031215611cb557600080fd5b81356117c78161215a565b600060208284031215611cd257600080fd5b81516117c78161215a565b60008060408385031215611cf057600080fd5b8235611cfb8161215a565b91506020830135611d0b8161215a565b809150509250929050565b60008060408385031215611d2957600080fd5b8235611d348161215a565b9150602083013560ff81168114611d0b57600080fd5b60008060008060408587031215611d6057600080fd5b843567ffffffffffffffff80821115611d7857600080fd5b611d8488838901611c35565b90965094506020870135915080821115611d9d57600080fd5b50611daa87828801611c35565b95989497509550505050565b60006020808385031215611dc957600080fd5b825167ffffffffffffffff80821115611de157600080fd5b818501915085601f830112611df557600080fd5b815181811115611e0757611e07612144565b8060051b604051601f19603f83011681018181108582111715611e2c57611e2c612144565b604052828152858101935084860182860187018a1015611e4b57600080fd5b600095505b83861015611e7557611e6181611c81565b855260019590950194938601938601611e50565b5098975050505050505050565b60008060208385031215611e9557600080fd5b823567ffffffffffffffff811115611eac57600080fd5b611eb885828601611c35565b90969095509350505050565b600060208284031215611ed657600080fd5b815180151581146117c757600080fd5b600080600060608486031215611efb57600080fd5b611f0484611c8c565b9250611f1260208501611c8c565b9150604084015163ffffffff81168114611f2b57600080fd5b809150509250925092565b600060208284031215611f4857600080fd5b5035919050565b600060208284031215611f6157600080fd5b5051919050565b60008060408385031215611f7b57600080fd5b505080516020909101519092909150565b60008151808452611fa48160208601602086016120b1565b601f01601f19169290920160200192915050565b60008251611fca8184602087016120b1565b9190910192915050565b84815283602082015260018060a01b03831660408201526080606082015260006120016080830184611f8c565b9695505050505050565b6020815260006117c76020830184611f8c565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b6000821982111561205457612054612118565b500190565b60008261207657634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561209557612095612118565b500290565b6000828210156120ac576120ac612118565b500390565b60005b838110156120cc5781810151838201526020016120b4565b838111156116a15750506000910152565b60006000198214156120f1576120f1612118565b5060010190565b600060ff821660ff81141561210f5761210f612118565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104ff57600080fdfea2646970667358221220db8bca2ed0e6a51da6146f08e069cb36648c10d66d1c1b5316a73bff8756eb3f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7604,
        "contract": "contracts/tools/ZenlinkMaker.sol:ZenlinkMaker",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7606,
        "contract": "contracts/tools/ZenlinkMaker.sol:ZenlinkMaker",
        "label": "adminCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 30595,
        "contract": "contracts/tools/ZenlinkMaker.sol:ZenlinkMaker",
        "label": "feeDistributor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 30597,
        "contract": "contracts/tools/ZenlinkMaker.sol:ZenlinkMaker",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 30601,
        "contract": "contracts/tools/ZenlinkMaker.sol:ZenlinkMaker",
        "label": "_bridges",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 30605,
        "contract": "contracts/tools/ZenlinkMaker.sol:ZenlinkMaker",
        "label": "_stableSwapFeeTokenIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}