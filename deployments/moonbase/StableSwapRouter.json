{
  "address": "0x17D5AfeC3C4D2484CCAD927a45F16344B389cEbA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addPoolAndBaseLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addPoolLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateConvert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "iBase",
          "type": "uint8"
        }
      ],
      "name": "calculateRemoveBaseLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "availableTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "fromIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "toIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "is_deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_meta",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_base",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removePoolAndBaseLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "i",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_min_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removePoolAndBaseLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removePoolLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removePoolLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "fromIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "toIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapPoolFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapPoolToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa57d06c54504a51919155f6ae21275255318a91387c983e418ec62e83ad2ad14",
  "receipt": {
    "to": null,
    "from": "0x0597EB296eFbb84CA64C843a7F80d7F8Bff7d17d",
    "contractAddress": "0x17D5AfeC3C4D2484CCAD927a45F16344B389cEbA",
    "transactionIndex": 77,
    "gasUsed": "4526891",
    "logsBloom": "0x
    "blockHash": "0x5a936252b5b5c57739ff21d1dbf3183d5e4e4ac1442775f76bb6526101da0990",
    "transactionHash": "0xa57d06c54504a51919155f6ae21275255318a91387c983e418ec62e83ad2ad14",
    "logs": [],
    "blockNumber": 2782176,
    "cumulativeGasUsed": "6569520",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "007aa94c81b3bc67ae48537a63ee475f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addPoolAndBaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addPoolLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"iBase\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveBaseLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"is_deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_meta\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_base\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removePoolAndBaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_min_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removePoolAndBaseLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removePoolLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removePoolLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapPoolFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapPoolToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/StableSwapRouter.sol\":\"StableSwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/periphery/StableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../stableswap/interfaces/IStableSwap.sol\\\";\\nimport \\\"./interfaces/IStableSwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract StableSwapRouter is IStableSwapRouter {\\n    using SafeERC20 for IERC20;\\n\\n    function convert(\\n        IStableSwap fromPool,\\n        IStableSwap toPool,\\n        uint256 amount,\\n        uint256 minToMint,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256 toPoolLength = toPool.getNumberOfTokens();\\n        require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n        require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n        IERC20 fromToken = fromPool.getLpToken();\\n        IERC20 toToken = toPool.getLpToken();\\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n        // validate token\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 coin = fromPool.getToken(i);\\n            toPool.getTokenIndex(address(coin));\\n        }\\n        fromToken.safeTransferFrom(msg.sender, address(this), amount);\\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n        for (uint8 i = 0; i < toPoolLength; i++) {\\n            IERC20 coin = toPool.getToken(i);\\n            uint256 addBalance = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\\n            meta_amounts[i] = addBalance;\\n        }\\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n        uint256 lpAmount = toToken.balanceOf(address(this));\\n        toToken.safeTransfer(to, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addPoolLiquidity(\\n        IStableSwap pool,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256) {\\n        IERC20 token = IERC20(pool.getLpToken());\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n            uint256 transferred;\\n            if (amounts[i] > 0) {\\n                transferred = transferIn(coin, msg.sender, amounts[i]);\\n            }\\n            amounts[i] = transferred;\\n            if (transferred > 0) {\\n                coin.safeIncreaseAllowance(address(pool), transferred);\\n            }\\n        }\\n        pool.addLiquidity(amounts, minMintAmount, deadline);\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.safeTransfer(to, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addPoolAndBaseLiquidity(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256) {\\n        IERC20 token = IERC20(pool.getLpToken());\\n        IERC20 base_lp = IERC20(basePool.getLpToken());\\n        require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n        require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n        bool deposit_base = false;\\n        for (uint8 i = 0; i < base_amounts.length; i++) {\\n            uint256 amount = base_amounts[i];\\n            if (amount > 0) {\\n                deposit_base = true;\\n                IERC20 coin = basePool.getToken(i);\\n                uint256 transferred = transferIn(coin, msg.sender, amount);\\n                coin.safeIncreaseAllowance(address(basePool), transferred);\\n                base_amounts[i] = transferred;\\n            }\\n        }\\n\\n        uint256 base_lp_received;\\n        if (deposit_base) {\\n            base_lp_received = basePool.addLiquidity(base_amounts, 0, deadline);\\n        }\\n\\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n\\n            uint256 transferred;\\n            if (address(coin) == address(base_lp)) {\\n                transferred = base_lp_received;\\n            } else if (meta_amounts[i] > 0) {\\n                transferred = transferIn(coin, msg.sender, meta_amounts[i]);\\n            }\\n\\n            meta_amounts[i] = transferred;\\n            if (transferred > 0) {\\n                coin.safeIncreaseAllowance(address(pool), transferred);\\n            }\\n        }\\n\\n        uint256 base_lp_prior = base_lp.balanceOf(address(this));\\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\\n        if (deposit_base) {\\n            require((base_lp.balanceOf(address(this)) + base_lp_received) == base_lp_prior, \\\"invalidBasePool\\\");\\n        }\\n\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.safeTransfer(to, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function removePoolLiquidity(\\n        IStableSwap pool,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256[] memory amounts) {\\n        IERC20 token = pool.getLpToken();\\n        token.safeTransferFrom(msg.sender, address(this), lpAmount);\\n        token.safeIncreaseAllowance(address(pool), lpAmount);\\n        pool.removeLiquidity(lpAmount, minAmounts, deadline);\\n        amounts = new uint256[](pool.getNumberOfTokens());\\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            if (amounts[i] > 0) {\\n                coin.safeTransfer(to, amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function removePoolLiquidityOneToken(\\n        IStableSwap pool,\\n        uint256 lpAmount,\\n        uint8 index,\\n        uint256 minAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256) {\\n        IERC20 token = pool.getLpToken();\\n        token.safeTransferFrom(msg.sender, address(this), lpAmount);\\n        token.safeIncreaseAllowance(address(pool), lpAmount);\\n        pool.removeLiquidityOneToken(lpAmount, index, minAmount, deadline);\\n        IERC20 coin = pool.getToken(index);\\n        uint256 coin_amount = coin.balanceOf(address(this));\\n        coin.safeTransfer(to, coin_amount);\\n        return coin_amount;\\n    }\\n\\n    function removePoolAndBaseLiquidity(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n        IERC20 token = pool.getLpToken();\\n        IERC20 baseToken = basePool.getLpToken();\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        token.safeIncreaseAllowance(address(pool), _amount);\\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n        uint256 _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n        // Transfer all coins out\\n        amounts = new uint256[](pool.getNumberOfTokens());\\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            if (amounts[i] > 0) {\\n                coin.safeTransfer(to, amounts[i]);\\n            }\\n        }\\n\\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n            IERC20 coin = basePool.getToken(i);\\n            base_amounts[i] = coin.balanceOf(address(this));\\n            if (base_amounts[i] > 0) {\\n                coin.safeTransfer(to, base_amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function removePoolAndBaseLiquidityOneToken(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256 _token_amount,\\n        uint8 i,\\n        uint256 _min_amount,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256) {\\n        IERC20 token = pool.getLpToken();\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        token.safeTransferFrom(msg.sender, address(this), _token_amount);\\n        token.safeIncreaseAllowance(address(pool), _token_amount);\\n        pool.removeLiquidityOneToken(_token_amount, baseTokenIndex, 0, deadline);\\n        uint256 _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n        basePool.removeLiquidityOneToken(_base_amount, i, _min_amount, deadline);\\n        IERC20 coin = basePool.getToken(i);\\n        uint256 coin_amount = coin.balanceOf(address(this));\\n        coin.safeTransfer(to, coin_amount);\\n        return coin_amount;\\n    }\\n\\n    function swapPool(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256) {\\n        IERC20 coin = pool.getToken(fromIndex);\\n        coin.safeTransferFrom(msg.sender, address(this), inAmount);\\n        coin.safeIncreaseAllowance(address(pool), inAmount);\\n        pool.swap(fromIndex, toIndex, inAmount, minOutAmount, deadline);\\n        IERC20 coinTo = pool.getToken(toIndex);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(to, amountOut);\\n        return amountOut;\\n    }\\n\\n    function swapPoolFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, deadline);\\n        }\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(to, amountOut);\\n        return amountOut;\\n    }\\n\\n    function swapPoolToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            coin.safeIncreaseAllowance(address(pool), dx);\\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0, deadline);\\n        }\\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(to, amountOut);\\n        return amountOut;\\n    }\\n\\n    // =========== VIEW ===========\\n\\n    function calculateConvert(\\n        IStableSwap fromPool,\\n        IStableSwap toPool,\\n        uint256 amount\\n    ) external override view returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(amount);\\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromCoin = fromPool.getToken(i);\\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n            meta_amounts[toCoinIndex] = amounts[i];\\n        }\\n        return toPool.calculateTokenAmount(meta_amounts, true);\\n    }\\n\\n    function calculateTokenAmount(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external override view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256 amount\\n    ) external override view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        meta_amounts = pool.calculateRemoveLiquidity(amount);\\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\\n        meta_amounts[baseTokenIndex] = 0;\\n        base_amounts = basePool.calculateRemoveLiquidity(lpAmount);\\n    }\\n\\n    function calculateRemoveBaseLiquidityOneToken(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256 _token_amount,\\n        uint8 iBase\\n    ) external override view returns (uint256 availableTokenAmount) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = pool.calculateRemoveLiquidityOneToken(_token_amount, baseTokenIndex);\\n        availableTokenAmount = basePool.calculateRemoveLiquidityOneToken(_base_tokens, iBase);\\n    }\\n\\n    function calculateSwap(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount\\n    ) external override view returns (uint256) {\\n        return pool.calculateSwap(fromIndex, toIndex, inAmount);\\n    }\\n\\n    function calculateSwapFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external override view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function calculateSwapToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external override view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(tokenLPAmount, tokenIndexTo);\\n    }\\n\\n    function transferIn(\\n        IERC20 token,\\n        address from,\\n        uint256 amount\\n    ) internal returns (uint256 transferred) {\\n        uint256 prior_balance = token.balanceOf(address(this));\\n        token.safeTransferFrom(from, address(this), amount);\\n        transferred = token.balanceOf(address(this)) - prior_balance;\\n    }\\n}\\n\",\"keccak256\":\"0xfafeed420127b05e12d36666614138cc5a8bead0dcbcc166c5280a8fa2192bc2\",\"license\":\"MIT\"},\"contracts/periphery/interfaces/IStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../stableswap/interfaces/IStableSwap.sol\\\";\\n\\ninterface IStableSwapRouter {\\n    function convert(\\n        IStableSwap fromPool,\\n        IStableSwap toPool,\\n        uint256 amount,\\n        uint256 minToMint,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addPoolLiquidity(\\n        IStableSwap pool,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addPoolAndBaseLiquidity(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removePoolLiquidity(\\n        IStableSwap pool,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function removePoolLiquidityOneToken(\\n        IStableSwap pool,\\n        uint256 lpAmount,\\n        uint8 index,\\n        uint256 minAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removePoolAndBaseLiquidity(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts);\\n\\n    function removePoolAndBaseLiquidityOneToken(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256 _token_amount,\\n        uint8 i,\\n        uint256 _min_amount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapPool(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapPoolFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapPoolToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function calculateConvert(\\n        IStableSwap fromPool,\\n        IStableSwap toPool,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256 amount\\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts);\\n\\n    function calculateRemoveBaseLiquidityOneToken(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint256 _token_amount,\\n        uint8 iBase\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function calculateSwap(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256);\\n\\n    function calculateSwapFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateSwapToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\",\"keccak256\":\"0xa86ed3c6ad666a7ad63daf58cead130645677a3262b3b1d9f20dac924538df94\",\"license\":\"MIT\"},\"contracts/stableswap/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x86c437195727727a42b37c6bfd9a233cec2c5b5a3730fa77542e549e2c1104e2\",\"license\":\"MIT\"},\"contracts/stableswap/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../LPToken.sol\\\";\\n\\ninterface IStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event FlashLoan(\\n        address indexed caller,\\n        address indexed receiver,\\n        uint256[] amounts_out\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 soldId,\\n        uint256 tokensSold,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            LPToken,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        uint256[] memory amountsOut,\\n        address to,\\n        bytes calldata data,\\n        uint256 deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdrawAdminFee() external;\\n}\\n\",\"keccak256\":\"0xa6fbab4b724f9264e156cc78ef4fb5998932462485f0592855b95d9939e94a73\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506150f3806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063643abb86116100a2578063b404d95911610071578063b404d95914610222578063b56527bd14610235578063b61f8d0514610248578063d3f051351461025b578063d74fff4e1461026e57600080fd5b8063643abb86146101d657806377269e29146101e9578063798af720146101fc5780638a311c571461020f57600080fd5b8063357b32f0116100de578063357b32f01461017d5780634d7602441461019057806354681c41146101b057806357c9ee3e146101c357600080fd5b806304b70f0a1461011057806305023d2c146101365780630c8b2216146101495780633214b8c91461016a575b600080fd5b61012361011e3660046148ad565b610281565b6040519081526020015b60405180910390f35b61012361014436600461479d565b610a5c565b61015c61015736600461495d565b610d13565b60405161012d929190614e60565b610123610178366004614b76565b610f55565b61012361018b366004614d5c565b611173565b6101a361019e366004614c57565b6113d3565b60405161012d9190614e4d565b6101236101be366004614abf565b6117c0565b6101236101d1366004614a58565b6119ca565b6101236101e436600461495d565b61210f565b6101236101f7366004614810565b612438565b61012361020a366004614d0b565b612625565b61012361021d366004614b76565b6126b1565b61015c61023036600461499e565b6129a3565b610123610243366004614bc9565b6131b8565b610123610256366004614cb9565b61369b565b610123610269366004614b12565b6138db565b61012361027c366004614bc9565b613d31565b600080886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bd57600080fd5b505afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190614780565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561033257600080fd5b505afa158015610346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036a9190614780565b9050886001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd9190614dc0565b8751146104315760405162461bcd60e51b815260206004820152601860248201527f696e76616c696442617365416d6f756e74734c656e677468000000000000000060448201526064015b60405180910390fd5b896001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b15801561046a57600080fd5b505afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a29190614dc0565b8851146104f15760405162461bcd60e51b815260206004820152601860248201527f696e76616c69644d657461416d6f756e74734c656e67746800000000000000006044820152606401610428565b6000805b88518160ff161015610608576000898260ff16815181106105185761051861505c565b6020026020010151905060008111156105f55760405162415c3360e91b815260ff83166004820152600193506000906001600160a01b038e16906382b866009060240160206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190614780565b905060006105ba82338561413f565b90506105d06001600160a01b0383168f83614255565b808c8560ff16815181106105e6576105e661505c565b60200260200101818152505050505b508061060081615026565b9150506104f5565b506000811561069757604051634d49e87d60e01b81526001600160a01b038c1690634d49e87d90610642908c906000908b90600401614ea9565b602060405180830381600087803b15801561065c57600080fd5b505af1158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190614dc0565b90505b60005b8a518160ff1610156107f05760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b866009060240160206040518083038186803b1580156106ea57600080fd5b505afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190614780565b90506000856001600160a01b0316826001600160a01b03161415610747575082610796565b60008d8460ff168151811061075e5761075e61505c565b602002602001015111156107965761079382338f8660ff16815181106107865761078661505c565b602002602001015161413f565b90505b808d8460ff16815181106107ac576107ac61505c565b602090810291909101015280156107db576107db8f82846001600160a01b03166142559092919063ffffffff16565b505080806107e890615026565b91505061069a565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190614dc0565b604051634d49e87d60e01b81529091506001600160a01b038e1690634d49e87d9061089e908e908d908c90600401614ea9565b602060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190614dc0565b5082156109bb576040516370a0823160e01b8152306004820152819083906001600160a01b038716906370a082319060240160206040518083038186803b15801561093a57600080fd5b505afa15801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109729190614dc0565b61097c9190614fcb565b146109bb5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a5910985cd9541bdbdb608a1b6044820152606401610428565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a082319060240160206040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190614dc0565b9050610a4b6001600160a01b0387168a8361434f565b9d9c50505050505050505050505050565b600080866001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190614780565b905060005b86518160ff161015610bf25760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b866009060240160206040518083038186803b158015610b2557600080fd5b505afa158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190614780565b9050600080898460ff1681518110610b7757610b7761505c565b60200260200101511115610ba257610b9f82338b8660ff16815181106107865761078661505c565b90505b80898460ff1681518110610bb857610bb861505c565b60209081029190910101528015610bdd57610bdd6001600160a01b0383168b83614255565b50508080610bea90615026565b915050610ad5565b50604051634d49e87d60e01b81526001600160a01b03881690634d49e87d90610c2390899089908890600401614ea9565b602060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190614dc0565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015610cb857600080fd5b505afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf09190614dc0565b9050610d066001600160a01b038316868361434f565b9150505b95945050505050565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5157600080fd5b505afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918816906366c0bd249060240160206040518083038186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190614dd9565b60405163797d695b60e11b8152600481018790529091506001600160a01b0388169063f2fad2b69060240160006040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8791908101906146cc565b93506000848260ff1681518110610ea057610ea061505c565b602002602001015190506000858360ff1681518110610ec157610ec161505c565b602090810291909101015260405163797d695b60e11b8152600481018290526001600160a01b0388169063f2fad2b69060240160006040518083038186803b158015610f0c57600080fd5b505afa158015610f20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f4891908101906146cc565b9350505050935093915050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9157600080fd5b505afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd249060240160206040518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190614dd9565b90508360ff808316908816146110e45760405163a95b089f60e01b815260ff808916600483015283166024820152604481018690526001600160a01b038a169063a95b089f9060640160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190614dc0565b90505b60405163342a87a160e01b81526004810182905260ff871660248201526001600160a01b0389169063342a87a1906044015b60206040518083038186803b15801561112e57600080fd5b505afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190614dc0565b9998505050505050505050565b60405162415c3360e91b815260ff8716600482015260009081906001600160a01b038a16906382b866009060240160206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190614780565b90506112086001600160a01b038216333089614384565b61121c6001600160a01b0382168a88614255565b6040516348b4aac360e11b815260ff808a166004830152881660248201526044810187905260648101869052608481018490526001600160a01b038a169063916955869060a401602060405180830381600087803b15801561127d57600080fd5b505af1158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b59190614dc0565b5060405162415c3360e91b815260ff881660048201526000906001600160a01b038b16906382b866009060240160206040518083038186803b1580156112fa57600080fd5b505afa15801561130e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113329190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561137757600080fd5b505afa15801561138b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113af9190614dc0565b90506113c56001600160a01b038316878361434f565b9a9950505050505050505050565b60606000866001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561141057600080fd5b505afa158015611424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114489190614780565b905061145f6001600160a01b038216333089614384565b6114736001600160a01b0382168888614255565b60405163031cd52b60e41b81526001600160a01b038816906331cd52b0906114a390899089908890600401614f4f565b600060405180830381600087803b1580156114bd57600080fd5b505af11580156114d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114f991908101906146cc565b50866001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b15801561153357600080fd5b505afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b9190614dc0565b6001600160401b0381111561158257611582615072565b6040519080825280602002602001820160405280156115ab578160200160208202803683370190505b50915060005b876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ea57600080fd5b505afa1580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116229190614dc0565b8160ff1610156117b55760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b866009060240160206040518083038186803b15801561167057600080fd5b505afa158015611684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a89190614780565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b1580156116ea57600080fd5b505afa1580156116fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117229190614dc0565b848360ff16815181106117375761173761505c565b6020026020010181815250506000848360ff168151811061175a5761175a61505c565b602002602001015111156117a2576117a286858460ff16815181106117815761178161505c565b6020026020010151836001600160a01b031661434f9092919063ffffffff16565b50806117ad81615026565b9150506115b1565b505095945050505050565b600080846001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156117fc57600080fd5b505afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918816906366c0bd249060240160206040518083038186803b15801561187b57600080fd5b505afa15801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b39190614dd9565b60405163342a87a160e01b81526004810187905260ff821660248201529091506000906001600160a01b0389169063342a87a19060440160206040518083038186803b15801561190257600080fd5b505afa158015611916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193a9190614dc0565b60405163342a87a160e01b81526004810182905260ff871660248201529091506001600160a01b0388169063342a87a19060440160206040518083038186803b15801561198657600080fd5b505afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190614dc0565b98975050505050505050565b600080876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0657600080fd5b505afa158015611a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3e9190614dc0565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7b57600080fd5b505afa158015611a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab39190614dc0565b9050876001600160a01b0316896001600160a01b03161415611b0b5760405162461bcd60e51b8152602060048201526011602482015270199c9bdb541bdbdb080f481d1bd41bdbdb607a1b6044820152606401610428565b808214611b5a5760405162461bcd60e51b815260206004820152601960248201527f706f6f6c546f6b656e734c656e6774684d6973736d61746368000000000000006044820152606401610428565b6000896001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9557600080fd5b505afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd9190614780565b90506000896001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0a57600080fd5b505afa158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190614780565b90506000846001600160401b03811115611c5e57611c5e615072565b604051908082528060200260200182016040528015611c87578160200160208202803683370190505b50905060005b858160ff161015611da65760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b866009060240160206040518083038186803b158015611cdc57600080fd5b505afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d149190614780565b6040516319b02f4960e21b81526001600160a01b038083166004830152919250908e16906366c0bd249060240160206040518083038186803b158015611d5957600080fd5b505afa158015611d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d919190614dd9565b50508080611d9e90615026565b915050611c8d565b50611dbc6001600160a01b03841633308d614384565b611dd06001600160a01b0384168d8c614255565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090611e00908d9085908c90600401614f4f565b600060405180830381600087803b158015611e1a57600080fd5b505af1158015611e2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e5691908101906146cc565b506000846001600160401b03811115611e7157611e71615072565b604051908082528060200260200182016040528015611e9a578160200160208202803683370190505b50905060005b858160ff161015611ffb5760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b866009060240160206040518083038186803b158015611eef57600080fd5b505afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015611f6c57600080fd5b505afa158015611f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa49190614dc0565b9050611fc48f82846001600160a01b03166142559092919063ffffffff16565b80848460ff1681518110611fda57611fda61505c565b60200260200101818152505050508080611ff390615026565b915050611ea0565b50604051634d49e87d60e01b81526001600160a01b038d1690634d49e87d9061202c9084908e908d90600401614ea9565b602060405180830381600087803b15801561204657600080fd5b505af115801561205a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207e9190614dc0565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b1580156120c157600080fd5b505afa1580156120d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f99190614dc0565b9050610a4b6001600160a01b0385168b8361434f565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121839190614dc0565b60405163797d695b60e11b8152600481018590529091506000906001600160a01b0387169063f2fad2b69060240160006040518083038186803b1580156121c957600080fd5b505afa1580156121dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261220591908101906146cc565b90506000826001600160401b0381111561222157612221615072565b60405190808252806020026020018201604052801561224a578160200160208202803683370190505b50905060005b838160ff1610156123ab5760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b866009060240160206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d79190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918a16906366c0bd249060240160206040518083038186803b15801561231e57600080fd5b505afa158015612332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123569190614dd9565b60ff169050848360ff16815181106123705761237061505c565b602002602001015184828151811061238a5761238a61505c565b602002602001018181525050505080806123a390615026565b915050612250565b50604051637355940360e11b81526001600160a01b0387169063e6ab2806906123db908490600190600401614e85565b60206040518083038186803b1580156123f357600080fd5b505afa158015612407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242b9190614dc0565b93505050505b9392505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561247457600080fd5b505afa158015612488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ac9190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd249060240160206040518083038186803b1580156124f357600080fd5b505afa158015612507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252b9190614dd9565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b815260040161255d929190614e85565b60206040518083038186803b15801561257557600080fd5b505afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad9190614dc0565b905080878360ff16815181106125c5576125c561505c565b60200260200101516125d79190614fcb565b878360ff16815181106125ec576125ec61505c565b6020908102919091010152604051637355940360e11b81526001600160a01b038a169063e6ab280690611116908a908990600401614e85565b60405163a95b089f60e01b815260ff808516600483015283166024820152604481018290526000906001600160a01b0386169063a95b089f9060640160206040518083038186803b15801561267957600080fd5b505afa15801561268d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190614dc0565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ed57600080fd5b505afa158015612701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127259190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd249060240160206040518083038186803b15801561276c57600080fd5b505afa158015612780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a49190614dd9565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156127e157600080fd5b505afa1580156127f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128199190614dc0565b6001600160401b0381111561283057612830615072565b604051908082528060200260200182016040528015612859578160200160208202803683370190505b50905084818860ff16815181106128725761287261505c565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab2806906128af908590600190600401614e85565b60206040518083038186803b1580156128c757600080fd5b505afa1580156128db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ff9190614dc0565b90508660ff168360ff16141561291a579350610d0a92505050565b60405163a95b089f60e01b815260ff808516600483015288166024820152604481018290526001600160a01b038b169063a95b089f9060640160206040518083038186803b15801561296b57600080fd5b505afa15801561297f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c59190614dc0565b60608060008b6001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a199190614780565b905060008b6001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015612a5657600080fd5b505afa158015612a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8e9190614780565b9050612aa56001600160a01b03831633308e614384565b612ab96001600160a01b0383168e8d614255565b60405163031cd52b60e41b81526001600160a01b038e16906331cd52b090612aeb908e908e908e908b90600401614f01565b600060405180830381600087803b158015612b0557600080fd5b505af1158015612b19573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b4191908101906146cc565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015612b8457600080fd5b505afa158015612b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bbc9190614dc0565b9050612bd26001600160a01b0383168e83614255565b60405163031cd52b60e41b81526001600160a01b038e16906331cd52b090612c049084908d908d908c90600401614f01565b600060405180830381600087803b158015612c1e57600080fd5b505af1158015612c32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c5a91908101906146cc565b508d6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612c9457600080fd5b505afa158015612ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccc9190614dc0565b6001600160401b03811115612ce357612ce3615072565b604051908082528060200260200182016040528015612d0c578160200160208202803683370190505b50945060005b8e6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4b57600080fd5b505afa158015612d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d839190614dc0565b8160ff161015612f005760008f6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401612dc4919060ff91909116815260200190565b60206040518083038186803b158015612ddc57600080fd5b505afa158015612df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e149190614780565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b158015612e5657600080fd5b505afa158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190614dc0565b878360ff1681518110612ea357612ea361505c565b6020026020010181815250506000878360ff1681518110612ec657612ec661505c565b60200260200101511115612eed57612eed89888460ff16815181106117815761178161505c565b5080612ef881615026565b915050612d12565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612f3a57600080fd5b505afa158015612f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f729190614dc0565b6001600160401b03811115612f8957612f89615072565b604051908082528060200260200182016040528015612fb2578160200160208202803683370190505b50935060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612ff157600080fd5b505afa158015613005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130299190614dc0565b8160ff1610156131a65760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b815260040161306a919060ff91909116815260200190565b60206040518083038186803b15801561308257600080fd5b505afa158015613096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ba9190614780565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b1580156130fc57600080fd5b505afa158015613110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131349190614dc0565b868360ff16815181106131495761314961505c565b6020026020010181815250506000868360ff168151811061316c5761316c61505c565b602002602001015111156131935761319389878460ff16815181106117815761178161505c565b508061319e81615026565b915050612fb8565b50505050995099975050505050505050565b600080886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156131f457600080fd5b505afa158015613208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322c9190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918c16906366c0bd249060240160206040518083038186803b15801561327357600080fd5b505afa158015613287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ab9190614dd9565b905060008a6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156132e857600080fd5b505afa1580156132fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133209190614dc0565b6001600160401b0381111561333757613337615072565b604051908082528060200260200182016040528015613360578160200160208202803683370190505b50905087818b60ff16815181106133795761337961505c565b602090810291909101015260405162415c3360e91b815260ff8b1660048201526000906001600160a01b038d16906382b866009060240160206040518083038186803b1580156133c857600080fd5b505afa1580156133dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134009190614780565b90506134176001600160a01b03821633308c614384565b61342b6001600160a01b0382168d8b614255565b604051634d49e87d60e01b81526000906001600160a01b038e1690634d49e87d9061345e90869085908c90600401614ea9565b602060405180830381600087803b15801561347857600080fd5b505af115801561348c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b09190614dc0565b90508a60ff168460ff161461356e576134d36001600160a01b0386168f83614255565b6040516348b4aac360e11b815260ff80861660048301528c16602482015260448101829052606481018a9052608481018890526001600160a01b038f169063916955869060a401602060405180830381600087803b15801561353457600080fd5b505af1158015613548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356c9190614dc0565b505b60008e6001600160a01b03166382b866008d6040518263ffffffff1660e01b81526004016135a5919060ff91909116815260200190565b60206040518083038186803b1580156135bd57600080fd5b505afa1580156135d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f59190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561363a57600080fd5b505afa15801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136729190614dc0565b90506136886001600160a01b0383168b8361434f565b9f9e505050505050505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156136d757600080fd5b505afa1580156136eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370f9190614780565b90506137266001600160a01b03821633308a614384565b61373a6001600160a01b0382168989614255565b6040516301f1d0ab60e51b81526004810188905260ff8716602482015260448101869052606481018490526001600160a01b03891690633e3a156090608401602060405180830381600087803b15801561379357600080fd5b505af11580156137a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cb9190614dc0565b5060405162415c3360e91b815260ff871660048201526000906001600160a01b038a16906382b866009060240160206040518083038186803b15801561381057600080fd5b505afa158015613824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138489190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561388d57600080fd5b505afa1580156138a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c59190614dc0565b90506111666001600160a01b038316878361434f565b600080886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561391757600080fd5b505afa15801561392b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394f9190614780565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561398c57600080fd5b505afa1580156139a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c49190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918c16906366c0bd249060240160206040518083038186803b158015613a0b57600080fd5b505afa158015613a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a439190614dd9565b9050613a5a6001600160a01b03841633308c614384565b613a6e6001600160a01b0384168c8b614255565b6040516301f1d0ab60e51b8152600481018a905260ff8216602482015260006044820152606481018690526001600160a01b038c1690633e3a156090608401602060405180830381600087803b158015613ac757600080fd5b505af1158015613adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aff9190614dc0565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015613b4257600080fd5b505afa158015613b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7a9190614dc0565b9050613b906001600160a01b0384168c83614255565b6040516301f1d0ab60e51b81526004810182905260ff8a16602482015260448101899052606481018790526001600160a01b038c1690633e3a156090608401602060405180830381600087803b158015613be957600080fd5b505af1158015613bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c219190614dc0565b5060405162415c3360e91b815260ff8a1660048201526000906001600160a01b038d16906382b866009060240160206040518083038186803b158015613c6657600080fd5b505afa158015613c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9e9190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015613ce357600080fd5b505afa158015613cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1b9190614dc0565b9050610a4b6001600160a01b0383168a8361434f565b600080886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015613d6d57600080fd5b505afa158015613d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613da59190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918c16906366c0bd249060240160206040518083038186803b158015613dec57600080fd5b505afa158015613e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e249190614dd9565b60405162415c3360e91b815260ff8b1660048201529091506000906001600160a01b038d16906382b866009060240160206040518083038186803b158015613e6b57600080fd5b505afa158015613e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea39190614780565b9050613eba6001600160a01b03821633308b614384565b8760ff838116908c1614613f7857613edc6001600160a01b0383168e8b614255565b6040516348b4aac360e11b815260ff808d16600483015284166024820152604481018a905260006064820152608481018790526001600160a01b038e169063916955869060a401602060405180830381600087803b158015613f3d57600080fd5b505af1158015613f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f759190614dc0565b90505b613f8c6001600160a01b0385168d83614255565b6040516301f1d0ab60e51b81526004810182905260ff8b16602482015260448101899052606481018790526001600160a01b038d1690633e3a156090608401602060405180830381600087803b158015613fe557600080fd5b505af1158015613ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401d9190614dc0565b5060405162415c3360e91b815260ff8b1660048201526000906001600160a01b038e16906382b866009060240160206040518083038186803b15801561406257600080fd5b505afa158015614076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409a9190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156140df57600080fd5b505afa1580156140f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141179190614dc0565b905061412d6001600160a01b0383168a8361434f565b9e9d5050505050505050505050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a082319060240160206040518083038186803b15801561418357600080fd5b505afa158015614197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141bb9190614dc0565b90506141d26001600160a01b038616853086614384565b6040516370a0823160e01b815230600482015281906001600160a01b038716906370a082319060240160206040518083038186803b15801561421357600080fd5b505afa158015614227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061424b9190614dc0565b610d0a9190614fe3565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156142a157600080fd5b505afa1580156142b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d99190614dc0565b6142e39190614fcb565b6040516001600160a01b03851660248201526044810182905290915061434990859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143bc565b50505050565b6040516001600160a01b03831660248201526044810182905261437f90849063a9059cbb60e01b90606401614312565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526143499085906323b872dd60e01b90608401614312565b6000614411826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661448e9092919063ffffffff16565b80519091501561437f578080602001905181019061442f9190614763565b61437f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610428565b606061449d84846000856144a5565b949350505050565b6060824710156145065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610428565b6001600160a01b0385163b61455d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610428565b600080866001600160a01b031685876040516145799190614e31565b60006040518083038185875af1925050503d80600081146145b6576040519150601f19603f3d011682016040523d82523d6000602084013e6145bb565b606091505b50915091506145cb8282866145d6565b979650505050505050565b606083156145e5575081612431565b8251156145f55782518084602001fd5b8160405162461bcd60e51b81526004016104289190614ece565b60008083601f84011261462157600080fd5b5081356001600160401b0381111561463857600080fd5b6020830191508360208260051b850101111561465357600080fd5b9250929050565b600082601f83011261466b57600080fd5b8135602061468061467b83614fa8565b614f78565b80838252828201915082860187848660051b89010111156146a057600080fd5b60005b858110156146bf578135845292840192908401906001016146a3565b5090979650505050505050565b600060208083850312156146df57600080fd5b82516001600160401b038111156146f557600080fd5b8301601f8101851361470657600080fd5b805161471461467b82614fa8565b80828252848201915084840188868560051b870101111561473457600080fd5b600094505b83851015614757578051835260019490940193918501918501614739565b50979650505050505050565b60006020828403121561477557600080fd5b8151612431816150a0565b60006020828403121561479257600080fd5b815161243181615088565b600080600080600060a086880312156147b557600080fd5b85356147c081615088565b945060208601356001600160401b038111156147db57600080fd5b6147e78882890161465a565b9450506040860135925060608601356147ff81615088565b949793965091946080013592915050565b600080600080600060a0868803121561482857600080fd5b853561483381615088565b9450602086013561484381615088565b935060408601356001600160401b038082111561485f57600080fd5b61486b89838a0161465a565b9450606088013591508082111561488157600080fd5b5061488e8882890161465a565b925050608086013561489f816150a0565b809150509295509295909350565b600080600080600080600060e0888a0312156148c857600080fd5b87356148d381615088565b965060208801356148e381615088565b955060408801356001600160401b03808211156148ff57600080fd5b61490b8b838c0161465a565b965060608a013591508082111561492157600080fd5b5061492e8a828b0161465a565b9450506080880135925060a088013561494681615088565b8092505060c0880135905092959891949750929550565b60008060006060848603121561497257600080fd5b833561497d81615088565b9250602084013561498d81615088565b929592945050506040919091013590565b600080600080600080600080600060e08a8c0312156149bc57600080fd5b89356149c781615088565b985060208a01356149d781615088565b975060408a0135965060608a01356001600160401b03808211156149fa57600080fd5b614a068d838e0161460f565b909850965060808c0135915080821115614a1f57600080fd5b50614a2c8c828d0161460f565b90955093505060a08a0135614a4081615088565b8092505060c08a013590509295985092959850929598565b60008060008060008060c08789031215614a7157600080fd5b8635614a7c81615088565b95506020870135614a8c81615088565b945060408701359350606087013592506080870135614aaa81615088565b8092505060a087013590509295509295509295565b60008060008060808587031215614ad557600080fd5b8435614ae081615088565b93506020850135614af081615088565b9250604085013591506060850135614b07816150ae565b939692955090935050565b600080600080600080600060e0888a031215614b2d57600080fd5b8735614b3881615088565b96506020880135614b4881615088565b9550604088013594506060880135614b5f816150ae565b93506080880135925060a088013561494681615088565b600080600080600060a08688031215614b8e57600080fd5b8535614b9981615088565b94506020860135614ba981615088565b93506040860135614bb9816150ae565b925060608601356147ff816150ae565b600080600080600080600080610100898b031215614be657600080fd5b8835614bf181615088565b97506020890135614c0181615088565b96506040890135614c11816150ae565b95506060890135614c21816150ae565b94506080890135935060a0890135925060c0890135614c3f81615088565b8092505060e089013590509295985092959890939650565b600080600080600060a08688031215614c6f57600080fd5b8535614c7a81615088565b94506020860135935060408601356001600160401b03811115614c9c57600080fd5b614ca88882890161465a565b93505060608601356147ff81615088565b60008060008060008060c08789031215614cd257600080fd5b8635614cdd81615088565b9550602087013594506040870135614cf4816150ae565b9350606087013592506080870135614aaa81615088565b60008060008060808587031215614d2157600080fd5b8435614d2c81615088565b93506020850135614d3c816150ae565b92506040850135614d4c816150ae565b9396929550929360600135925050565b600080600080600080600060e0888a031215614d7757600080fd5b8735614d8281615088565b96506020880135614d92816150ae565b95506040880135614da2816150ae565b9450606088013593506080880135925060a088013561494681615088565b600060208284031215614dd257600080fd5b5051919050565b600060208284031215614deb57600080fd5b8151612431816150ae565b600081518084526020808501945080840160005b83811015614e2657815187529582019590820190600101614e0a565b509495945050505050565b60008251614e43818460208701614ffa565b9190910192915050565b6020815260006124316020830184614df6565b604081526000614e736040830185614df6565b8281036020840152610d0a8185614df6565b604081526000614e986040830185614df6565b905082151560208301529392505050565b606081526000614ebc6060830186614df6565b60208301949094525060400152919050565b6020815260008251806020840152614eed816040850160208701614ffa565b601f01601f19169190910160400192915050565b848152606060208201819052810183905260006001600160fb1b03841115614f2857600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b838152606060208201526000614f686060830185614df6565b9050826040830152949350505050565b604051601f8201601f191681016001600160401b0381118282101715614fa057614fa0615072565b604052919050565b60006001600160401b03821115614fc157614fc1615072565b5060051b60200190565b60008219821115614fde57614fde615046565b500190565b600082821015614ff557614ff5615046565b500390565b60005b83811015615015578181015183820152602001614ffd565b838111156143495750506000910152565b600060ff821660ff81141561503d5761503d615046565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461509d57600080fd5b50565b801515811461509d57600080fd5b60ff8116811461509d57600080fdfea2646970667358221220ff0ef0ff03595fb70472d149848605f67b198c51218043136bde3e635dd9986564736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063643abb86116100a2578063b404d95911610071578063b404d95914610222578063b56527bd14610235578063b61f8d0514610248578063d3f051351461025b578063d74fff4e1461026e57600080fd5b8063643abb86146101d657806377269e29146101e9578063798af720146101fc5780638a311c571461020f57600080fd5b8063357b32f0116100de578063357b32f01461017d5780634d7602441461019057806354681c41146101b057806357c9ee3e146101c357600080fd5b806304b70f0a1461011057806305023d2c146101365780630c8b2216146101495780633214b8c91461016a575b600080fd5b61012361011e3660046148ad565b610281565b6040519081526020015b60405180910390f35b61012361014436600461479d565b610a5c565b61015c61015736600461495d565b610d13565b60405161012d929190614e60565b610123610178366004614b76565b610f55565b61012361018b366004614d5c565b611173565b6101a361019e366004614c57565b6113d3565b60405161012d9190614e4d565b6101236101be366004614abf565b6117c0565b6101236101d1366004614a58565b6119ca565b6101236101e436600461495d565b61210f565b6101236101f7366004614810565b612438565b61012361020a366004614d0b565b612625565b61012361021d366004614b76565b6126b1565b61015c61023036600461499e565b6129a3565b610123610243366004614bc9565b6131b8565b610123610256366004614cb9565b61369b565b610123610269366004614b12565b6138db565b61012361027c366004614bc9565b613d31565b600080886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bd57600080fd5b505afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190614780565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561033257600080fd5b505afa158015610346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036a9190614780565b9050886001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd9190614dc0565b8751146104315760405162461bcd60e51b815260206004820152601860248201527f696e76616c696442617365416d6f756e74734c656e677468000000000000000060448201526064015b60405180910390fd5b896001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b15801561046a57600080fd5b505afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a29190614dc0565b8851146104f15760405162461bcd60e51b815260206004820152601860248201527f696e76616c69644d657461416d6f756e74734c656e67746800000000000000006044820152606401610428565b6000805b88518160ff161015610608576000898260ff16815181106105185761051861505c565b6020026020010151905060008111156105f55760405162415c3360e91b815260ff83166004820152600193506000906001600160a01b038e16906382b866009060240160206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190614780565b905060006105ba82338561413f565b90506105d06001600160a01b0383168f83614255565b808c8560ff16815181106105e6576105e661505c565b60200260200101818152505050505b508061060081615026565b9150506104f5565b506000811561069757604051634d49e87d60e01b81526001600160a01b038c1690634d49e87d90610642908c906000908b90600401614ea9565b602060405180830381600087803b15801561065c57600080fd5b505af1158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190614dc0565b90505b60005b8a518160ff1610156107f05760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b866009060240160206040518083038186803b1580156106ea57600080fd5b505afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190614780565b90506000856001600160a01b0316826001600160a01b03161415610747575082610796565b60008d8460ff168151811061075e5761075e61505c565b602002602001015111156107965761079382338f8660ff16815181106107865761078661505c565b602002602001015161413f565b90505b808d8460ff16815181106107ac576107ac61505c565b602090810291909101015280156107db576107db8f82846001600160a01b03166142559092919063ffffffff16565b505080806107e890615026565b91505061069a565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190614dc0565b604051634d49e87d60e01b81529091506001600160a01b038e1690634d49e87d9061089e908e908d908c90600401614ea9565b602060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190614dc0565b5082156109bb576040516370a0823160e01b8152306004820152819083906001600160a01b038716906370a082319060240160206040518083038186803b15801561093a57600080fd5b505afa15801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109729190614dc0565b61097c9190614fcb565b146109bb5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a5910985cd9541bdbdb608a1b6044820152606401610428565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a082319060240160206040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190614dc0565b9050610a4b6001600160a01b0387168a8361434f565b9d9c50505050505050505050505050565b600080866001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190614780565b905060005b86518160ff161015610bf25760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b866009060240160206040518083038186803b158015610b2557600080fd5b505afa158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190614780565b9050600080898460ff1681518110610b7757610b7761505c565b60200260200101511115610ba257610b9f82338b8660ff16815181106107865761078661505c565b90505b80898460ff1681518110610bb857610bb861505c565b60209081029190910101528015610bdd57610bdd6001600160a01b0383168b83614255565b50508080610bea90615026565b915050610ad5565b50604051634d49e87d60e01b81526001600160a01b03881690634d49e87d90610c2390899089908890600401614ea9565b602060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190614dc0565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015610cb857600080fd5b505afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf09190614dc0565b9050610d066001600160a01b038316868361434f565b9150505b95945050505050565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5157600080fd5b505afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918816906366c0bd249060240160206040518083038186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190614dd9565b60405163797d695b60e11b8152600481018790529091506001600160a01b0388169063f2fad2b69060240160006040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8791908101906146cc565b93506000848260ff1681518110610ea057610ea061505c565b602002602001015190506000858360ff1681518110610ec157610ec161505c565b602090810291909101015260405163797d695b60e11b8152600481018290526001600160a01b0388169063f2fad2b69060240160006040518083038186803b158015610f0c57600080fd5b505afa158015610f20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f4891908101906146cc565b9350505050935093915050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9157600080fd5b505afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd249060240160206040518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190614dd9565b90508360ff808316908816146110e45760405163a95b089f60e01b815260ff808916600483015283166024820152604481018690526001600160a01b038a169063a95b089f9060640160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190614dc0565b90505b60405163342a87a160e01b81526004810182905260ff871660248201526001600160a01b0389169063342a87a1906044015b60206040518083038186803b15801561112e57600080fd5b505afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190614dc0565b9998505050505050505050565b60405162415c3360e91b815260ff8716600482015260009081906001600160a01b038a16906382b866009060240160206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190614780565b90506112086001600160a01b038216333089614384565b61121c6001600160a01b0382168a88614255565b6040516348b4aac360e11b815260ff808a166004830152881660248201526044810187905260648101869052608481018490526001600160a01b038a169063916955869060a401602060405180830381600087803b15801561127d57600080fd5b505af1158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b59190614dc0565b5060405162415c3360e91b815260ff881660048201526000906001600160a01b038b16906382b866009060240160206040518083038186803b1580156112fa57600080fd5b505afa15801561130e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113329190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561137757600080fd5b505afa15801561138b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113af9190614dc0565b90506113c56001600160a01b038316878361434f565b9a9950505050505050505050565b60606000866001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561141057600080fd5b505afa158015611424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114489190614780565b905061145f6001600160a01b038216333089614384565b6114736001600160a01b0382168888614255565b60405163031cd52b60e41b81526001600160a01b038816906331cd52b0906114a390899089908890600401614f4f565b600060405180830381600087803b1580156114bd57600080fd5b505af11580156114d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114f991908101906146cc565b50866001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b15801561153357600080fd5b505afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b9190614dc0565b6001600160401b0381111561158257611582615072565b6040519080825280602002602001820160405280156115ab578160200160208202803683370190505b50915060005b876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ea57600080fd5b505afa1580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116229190614dc0565b8160ff1610156117b55760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b866009060240160206040518083038186803b15801561167057600080fd5b505afa158015611684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a89190614780565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b1580156116ea57600080fd5b505afa1580156116fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117229190614dc0565b848360ff16815181106117375761173761505c565b6020026020010181815250506000848360ff168151811061175a5761175a61505c565b602002602001015111156117a2576117a286858460ff16815181106117815761178161505c565b6020026020010151836001600160a01b031661434f9092919063ffffffff16565b50806117ad81615026565b9150506115b1565b505095945050505050565b600080846001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156117fc57600080fd5b505afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918816906366c0bd249060240160206040518083038186803b15801561187b57600080fd5b505afa15801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b39190614dd9565b60405163342a87a160e01b81526004810187905260ff821660248201529091506000906001600160a01b0389169063342a87a19060440160206040518083038186803b15801561190257600080fd5b505afa158015611916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193a9190614dc0565b60405163342a87a160e01b81526004810182905260ff871660248201529091506001600160a01b0388169063342a87a19060440160206040518083038186803b15801561198657600080fd5b505afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190614dc0565b98975050505050505050565b600080876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0657600080fd5b505afa158015611a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3e9190614dc0565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7b57600080fd5b505afa158015611a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab39190614dc0565b9050876001600160a01b0316896001600160a01b03161415611b0b5760405162461bcd60e51b8152602060048201526011602482015270199c9bdb541bdbdb080f481d1bd41bdbdb607a1b6044820152606401610428565b808214611b5a5760405162461bcd60e51b815260206004820152601960248201527f706f6f6c546f6b656e734c656e6774684d6973736d61746368000000000000006044820152606401610428565b6000896001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9557600080fd5b505afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd9190614780565b90506000896001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0a57600080fd5b505afa158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190614780565b90506000846001600160401b03811115611c5e57611c5e615072565b604051908082528060200260200182016040528015611c87578160200160208202803683370190505b50905060005b858160ff161015611da65760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b866009060240160206040518083038186803b158015611cdc57600080fd5b505afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d149190614780565b6040516319b02f4960e21b81526001600160a01b038083166004830152919250908e16906366c0bd249060240160206040518083038186803b158015611d5957600080fd5b505afa158015611d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d919190614dd9565b50508080611d9e90615026565b915050611c8d565b50611dbc6001600160a01b03841633308d614384565b611dd06001600160a01b0384168d8c614255565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090611e00908d9085908c90600401614f4f565b600060405180830381600087803b158015611e1a57600080fd5b505af1158015611e2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e5691908101906146cc565b506000846001600160401b03811115611e7157611e71615072565b604051908082528060200260200182016040528015611e9a578160200160208202803683370190505b50905060005b858160ff161015611ffb5760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b866009060240160206040518083038186803b158015611eef57600080fd5b505afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015611f6c57600080fd5b505afa158015611f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa49190614dc0565b9050611fc48f82846001600160a01b03166142559092919063ffffffff16565b80848460ff1681518110611fda57611fda61505c565b60200260200101818152505050508080611ff390615026565b915050611ea0565b50604051634d49e87d60e01b81526001600160a01b038d1690634d49e87d9061202c9084908e908d90600401614ea9565b602060405180830381600087803b15801561204657600080fd5b505af115801561205a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207e9190614dc0565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b1580156120c157600080fd5b505afa1580156120d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f99190614dc0565b9050610a4b6001600160a01b0385168b8361434f565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121839190614dc0565b60405163797d695b60e11b8152600481018590529091506000906001600160a01b0387169063f2fad2b69060240160006040518083038186803b1580156121c957600080fd5b505afa1580156121dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261220591908101906146cc565b90506000826001600160401b0381111561222157612221615072565b60405190808252806020026020018201604052801561224a578160200160208202803683370190505b50905060005b838160ff1610156123ab5760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b866009060240160206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d79190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918a16906366c0bd249060240160206040518083038186803b15801561231e57600080fd5b505afa158015612332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123569190614dd9565b60ff169050848360ff16815181106123705761237061505c565b602002602001015184828151811061238a5761238a61505c565b602002602001018181525050505080806123a390615026565b915050612250565b50604051637355940360e11b81526001600160a01b0387169063e6ab2806906123db908490600190600401614e85565b60206040518083038186803b1580156123f357600080fd5b505afa158015612407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242b9190614dc0565b93505050505b9392505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561247457600080fd5b505afa158015612488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ac9190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd249060240160206040518083038186803b1580156124f357600080fd5b505afa158015612507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252b9190614dd9565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b815260040161255d929190614e85565b60206040518083038186803b15801561257557600080fd5b505afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad9190614dc0565b905080878360ff16815181106125c5576125c561505c565b60200260200101516125d79190614fcb565b878360ff16815181106125ec576125ec61505c565b6020908102919091010152604051637355940360e11b81526001600160a01b038a169063e6ab280690611116908a908990600401614e85565b60405163a95b089f60e01b815260ff808516600483015283166024820152604481018290526000906001600160a01b0386169063a95b089f9060640160206040518083038186803b15801561267957600080fd5b505afa15801561268d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190614dc0565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ed57600080fd5b505afa158015612701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127259190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd249060240160206040518083038186803b15801561276c57600080fd5b505afa158015612780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a49190614dd9565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156127e157600080fd5b505afa1580156127f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128199190614dc0565b6001600160401b0381111561283057612830615072565b604051908082528060200260200182016040528015612859578160200160208202803683370190505b50905084818860ff16815181106128725761287261505c565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab2806906128af908590600190600401614e85565b60206040518083038186803b1580156128c757600080fd5b505afa1580156128db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ff9190614dc0565b90508660ff168360ff16141561291a579350610d0a92505050565b60405163a95b089f60e01b815260ff808516600483015288166024820152604481018290526001600160a01b038b169063a95b089f9060640160206040518083038186803b15801561296b57600080fd5b505afa15801561297f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c59190614dc0565b60608060008b6001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a199190614780565b905060008b6001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015612a5657600080fd5b505afa158015612a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8e9190614780565b9050612aa56001600160a01b03831633308e614384565b612ab96001600160a01b0383168e8d614255565b60405163031cd52b60e41b81526001600160a01b038e16906331cd52b090612aeb908e908e908e908b90600401614f01565b600060405180830381600087803b158015612b0557600080fd5b505af1158015612b19573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b4191908101906146cc565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015612b8457600080fd5b505afa158015612b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bbc9190614dc0565b9050612bd26001600160a01b0383168e83614255565b60405163031cd52b60e41b81526001600160a01b038e16906331cd52b090612c049084908d908d908c90600401614f01565b600060405180830381600087803b158015612c1e57600080fd5b505af1158015612c32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c5a91908101906146cc565b508d6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612c9457600080fd5b505afa158015612ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccc9190614dc0565b6001600160401b03811115612ce357612ce3615072565b604051908082528060200260200182016040528015612d0c578160200160208202803683370190505b50945060005b8e6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4b57600080fd5b505afa158015612d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d839190614dc0565b8160ff161015612f005760008f6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401612dc4919060ff91909116815260200190565b60206040518083038186803b158015612ddc57600080fd5b505afa158015612df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e149190614780565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b158015612e5657600080fd5b505afa158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190614dc0565b878360ff1681518110612ea357612ea361505c565b6020026020010181815250506000878360ff1681518110612ec657612ec661505c565b60200260200101511115612eed57612eed89888460ff16815181106117815761178161505c565b5080612ef881615026565b915050612d12565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612f3a57600080fd5b505afa158015612f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f729190614dc0565b6001600160401b03811115612f8957612f89615072565b604051908082528060200260200182016040528015612fb2578160200160208202803683370190505b50935060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612ff157600080fd5b505afa158015613005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130299190614dc0565b8160ff1610156131a65760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b815260040161306a919060ff91909116815260200190565b60206040518083038186803b15801561308257600080fd5b505afa158015613096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ba9190614780565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b1580156130fc57600080fd5b505afa158015613110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131349190614dc0565b868360ff16815181106131495761314961505c565b6020026020010181815250506000868360ff168151811061316c5761316c61505c565b602002602001015111156131935761319389878460ff16815181106117815761178161505c565b508061319e81615026565b915050612fb8565b50505050995099975050505050505050565b600080886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156131f457600080fd5b505afa158015613208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322c9190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918c16906366c0bd249060240160206040518083038186803b15801561327357600080fd5b505afa158015613287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ab9190614dd9565b905060008a6001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b1580156132e857600080fd5b505afa1580156132fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133209190614dc0565b6001600160401b0381111561333757613337615072565b604051908082528060200260200182016040528015613360578160200160208202803683370190505b50905087818b60ff16815181106133795761337961505c565b602090810291909101015260405162415c3360e91b815260ff8b1660048201526000906001600160a01b038d16906382b866009060240160206040518083038186803b1580156133c857600080fd5b505afa1580156133dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134009190614780565b90506134176001600160a01b03821633308c614384565b61342b6001600160a01b0382168d8b614255565b604051634d49e87d60e01b81526000906001600160a01b038e1690634d49e87d9061345e90869085908c90600401614ea9565b602060405180830381600087803b15801561347857600080fd5b505af115801561348c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b09190614dc0565b90508a60ff168460ff161461356e576134d36001600160a01b0386168f83614255565b6040516348b4aac360e11b815260ff80861660048301528c16602482015260448101829052606481018a9052608481018890526001600160a01b038f169063916955869060a401602060405180830381600087803b15801561353457600080fd5b505af1158015613548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356c9190614dc0565b505b60008e6001600160a01b03166382b866008d6040518263ffffffff1660e01b81526004016135a5919060ff91909116815260200190565b60206040518083038186803b1580156135bd57600080fd5b505afa1580156135d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f59190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561363a57600080fd5b505afa15801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136729190614dc0565b90506136886001600160a01b0383168b8361434f565b9f9e505050505050505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156136d757600080fd5b505afa1580156136eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370f9190614780565b90506137266001600160a01b03821633308a614384565b61373a6001600160a01b0382168989614255565b6040516301f1d0ab60e51b81526004810188905260ff8716602482015260448101869052606481018490526001600160a01b03891690633e3a156090608401602060405180830381600087803b15801561379357600080fd5b505af11580156137a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cb9190614dc0565b5060405162415c3360e91b815260ff871660048201526000906001600160a01b038a16906382b866009060240160206040518083038186803b15801561381057600080fd5b505afa158015613824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138489190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561388d57600080fd5b505afa1580156138a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c59190614dc0565b90506111666001600160a01b038316878361434f565b600080886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561391757600080fd5b505afa15801561392b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394f9190614780565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561398c57600080fd5b505afa1580156139a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c49190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918c16906366c0bd249060240160206040518083038186803b158015613a0b57600080fd5b505afa158015613a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a439190614dd9565b9050613a5a6001600160a01b03841633308c614384565b613a6e6001600160a01b0384168c8b614255565b6040516301f1d0ab60e51b8152600481018a905260ff8216602482015260006044820152606481018690526001600160a01b038c1690633e3a156090608401602060405180830381600087803b158015613ac757600080fd5b505af1158015613adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aff9190614dc0565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015613b4257600080fd5b505afa158015613b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7a9190614dc0565b9050613b906001600160a01b0384168c83614255565b6040516301f1d0ab60e51b81526004810182905260ff8a16602482015260448101899052606481018790526001600160a01b038c1690633e3a156090608401602060405180830381600087803b158015613be957600080fd5b505af1158015613bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c219190614dc0565b5060405162415c3360e91b815260ff8a1660048201526000906001600160a01b038d16906382b866009060240160206040518083038186803b158015613c6657600080fd5b505afa158015613c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9e9190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015613ce357600080fd5b505afa158015613cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1b9190614dc0565b9050610a4b6001600160a01b0383168a8361434f565b600080886001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015613d6d57600080fd5b505afa158015613d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613da59190614780565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918c16906366c0bd249060240160206040518083038186803b158015613dec57600080fd5b505afa158015613e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e249190614dd9565b60405162415c3360e91b815260ff8b1660048201529091506000906001600160a01b038d16906382b866009060240160206040518083038186803b158015613e6b57600080fd5b505afa158015613e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea39190614780565b9050613eba6001600160a01b03821633308b614384565b8760ff838116908c1614613f7857613edc6001600160a01b0383168e8b614255565b6040516348b4aac360e11b815260ff808d16600483015284166024820152604481018a905260006064820152608481018790526001600160a01b038e169063916955869060a401602060405180830381600087803b158015613f3d57600080fd5b505af1158015613f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f759190614dc0565b90505b613f8c6001600160a01b0385168d83614255565b6040516301f1d0ab60e51b81526004810182905260ff8b16602482015260448101899052606481018790526001600160a01b038d1690633e3a156090608401602060405180830381600087803b158015613fe557600080fd5b505af1158015613ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401d9190614dc0565b5060405162415c3360e91b815260ff8b1660048201526000906001600160a01b038e16906382b866009060240160206040518083038186803b15801561406257600080fd5b505afa158015614076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409a9190614780565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156140df57600080fd5b505afa1580156140f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141179190614dc0565b905061412d6001600160a01b0383168a8361434f565b9e9d5050505050505050505050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a082319060240160206040518083038186803b15801561418357600080fd5b505afa158015614197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141bb9190614dc0565b90506141d26001600160a01b038616853086614384565b6040516370a0823160e01b815230600482015281906001600160a01b038716906370a082319060240160206040518083038186803b15801561421357600080fd5b505afa158015614227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061424b9190614dc0565b610d0a9190614fe3565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156142a157600080fd5b505afa1580156142b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d99190614dc0565b6142e39190614fcb565b6040516001600160a01b03851660248201526044810182905290915061434990859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143bc565b50505050565b6040516001600160a01b03831660248201526044810182905261437f90849063a9059cbb60e01b90606401614312565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526143499085906323b872dd60e01b90608401614312565b6000614411826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661448e9092919063ffffffff16565b80519091501561437f578080602001905181019061442f9190614763565b61437f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610428565b606061449d84846000856144a5565b949350505050565b6060824710156145065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610428565b6001600160a01b0385163b61455d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610428565b600080866001600160a01b031685876040516145799190614e31565b60006040518083038185875af1925050503d80600081146145b6576040519150601f19603f3d011682016040523d82523d6000602084013e6145bb565b606091505b50915091506145cb8282866145d6565b979650505050505050565b606083156145e5575081612431565b8251156145f55782518084602001fd5b8160405162461bcd60e51b81526004016104289190614ece565b60008083601f84011261462157600080fd5b5081356001600160401b0381111561463857600080fd5b6020830191508360208260051b850101111561465357600080fd5b9250929050565b600082601f83011261466b57600080fd5b8135602061468061467b83614fa8565b614f78565b80838252828201915082860187848660051b89010111156146a057600080fd5b60005b858110156146bf578135845292840192908401906001016146a3565b5090979650505050505050565b600060208083850312156146df57600080fd5b82516001600160401b038111156146f557600080fd5b8301601f8101851361470657600080fd5b805161471461467b82614fa8565b80828252848201915084840188868560051b870101111561473457600080fd5b600094505b83851015614757578051835260019490940193918501918501614739565b50979650505050505050565b60006020828403121561477557600080fd5b8151612431816150a0565b60006020828403121561479257600080fd5b815161243181615088565b600080600080600060a086880312156147b557600080fd5b85356147c081615088565b945060208601356001600160401b038111156147db57600080fd5b6147e78882890161465a565b9450506040860135925060608601356147ff81615088565b949793965091946080013592915050565b600080600080600060a0868803121561482857600080fd5b853561483381615088565b9450602086013561484381615088565b935060408601356001600160401b038082111561485f57600080fd5b61486b89838a0161465a565b9450606088013591508082111561488157600080fd5b5061488e8882890161465a565b925050608086013561489f816150a0565b809150509295509295909350565b600080600080600080600060e0888a0312156148c857600080fd5b87356148d381615088565b965060208801356148e381615088565b955060408801356001600160401b03808211156148ff57600080fd5b61490b8b838c0161465a565b965060608a013591508082111561492157600080fd5b5061492e8a828b0161465a565b9450506080880135925060a088013561494681615088565b8092505060c0880135905092959891949750929550565b60008060006060848603121561497257600080fd5b833561497d81615088565b9250602084013561498d81615088565b929592945050506040919091013590565b600080600080600080600080600060e08a8c0312156149bc57600080fd5b89356149c781615088565b985060208a01356149d781615088565b975060408a0135965060608a01356001600160401b03808211156149fa57600080fd5b614a068d838e0161460f565b909850965060808c0135915080821115614a1f57600080fd5b50614a2c8c828d0161460f565b90955093505060a08a0135614a4081615088565b8092505060c08a013590509295985092959850929598565b60008060008060008060c08789031215614a7157600080fd5b8635614a7c81615088565b95506020870135614a8c81615088565b945060408701359350606087013592506080870135614aaa81615088565b8092505060a087013590509295509295509295565b60008060008060808587031215614ad557600080fd5b8435614ae081615088565b93506020850135614af081615088565b9250604085013591506060850135614b07816150ae565b939692955090935050565b600080600080600080600060e0888a031215614b2d57600080fd5b8735614b3881615088565b96506020880135614b4881615088565b9550604088013594506060880135614b5f816150ae565b93506080880135925060a088013561494681615088565b600080600080600060a08688031215614b8e57600080fd5b8535614b9981615088565b94506020860135614ba981615088565b93506040860135614bb9816150ae565b925060608601356147ff816150ae565b600080600080600080600080610100898b031215614be657600080fd5b8835614bf181615088565b97506020890135614c0181615088565b96506040890135614c11816150ae565b95506060890135614c21816150ae565b94506080890135935060a0890135925060c0890135614c3f81615088565b8092505060e089013590509295985092959890939650565b600080600080600060a08688031215614c6f57600080fd5b8535614c7a81615088565b94506020860135935060408601356001600160401b03811115614c9c57600080fd5b614ca88882890161465a565b93505060608601356147ff81615088565b60008060008060008060c08789031215614cd257600080fd5b8635614cdd81615088565b9550602087013594506040870135614cf4816150ae565b9350606087013592506080870135614aaa81615088565b60008060008060808587031215614d2157600080fd5b8435614d2c81615088565b93506020850135614d3c816150ae565b92506040850135614d4c816150ae565b9396929550929360600135925050565b600080600080600080600060e0888a031215614d7757600080fd5b8735614d8281615088565b96506020880135614d92816150ae565b95506040880135614da2816150ae565b9450606088013593506080880135925060a088013561494681615088565b600060208284031215614dd257600080fd5b5051919050565b600060208284031215614deb57600080fd5b8151612431816150ae565b600081518084526020808501945080840160005b83811015614e2657815187529582019590820190600101614e0a565b509495945050505050565b60008251614e43818460208701614ffa565b9190910192915050565b6020815260006124316020830184614df6565b604081526000614e736040830185614df6565b8281036020840152610d0a8185614df6565b604081526000614e986040830185614df6565b905082151560208301529392505050565b606081526000614ebc6060830186614df6565b60208301949094525060400152919050565b6020815260008251806020840152614eed816040850160208701614ffa565b601f01601f19169190910160400192915050565b848152606060208201819052810183905260006001600160fb1b03841115614f2857600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b838152606060208201526000614f686060830185614df6565b9050826040830152949350505050565b604051601f8201601f191681016001600160401b0381118282101715614fa057614fa0615072565b604052919050565b60006001600160401b03821115614fc157614fc1615072565b5060051b60200190565b60008219821115614fde57614fde615046565b500190565b600082821015614ff557614ff5615046565b500390565b60005b83811015615015578181015183820152602001614ffd565b838111156143495750506000910152565b600060ff821660ff81141561503d5761503d615046565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461509d57600080fd5b50565b801515811461509d57600080fd5b60ff8116811461509d57600080fdfea2646970667358221220ff0ef0ff03595fb70472d149848605f67b198c51218043136bde3e635dd9986564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}