{
  "address": "0xF135CFa32fE1843eB624587e15e66B469dC44e11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WNativeCurrency",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WNativeCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "fromIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "toIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeCurrencyForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ISwapRouterV1.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeCurrencyForTokensThroughStablePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNativeCurrency",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ISwapRouterV1.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNativeCurrencyThroughStablePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ISwapRouterV1.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensThroughStablePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapNativeCurrencyForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "fromIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "toIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapPoolFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapPoolToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactNativeCurrency",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa3d3dcfe1ffc6ca5cba14625f8871d4da93127c2941319158d2346ba72de7f5d",
  "receipt": {
    "to": null,
    "from": "0x0597EB296eFbb84CA64C843a7F80d7F8Bff7d17d",
    "contractAddress": "0xF135CFa32fE1843eB624587e15e66B469dC44e11",
    "transactionIndex": 2,
    "gasUsed": "3951931",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6fdec9ae042ce66a08fa3d7527c0f6bbca203690739270f221c616de0cf1ffd0",
    "transactionHash": "0xa3d3dcfe1ffc6ca5cba14625f8871d4da93127c2941319158d2346ba72de7f5d",
    "logs": [],
    "blockNumber": 2782207,
    "cumulativeGasUsed": "3995037",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6ED3E6551Bb396091C15a9621aACa6DdB1C01992",
    "0x674421E9567653EE76e96fEEA3B2B2966d000Dbd"
  ],
  "numDeployments": 1,
  "solcInputHash": "007aa94c81b3bc67ae48537a63ee475f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WNativeCurrency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WNativeCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeCurrencyForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ISwapRouterV1.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeCurrencyForTokensThroughStablePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNativeCurrency\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ISwapRouterV1.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNativeCurrencyThroughStablePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ISwapRouterV1.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensThroughStablePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapNativeCurrencyForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapPoolFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapPoolToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactNativeCurrency\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/SwapRouterV1.sol\":\"SwapRouterV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n    event PairCreateLocked(\\n        address indexed caller\\n    );\\n    event PairCreateUnlocked(\\n        address indexed caller\\n    );\\n    event BootstrapSetted(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address indexed bootstrap\\n    );\\n    event FeetoUpdated(\\n        address indexed feeto\\n    );\\n    event FeeBasePointUpdated(\\n        uint8 basePoint\\n    );\\n\\n    function feeto() external view returns (address);\\n\\n    function feeBasePoint() external view returns (uint8);\\n\\n    function lockForPairCreate() external view returns (bool);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n    \\n    function getBootstrap(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address bootstrap);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0x211140634ad85da83e50e8623d7fd7aeff89fb1fd472e2a8bec7927c416b3bf9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPair {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x384acf5ee76958b02b75d074934d79e0e6d0b5fcdb8a5f63752996cb4de7bffa\",\"license\":\"MIT\"},\"contracts/libraries/Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"../core/interfaces/IPair.sol\\\";\\nimport \\\"../core/interfaces/IFactory.sol\\\";\\n\\nlibrary Helper {\\n    using Math for uint256;\\n\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Helper: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Helper: ZERO_ADDRESS\\\");\\n    }\\n\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        return IFactory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPair(\\n            pairFor(factory, tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferNativeCurrency(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferNativeCurrency: NativeCurrency transfer failed\\\"\\n        );\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"Helper: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"Helper: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"Helper: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"Helper: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"Helper: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"Helper: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48c51fc09136856361337a0edc7295ab91b9c5a61c45aa1e4c44c63762dff3c5\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdaf217d097cd3962ad38fdeaab113dc3dddf1f65bc45ecf3a5b0a0487c0a2092\",\"license\":\"MIT\"},\"contracts/periphery/SwapRouterV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IWNativeCurrency.sol\\\";\\nimport \\\"./interfaces/ISwapRouterV1.sol\\\";\\nimport \\\"../stableswap/interfaces/IStableSwap.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"../libraries/Helper.sol\\\";\\n\\ncontract SwapRouterV1 is ISwapRouterV1 {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    struct StablePath {\\n        IStableSwap pool;\\n        IStableSwap basePool;\\n        address fromToken;\\n        address toToken;\\n        bool fromBase;\\n    }\\n\\n    address public override factory;\\n    address public override WNativeCurrency;\\n\\n    constructor(address _factory, address _WNativeCurrency) {\\n        factory = _factory;\\n        WNativeCurrency = _WNativeCurrency;\\n    }\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"SwapRouterV1: EXPIRED\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == WNativeCurrency);\\n    }\\n\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) private {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = Helper.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? Helper.pairFor(factory, output, path[i + 2])\\n                : _to;\\n            IPair(Helper.pairFor(factory, input, output)).swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = Helper.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Helper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            Helper.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"SwapRouterV1: EXCESSIVE_INPUT_AMOUNT\\\");\\n        Helper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            Helper.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapExactNativeCurrencyForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[0] == WNativeCurrency, \\\"SwapRouterV1: INVALID_PATH\\\");\\n        amounts = Helper.getAmountsOut(factory, msg.value, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\\n        require(\\n            IERC20(WNativeCurrency).transfer(\\n                Helper.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapTokensForExactNativeCurrency(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\\n        require(\\n            path[path.length - 1] == WNativeCurrency,\\n            \\\"SwapRouterV1: INVALID_PATH\\\"\\n        );\\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"SwapRouterV1: EXCESSIVE_INPUT_AMOUNT\\\");\\n        Helper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            Helper.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWNativeCurrency(WNativeCurrency).withdraw(amounts[amounts.length - 1]);\\n        Helper.safeTransferNativeCurrency(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForNativeCurrency(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\\n        require(\\n            path[path.length - 1] == WNativeCurrency,\\n            \\\"SwapRouterV1: INVALID_PATH\\\"\\n        );\\n        amounts = Helper.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Helper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            Helper.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWNativeCurrency(WNativeCurrency).withdraw(amounts[amounts.length - 1]);\\n        Helper.safeTransferNativeCurrency(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapNativeCurrencyForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[0] == WNativeCurrency, \\\"SwapRouterV1: INVALID_PATH\\\");\\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= msg.value, \\\"SwapRouterV1: EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\\n        require(\\n            IERC20(WNativeCurrency).transfer(\\n                Helper.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, path, to);\\n        if (msg.value > amounts[0]) {\\n            Helper.safeTransferNativeCurrency(\\n                msg.sender,\\n                msg.value - amounts[0]\\n            );\\n        }\\n    }\\n\\n    function _swapPool(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        uint256 deadline\\n    ) private returns (uint256 amountOut) {\\n        IERC20 coin = pool.getToken(fromIndex);\\n        coin.safeIncreaseAllowance(address(pool), inAmount);\\n        amountOut = pool.swap(fromIndex, toIndex, inAmount, minOutAmount, deadline);\\n    }\\n\\n    function _swapPoolFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) private returns (uint256 amountOut) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            amountOut = _swapPool(pool, baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, deadline);\\n        } else {\\n            amountOut = baseLpAmount;\\n        }\\n    }\\n\\n    function _swapPoolToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) private returns (uint256 amountOut) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = _swapPool(pool, tokenIndexFrom, baseTokenIndex, dx, 0, deadline);\\n        }\\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n        amountOut = basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n    }\\n\\n    function swapPool(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256 amountOut) {\\n        IERC20 coin = pool.getToken(fromIndex);\\n        coin.safeTransferFrom(msg.sender, address(this), inAmount);\\n        amountOut = _swapPool(pool, fromIndex, toIndex, inAmount, minOutAmount, deadline);\\n        IERC20 coinTo = pool.getToken(toIndex);\\n        coinTo.safeTransfer(to, amountOut);\\n    }\\n\\n    function swapPoolFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256 amountOut) {\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        amountOut = _swapPoolFromBase(pool, basePool, tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        coinTo.safeTransfer(to, amountOut);\\n    }\\n\\n    function swapPoolToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256 amountOut) {\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        amountOut = _swapPoolToBase(pool, basePool, tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        coinTo.safeTransfer(to, amountOut);\\n    }\\n\\n    function _anyStableSwap(\\n        uint256 amountIn,\\n        Route calldata route,\\n        uint256 deadline\\n    ) private returns (address tokenOut, uint256 amountOut) {\\n        StablePath memory path = _decodeStableSwapCallData(route.callData);\\n        tokenOut = path.toToken;\\n\\n        if (address(path.basePool) == address(0)) {\\n            amountOut = _swapPool(\\n                path.pool, \\n                path.pool.getTokenIndex(path.fromToken), \\n                path.pool.getTokenIndex(path.toToken), \\n                amountIn, \\n                0, \\n                deadline\\n            );\\n        } else if (path.fromBase) {\\n            amountOut = _swapPoolFromBase(\\n                path.pool, \\n                path.basePool, \\n                path.basePool.getTokenIndex(path.fromToken), \\n                path.pool.getTokenIndex(path.toToken), \\n                amountIn, \\n                0, \\n                deadline\\n            );\\n        } else {\\n            amountOut = _swapPoolToBase(\\n                path.pool,\\n                path.basePool,\\n                path.pool.getTokenIndex(path.fromToken), \\n                path.basePool.getTokenIndex(path.toToken), \\n                amountIn, \\n                0,\\n                deadline\\n            );\\n        }\\n    }\\n\\n    function _swapThroughStablePool(\\n        address tokenIn,\\n        uint256 amountIn,\\n        Route[] calldata routes,\\n        uint256 deadline\\n    ) private returns (address tokenOut, uint256 amountOut) {\\n        tokenOut = tokenIn;\\n        amountOut = amountIn;\\n\\n        for (uint256 i = 0; i < routes.length; i++) {\\n            if (routes[i].stable) {\\n               (tokenOut, amountOut) = _anyStableSwap(amountOut, routes[i], deadline);\\n            } else {\\n                address[] memory path = _decodeAmmCalldata(routes[i].callData);\\n                tokenOut = path[path.length - 1];\\n                uint256[] memory amounts = Helper.getAmountsOut(factory, amountOut, path);\\n                Helper.safeTransfer(\\n                    path[0], \\n                    Helper.pairFor(factory, path[0], path[1]),\\n                    amounts[0]\\n                );\\n                _swap(amounts, path, address(this));\\n                amountOut = amounts[amounts.length - 1];\\n            }\\n        }\\n    }\\n\\n    function swapExactTokensForTokensThroughStablePool(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256 amountOut) {\\n        address tokenIn;\\n        if (routes[0].stable) {\\n            tokenIn = _decodeStableSwapCallData(routes[0].callData).fromToken;\\n        } else {\\n            tokenIn = _decodeAmmCalldata(routes[0].callData)[0];\\n        }\\n\\n        Helper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\\n        address tokenOut;\\n        (tokenOut, amountOut) = _swapThroughStablePool(tokenIn, amountIn, routes, deadline);\\n        require(\\n            amountOut >= amountOutMin,\\n            \\\"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IERC20(tokenOut).safeTransfer(to, amountOut);\\n    }\\n\\n    function swapExactNativeCurrencyForTokensThroughStablePool(\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external override payable ensure(deadline) returns (uint256 amountOut) {\\n        require(!routes[0].stable, \\\"SwapRouterV1: INVALID_ROUTES\\\");\\n        address tokenIn = _decodeAmmCalldata(routes[0].callData)[0];\\n        require(tokenIn == WNativeCurrency, \\\"SwapRouterV1: INVALID_ROUTES\\\");\\n        IWNativeCurrency(WNativeCurrency).deposit{value: msg.value}();\\n        address tokenOut;\\n        (tokenOut, amountOut) = _swapThroughStablePool(tokenIn, msg.value, routes, deadline);\\n        require(\\n            amountOut >= amountOutMin,\\n            \\\"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IERC20(tokenOut).safeTransfer(to, amountOut);\\n    }\\n\\n    function swapExactTokensForNativeCurrencyThroughStablePool(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256 amountOut) {\\n        require(!routes[routes.length - 1].stable, \\\"SwapRouterV1: INVALID_ROUTES\\\");\\n        address[] memory tokenOutPath = _decodeAmmCalldata(routes[routes.length - 1].callData);\\n        require(tokenOutPath[tokenOutPath.length - 1] == WNativeCurrency, \\\"SwapRouterV1: INVALID_ROUTES\\\");\\n        address tokenIn;\\n        if (routes[0].stable) {\\n            tokenIn = _decodeStableSwapCallData(routes[0].callData).fromToken;\\n        } else {\\n            tokenIn = _decodeAmmCalldata(routes[0].callData)[0];\\n        }\\n        Helper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\\n        address tokenOut;\\n        (tokenOut, amountOut) = _swapThroughStablePool(tokenIn, amountIn, routes, deadline);\\n        require(\\n            amountOut >= amountOutMin,\\n            \\\"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IWNativeCurrency(WNativeCurrency).withdraw(amountOut);\\n        Helper.safeTransferNativeCurrency(to, amountOut);\\n    }\\n\\n    function _decodeAmmCalldata(bytes memory data) private pure returns (address[] memory path) {\\n        path = abi.decode(data, (address[]));\\n    }\\n\\n    function _decodeStableSwapCallData(bytes memory data) \\n        private \\n        pure \\n        returns (StablePath memory path) \\n    {\\n        (\\n            IStableSwap pool, \\n            IStableSwap basePool, \\n            address fromToken, \\n            address toToken, \\n            bool fromBase\\n        ) = abi.decode(data, (IStableSwap, IStableSwap, address, address, bool));\\n\\n        return StablePath(pool, basePool, fromToken, toToken, fromBase);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external override pure returns (uint256 amountOut) {\\n        return Helper.getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external override pure returns (uint256 amountIn) {\\n        return Helper.getAmountOut(amountOut, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path)\\n        external\\n        override\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        return Helper.getAmountsOut(factory, amountIn, path);\\n    }\\n\\n    function getAmountsIn(uint256 amountOut, address[] memory path)\\n        external\\n        override\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        return Helper.getAmountsIn(factory, amountOut, path);\\n    }\\n\\n    function calculateSwap(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount\\n    ) external override view returns (uint256) {\\n        return pool.calculateSwap(fromIndex, toIndex, inAmount);\\n    }\\n\\n    function calculateSwapFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external override view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function calculateSwapToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external override view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(tokenLPAmount, tokenIndexTo);\\n    }\\n}\\n\",\"keccak256\":\"0x67ff1dfdf89dcc5b642f147280784d3ad7f1a7b5ac242d7a8244417cec6c9414\",\"license\":\"MIT\"},\"contracts/periphery/interfaces/ISwapRouterV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../stableswap/interfaces/IStableSwap.sol\\\";\\n\\ninterface ISwapRouterV1 {\\n\\n    struct Route {\\n        bool stable;\\n        bytes callData; \\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function WNativeCurrency() external view returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactNativeCurrencyForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactNativeCurrency(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForNativeCurrency(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapNativeCurrencyForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapPool(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapPoolFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapPoolToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForTokensThroughStablePool(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeCurrencyForTokensThroughStablePool(\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNativeCurrencyThroughStablePool(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn, \\n        address[] memory path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut, \\n        address[] memory path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function calculateSwap(\\n        IStableSwap pool,\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256);\\n\\n    function calculateSwapFromBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateSwapToBase(\\n        IStableSwap pool,\\n        IStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4f22519fb36eb73bd37d8983a30cf80d473684e6d6ee6ec5f69bc2ead829966\",\"license\":\"MIT\"},\"contracts/periphery/interfaces/IWNativeCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWNativeCurrency {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xd2a854910e56d44598e03b476281c055bcd0a3bcb19977f414889d8137a04f00\",\"license\":\"MIT\"},\"contracts/stableswap/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x86c437195727727a42b37c6bfd9a233cec2c5b5a3730fa77542e549e2c1104e2\",\"license\":\"MIT\"},\"contracts/stableswap/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../LPToken.sol\\\";\\n\\ninterface IStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event FlashLoan(\\n        address indexed caller,\\n        address indexed receiver,\\n        uint256[] amounts_out\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 soldId,\\n        uint256 tokensSold,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            LPToken,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        uint256[] memory amountsOut,\\n        address to,\\n        bytes calldata data,\\n        uint256 deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdrawAdminFee() external;\\n}\\n\",\"keccak256\":\"0xa6fbab4b724f9264e156cc78ef4fb5998932462485f0592855b95d9939e94a73\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c80638803dbee116100ab578063c45a01551161006f578063c45a01551461032f578063cd1bd0d91461034f578063d06ca61f14610362578063d74fff4e14610382578063dcff1b94146103a2578063f85b7c8b146103c257600080fd5b80638803dbee1461029c5780638a311c57146102bc5780639be7614d146102dc5780639d9270a8146102ef578063b56527bd1461030f57600080fd5b8063419591ed116100f2578063419591ed146102115780634b1d08ca146102495780636dc9c4981461025c578063798af7201461027c57806385f8c2591461015157600080fd5b8063054d50d4146101515780631f00ca74146101845780633214b8c9146101b1578063357b32f0146101d157806338ed1739146101f157600080fd5b3661014c576001546001600160a01b0316331461014a57600080fd5b005b600080fd5b34801561015d57600080fd5b5061017161016c3660046140ed565b6103e2565b6040519081526020015b60405180910390f35b34801561019057600080fd5b506101a461019f366004613fcd565b6103f9565b60405161017b91906141b9565b3480156101bd57600080fd5b506101716101cc366004613d3f565b61041c565b3480156101dd57600080fd5b506101716101ec366004613e82565b61063b565b3480156101fd57600080fd5b506101a461020c36600461407a565b6107ab565b34801561021d57600080fd5b50600154610231906001600160a01b031681565b6040516001600160a01b03909116815260200161017b565b610171610257366004613f66565b61095c565b34801561026857600080fd5b5061017161027736600461407a565b610b4a565b34801561028857600080fd5b50610171610297366004613e31565b610de0565b3480156102a857600080fd5b506101a46102b736600461407a565b610e6c565b3480156102c857600080fd5b506101716102d7366004613d3f565b610f15565b6101a46102ea366004613f66565b611216565b3480156102fb57600080fd5b5061017161030a36600461407a565b611526565b34801561031b57600080fd5b5061017161032a366004613da3565b611637565b34801561033b57600080fd5b50600054610231906001600160a01b031681565b6101a461035d366004613f66565b6117a1565b34801561036e57600080fd5b506101a461037d366004613fcd565b611a3a565b34801561038e57600080fd5b5061017161039d366004613da3565b611a54565b3480156103ae57600080fd5b506101a46103bd36600461407a565b611b4d565b3480156103ce57600080fd5b506101a46103dd36600461407a565b611d78565b60006103ef848484611e87565b90505b9392505050565b600054606090610413906001600160a01b03168484611f8b565b90505b92915050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b15801561045857600080fd5b505afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190613bcd565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd249060240160206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190614119565b90508360ff808316908816146105ab5760405163a95b089f60e01b815260ff808916600483015283166024820152604481018690526001600160a01b038a169063a95b089f9060640160206040518083038186803b15801561057057600080fd5b505afa158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a89190613f4d565b90505b60405163342a87a160e01b81526004810182905260ff871660248201526001600160a01b0389169063342a87a19060440160206040518083038186803b1580156105f457600080fd5b505afa158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c9190613f4d565b93505050505b95945050505050565b600081428110156106675760405162461bcd60e51b815260040161065e906142a7565b60405180910390fd5b60405162415c3360e91b815260ff891660048201526000906001600160a01b038b16906382b866009060240160206040518083038186803b1580156106ab57600080fd5b505afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e39190613bcd565b90506106fa6001600160a01b03821633308a612118565b6107088a8a8a8a8a89612189565b60405162415c3360e91b815260ff8a1660048201529093506000906001600160a01b038c16906382b866009060240160206040518083038186803b15801561074f57600080fd5b505afa158015610763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107879190613bcd565b905061079d6001600160a01b03821687866122c2565b505050979650505050505050565b606081428110156107ce5760405162461bcd60e51b815260040161065e906142a7565b6000546040805160208089028281018201909352888252610818936001600160a01b0316928c92918b918b918291908501908490808284376000920191909152506122f792505050565b915086826001845161082a9190614489565b8151811061083a5761083a614514565b602002602001015110156108605760405162461bcd60e51b815260040161065e9061425f565b6109128686600081811061087657610876614514565b905060200201602081019061088b9190613bb0565b6000805433916108f2916001600160a01b0316908b908b90816108b0576108b0614514565b90506020020160208101906108c59190613bb0565b8b8b60018181106108d8576108d8614514565b90506020020160208101906108ed9190613bb0565b612464565b8560008151811061090557610905614514565b60200260200101516124e9565b61095182878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612627915050565b509695505050505050565b6000814281101561097f5760405162461bcd60e51b815260040161065e906142a7565b8585600081811061099257610992614514565b90506020028101906109a491906143c5565b6109b2906020810190613c90565b156109cf5760405162461bcd60e51b815260040161065e906142d6565b6000610a41878760008181106109e7576109e7614514565b90506020028101906109f991906143c5565b610a0790602081019061437e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061280292505050565b600081518110610a5357610a53614514565b60209081029190910101516001549091506001600160a01b03808316911614610a8e5760405162461bcd60e51b815260040161065e906142d6565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ade57600080fd5b505af1158015610af2573d6000803e3d6000fd5b50505050506000610b0682348a8a89612818565b9450905088841015610b2a5760405162461bcd60e51b815260040161065e9061425f565b610b3e6001600160a01b03821687866122c2565b50505095945050505050565b60008142811015610b6d5760405162461bcd60e51b815260040161065e906142a7565b8585610b7a600182614489565b818110610b8957610b89614514565b9050602002810190610b9b91906143c5565b610ba9906020810190613c90565b15610bc65760405162461bcd60e51b815260040161065e906142d6565b6000610be78787610bd8600182614489565b8181106109e7576109e7614514565b6001805482519293506001600160a01b0316918391610c0591614489565b81518110610c1557610c15614514565b60200260200101516001600160a01b031614610c435760405162461bcd60e51b815260040161065e906142d6565b600087876000818110610c5857610c58614514565b9050602002810190610c6a91906143c5565b610c78906020810190613c90565b15610cf857610ced88886000818110610c9357610c93614514565b9050602002810190610ca591906143c5565b610cb390602081019061437e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506129cf92505050565b604001519050610d2b565b610d0e888860008181106109e7576109e7614514565b600081518110610d2057610d20614514565b602002602001015190505b610d378133308d6124e9565b6000610d46828c8b8b8a612818565b9550905089851015610d6a5760405162461bcd60e51b815260040161065e9061425f565b600154604051632e1a7d4d60e01b8152600481018790526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015610db057600080fd5b505af1158015610dc4573d6000803e3d6000fd5b50505050610dd28786612a5a565b505050509695505050505050565b60405163a95b089f60e01b815260ff808516600483015283166024820152604481018290526000906001600160a01b0386169063a95b089f9060640160206040518083038186803b158015610e3457600080fd5b505afa158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190613f4d565b60608142811015610e8f5760405162461bcd60e51b815260040161065e906142a7565b6000546040805160208089028281018201909352888252610ed9936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611f8b92505050565b91508682600081518110610eef57610eef614514565b602002602001015111156108605760405162461bcd60e51b815260040161065e9061430d565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190613bcd565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd249060240160206040518083038186803b158015610fd057600080fd5b505afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190614119565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b15801561104557600080fd5b505afa158015611059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107d9190613f4d565b67ffffffffffffffff8111156110955761109561452a565b6040519080825280602002602001820160405280156110be578160200160208202803683370190505b50905084818860ff16815181106110d7576110d7614514565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab2806906111149085906001906004016141cc565b60206040518083038186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190613f4d565b90508660ff168360ff16141561117f57935061063292505050565b60405163a95b089f60e01b815260ff808516600483015288166024820152604481018290526001600160a01b038b169063a95b089f9060640160206040518083038186803b1580156111d057600080fd5b505afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190613f4d565b9a9950505050505050505050565b606081428110156112395760405162461bcd60e51b815260040161065e906142a7565b6001546001600160a01b0316868660008161125657611256614514565b905060200201602081019061126b9190613bb0565b6001600160a01b0316146112915760405162461bcd60e51b815260040161065e90614228565b60005460408051602080890282810182019093528882526112db936001600160a01b0316928b92918b918b91829190850190849080828437600092019190915250611f8b92505050565b915034826000815181106112f1576112f1614514565b602002602001015111156113175760405162461bcd60e51b815260040161065e9061430d565b60015482516001600160a01b039091169063d0e30db090849060009061133f5761133f614514565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561137257600080fd5b505af1158015611386573d6000803e3d6000fd5b5050600154600080546001600160a01b03928316955063a9059cbb94506113e59350909116908a908a90816113bd576113bd614514565b90506020020160208101906113d29190613bb0565b8a8a60018181106108d8576108d8614514565b846000815181106113f8576113f8614514565b60200260200101516040518363ffffffff1660e01b81526004016114319291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561144b57600080fd5b505af115801561145f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114839190613cad565b61148c57600080fd5b6114cb82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612627915050565b816000815181106114de576114de614514565b602002602001015134111561151c5761151c338360008151811061150457611504614514565b6020026020010151346115179190614489565b612a5a565b5095945050505050565b600081428110156115495760405162461bcd60e51b815260040161065e906142a7565b60008686600081811061155e5761155e614514565b905060200281019061157091906143c5565b61157e906020810190613c90565b156115a45761159987876000818110610c9357610c93614514565b6040015190506115d7565b6115ba878760008181106109e7576109e7614514565b6000815181106115cc576115cc614514565b602002602001015190505b6115e38133308c6124e9565b60006115f2828b8a8a89612818565b94509050888410156116165760405162461bcd60e51b815260040161065e9061425f565b61162a6001600160a01b03821687866122c2565b5050509695505050505050565b6000814281101561165a5760405162461bcd60e51b815260040161065e906142a7565b60405162415c3360e91b815260ff891660048201526000906001600160a01b038b16906382b866009060240160206040518083038186803b15801561169e57600080fd5b505afa1580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d69190613bcd565b90506116ed6001600160a01b03821633308a612118565b6116fc8b8b8b8b8b8b8a612b50565b60405162415c3360e91b815260ff8a1660048201529093506000906001600160a01b038d16906382b86600906024015b60206040518083038186803b15801561174457600080fd5b505afa158015611758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177c9190613bcd565b90506117926001600160a01b03821687866122c2565b50505098975050505050505050565b606081428110156117c45760405162461bcd60e51b815260040161065e906142a7565b6001546001600160a01b031686866000816117e1576117e1614514565b90506020020160208101906117f69190613bb0565b6001600160a01b03161461181c5760405162461bcd60e51b815260040161065e90614228565b6000546040805160208089028281018201909352888252611866936001600160a01b0316923492918b918b918291908501908490808284376000920191909152506122f792505050565b91508682600184516118789190614489565b8151811061188857611888614514565b602002602001015110156118ae5760405162461bcd60e51b815260040161065e9061425f565b60015482516001600160a01b039091169063d0e30db09084906000906118d6576118d6614514565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561190957600080fd5b505af115801561191d573d6000803e3d6000fd5b5050600154600080546001600160a01b03928316955063a9059cbb94506119549350909116908a908a90816113bd576113bd614514565b8460008151811061196757611967614514565b60200260200101516040518363ffffffff1660e01b81526004016119a09291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b1580156119ba57600080fd5b505af11580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190613cad565b6119fb57600080fd5b61151c82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612627915050565b600054606090610413906001600160a01b031684846122f7565b60008142811015611a775760405162461bcd60e51b815260040161065e906142a7565b60405162415c3360e91b815260ff891660048201526000906001600160a01b038c16906382b866009060240160206040518083038186803b158015611abb57600080fd5b505afa158015611acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af39190613bcd565b9050611b0a6001600160a01b03821633308a612118565b611b198b8b8b8b8b8b8a612e6c565b60405162415c3360e91b815260ff8a1660048201529093506000906001600160a01b038c16906382b866009060240161172c565b60608142811015611b705760405162461bcd60e51b815260040161065e906142a7565b600180546001600160a01b03169087908790611b8c9082614489565b818110611b9b57611b9b614514565b9050602002016020810190611bb09190613bb0565b6001600160a01b031614611bd65760405162461bcd60e51b815260040161065e90614228565b6000546040805160208089028281018201909352888252611c20936001600160a01b0316928c92918b918b918291908501908490808284376000920191909152506122f792505050565b9150868260018451611c329190614489565b81518110611c4257611c42614514565b60200260200101511015611c685760405162461bcd60e51b815260040161065e9061425f565b611c7e8686600081811061087657610876614514565b611cbd82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612627915050565b6001805483516001600160a01b0390911691632e1a7d4d918591611ce091614489565b81518110611cf057611cf0614514565b60200260200101516040518263ffffffff1660e01b8152600401611d1691815260200190565b600060405180830381600087803b158015611d3057600080fd5b505af1158015611d44573d6000803e3d6000fd5b50505050610951848360018551611d5b9190614489565b81518110611d6b57611d6b614514565b6020026020010151612a5a565b60608142811015611d9b5760405162461bcd60e51b815260040161065e906142a7565b600180546001600160a01b03169087908790611db79082614489565b818110611dc657611dc6614514565b9050602002016020810190611ddb9190613bb0565b6001600160a01b031614611e015760405162461bcd60e51b815260040161065e90614228565b6000546040805160208089028281018201909352888252611e4b936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611f8b92505050565b91508682600081518110611e6157611e61614514565b60200260200101511115611c685760405162461bcd60e51b815260040161065e9061430d565b6000808411611ee25760405162461bcd60e51b815260206004820152602160248201527f48656c7065723a20494e53554646494349454e545f494e5055545f414d4f554e6044820152601560fa1b606482015260840161065e565b600083118015611ef25750600082115b611f3e5760405162461bcd60e51b815260206004820152601e60248201527f48656c7065723a20494e53554646494349454e545f4c49515549444954590000604482015260640161065e565b6000611f4c856103e5613035565b90506000611f5a8285613035565b90506000611f7483611f6e886103e8613035565b9061309c565b9050611f808183614448565b979650505050505050565b6060600282511015611fd65760405162461bcd60e51b8152602060048201526014602482015273090cad8e0cae47440929cac82989288bea082a8960631b604482015260640161065e565b815167ffffffffffffffff811115611ff057611ff061452a565b604051908082528060200260200182016040528015612019578160200160208202803683370190505b50905082816001835161202c9190614489565b8151811061203c5761203c614514565b6020026020010181815250506000600183516120589190614489565b90505b8015612110576000806120ab8786612074600187614489565b8151811061208457612084614514565b602002602001015187868151811061209e5761209e614514565b60200260200101516130f1565b915091506120d38484815181106120c4576120c4614514565b602002602001015183836131ca565b846120df600186614489565b815181106120ef576120ef614514565b60200260200101818152505050508080612108906144cc565b91505061205b565b509392505050565b6040516001600160a01b03808516602483015283166044820152606481018290526121839085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526132c9565b50505050565b60405162415c3360e91b815260ff8616600482015260009081906001600160a01b038916906382b866009060240160206040518083038186803b1580156121cf57600080fd5b505afa1580156121e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122079190613bcd565b905061221d6001600160a01b038216898761339b565b6040516348b4aac360e11b815260ff8089166004830152871660248201526044810186905260648101859052608481018490526001600160a01b0389169063916955869060a401602060405180830381600087803b15801561227e57600080fd5b505af1158015612292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b69190613f4d565b98975050505050505050565b6040516001600160a01b0383166024820152604481018290526122f290849063a9059cbb60e01b9060640161214c565b505050565b60606002825110156123425760405162461bcd60e51b8152602060048201526014602482015273090cad8e0cae47440929cac82989288bea082a8960631b604482015260640161065e565b815167ffffffffffffffff81111561235c5761235c61452a565b604051908082528060200260200182016040528015612385578160200160208202803683370190505b509050828160008151811061239c5761239c614514565b60200260200101818152505060005b600183516123b99190614489565b811015612110576000806123ff878685815181106123d9576123d9614514565b6020026020010151878660016123ef9190614430565b8151811061209e5761209e614514565b9150915061242784848151811061241857612418614514565b60200260200101518383611e87565b84612433856001614430565b8151811061244357612443614514565b6020026020010181815250505050808061245c906144e3565b9150506123ab565b60405163e6a4390560e01b81526001600160a01b03838116600483015282811660248301526000919085169063e6a439059060440160206040518083038186803b1580156124b157600080fd5b505afa1580156124c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef9190613bcd565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161254d919061419d565b6000604051808303816000865af19150503d806000811461258a576040519150601f19603f3d011682016040523d82523d6000602084013e61258f565b606091505b50915091508180156125b95750805115806125b95750808060200190518101906125b99190613cad565b61261f5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b606482015260840161065e565b505050505050565b60005b600183516126389190614489565b8110156121835760008084838151811061265457612654614514565b60200260200101518584600161266a9190614430565b8151811061267a5761267a614514565b6020026020010151915091506000612692838361345c565b5090506000876126a3866001614430565b815181106126b3576126b3614514565b60200260200101519050600080836001600160a01b0316866001600160a01b0316146126e1578260006126e5565b6000835b91509150600060028a516126f99190614489565b8810612705578861273f565b60005461273f906001600160a01b0316878c6127228c6002614430565b8151811061273257612732614514565b6020026020010151612464565b600054909150612759906001600160a01b03168888612464565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612796576020820181803683370190505b506040518563ffffffff1660e01b81526004016127b69493929190614351565b600060405180830381600087803b1580156127d057600080fd5b505af11580156127e4573d6000803e3d6000fd5b505050505050505050505080806127fa906144e3565b91505061262a565b6060818060200190518101906104169190613bea565b848460005b848110156129c45785858281811061283757612837614514565b905060200281019061284991906143c5565b612857906020810190613c90565b156128945761288a8287878481811061287257612872614514565b905060200281019061288491906143c5565b8661353d565b90935091506129b2565b60006128ab8787848181106109e7576109e7614514565b905080600182516128bc9190614489565b815181106128cc576128cc614514565b6020026020010151935060006128f660008054906101000a90046001600160a01b031685846122f7565b905061297b8260008151811061290e5761290e614514565b602002602001015161295b60008054906101000a90046001600160a01b03168560008151811061294057612940614514565b60200260200101518660018151811061273257612732614514565b8360008151811061296e5761296e614514565b60200260200101516138c4565b612986818330612627565b80600182516129959190614489565b815181106129a5576129a5614514565b6020026020010151935050505b806129bc816144e3565b91505061281d565b509550959350505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600080600080600086806020019051810190612a169190613cca565b6040805160a0810182526001600160a01b03968716815294861660208601529285169284019290925290921660608201529015156080820152979650505050505050565b604080516000808252602082019092526001600160a01b038416908390604051612a84919061419d565b60006040518083038185875af1925050503d8060008114612ac1576040519150601f19603f3d011682016040523d82523d6000602084013e612ac6565b606091505b50509050806122f25760405162461bcd60e51b815260206004820152604a60248201527f5472616e7366657248656c7065723a3a736166655472616e736665724e61746960448201527f766543757272656e63793a204e617469766543757272656e6379207472616e7360648201526919995c8819985a5b195960b21b608482015260a40161065e565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8c57600080fd5b505afa158015612ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc49190613bcd565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd249060240160206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190614119565b90506000896001600160a01b031663efeecb516040518163ffffffff1660e01b815260040160206040518083038186803b158015612c8057600080fd5b505afa158015612c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb89190613f4d565b67ffffffffffffffff811115612cd057612cd061452a565b604051908082528060200260200182016040528015612cf9578160200160208202803683370190505b50905086818a60ff1681518110612d1257612d12614514565b602090810291909101015260405162415c3360e91b815260ff8a1660048201526000906001600160a01b038c16906382b866009060240160206040518083038186803b158015612d6157600080fd5b505afa158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d999190613bcd565b9050612daf6001600160a01b0382168c8a61339b565b604051634d49e87d60e01b81526000906001600160a01b038d1690634d49e87d90612de290869085908c906004016141f0565b602060405180830381600087803b158015612dfc57600080fd5b505af1158015612e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e349190613f4d565b90508960ff168460ff1614612e5857612e518d858c848c8c612189565b9550612e5c565b8095505b5050505050979650505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b815260040160206040518083038186803b158015612ea857600080fd5b505afa158015612ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee09190613bcd565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd249060240160206040518083038186803b158015612f2757600080fd5b505afa158015612f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5f9190614119565b90508560ff808316908a1614612f8157612f7e8b8a848a60008a612189565b90505b612f956001600160a01b0384168b8361339b565b6040516301f1d0ab60e51b81526004810182905260ff8916602482015260448101879052606481018690526001600160a01b038b1690633e3a156090608401602060405180830381600087803b158015612fee57600080fd5b505af1158015613002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130269190613f4d565b9b9a5050505050505050505050565b60008115806130595750828261304b818361446a565b92506130579083614448565b145b6104165760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640161065e565b6000826130a98382614430565b91508110156104165760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161065e565b6000806000613100858561345c565b509050600080613111888888612464565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561314957600080fd5b505afa15801561315d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131819190613efd565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b0316146131b85780826131bb565b81815b90999098509650505050505050565b60008084116132265760405162461bcd60e51b815260206004820152602260248201527f48656c7065723a20494e53554646494349454e545f4f55545055545f414d4f55604482015261139560f21b606482015260840161065e565b6000831180156132365750600082115b6132825760405162461bcd60e51b815260206004820152601e60248201527f48656c7065723a20494e53554646494349454e545f4c49515549444954590000604482015260640161065e565b600061329a6103e86132948688613035565b90613035565b905060006132ae6103e561329486896139f5565b90506132bf6001611f6e8385614448565b9695505050505050565b600061331e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a4b9092919063ffffffff16565b8051909150156122f2578080602001905181019061333c9190613cad565b6122f25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161065e565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156133e757600080fd5b505afa1580156133fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341f9190613f4d565b6134299190614430565b6040516001600160a01b03851660248201526044810182905290915061218390859063095ea7b360e01b9060640161214c565b600080826001600160a01b0316846001600160a01b031614156134c15760405162461bcd60e51b815260206004820152601b60248201527f48656c7065723a204944454e544943414c5f4144445245535345530000000000604482015260640161065e565b826001600160a01b0316846001600160a01b0316106134e15782846134e4565b83835b90925090506001600160a01b0382166135365760405162461bcd60e51b815260206004820152601460248201527348656c7065723a205a45524f5f4144445245535360601b604482015260640161065e565b9250929050565b60008080613551610cb3602087018761437e565b606081015160208201519094509091506001600160a01b031661368357805160408083015190516319b02f4960e21b81526001600160a01b03918216600482015261367c92918216906366c0bd249060240160206040518083038186803b1580156135bb57600080fd5b505afa1580156135cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f39190614119565b835160608501516040516319b02f4960e21b81526001600160a01b0391821660048201529116906366c0bd249060240160206040518083038186803b15801561363b57600080fd5b505afa15801561364f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136739190614119565b89600089612189565b91506138bb565b8060800151156137a1578051602082015160408084015190516319b02f4960e21b81526001600160a01b03918216600482015261367c9392918216906366c0bd249060240160206040518083038186803b1580156136e057600080fd5b505afa1580156136f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137189190614119565b845160608601516040516319b02f4960e21b81526001600160a01b0391821660048201529116906366c0bd249060240160206040518083038186803b15801561376057600080fd5b505afa158015613774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137989190614119565b8a60008a612b50565b8051602082015160408084015190516319b02f4960e21b81526001600160a01b0391821660048201526138b89392918316906366c0bd249060240160206040518083038186803b1580156137f457600080fd5b505afa158015613808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382c9190614119565b602085015160608601516040516319b02f4960e21b81526001600160a01b0391821660048201529116906366c0bd249060240160206040518083038186803b15801561387757600080fd5b505afa15801561388b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138af9190614119565b8a60008a612e6c565b91505b50935093915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691613920919061419d565b6000604051808303816000865af19150503d806000811461395d576040519150601f19603f3d011682016040523d82523d6000602084013e613962565b606091505b509150915081801561398c57508051158061398c57508080602001905181019061398c9190613cad565b6139ee5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b606482015260840161065e565b5050505050565b600082613a028382614489565b91508111156104165760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015260640161065e565b60606103ef8484600085856001600160a01b0385163b613aad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161065e565b600080866001600160a01b03168587604051613ac9919061419d565b60006040518083038185875af1925050503d8060008114613b06576040519150601f19603f3d011682016040523d82523d6000602084013e613b0b565b606091505b5091509150611f8082828660608315613b255750816103f2565b825115613b355782518084602001fd5b8160405162461bcd60e51b815260040161065e9190614215565b60008083601f840112613b6157600080fd5b50813567ffffffffffffffff811115613b7957600080fd5b6020830191508360208260051b850101111561353657600080fd5b80516001600160701b0381168114613bab57600080fd5b919050565b600060208284031215613bc257600080fd5b81356103f281614540565b600060208284031215613bdf57600080fd5b81516103f281614540565b60006020808385031215613bfd57600080fd5b825167ffffffffffffffff811115613c1457600080fd5b8301601f81018513613c2557600080fd5b8051613c38613c338261440c565b6143db565b80828252848201915084840188868560051b8701011115613c5857600080fd5b600094505b83851015613c84578051613c7081614540565b835260019490940193918501918501613c5d565b50979650505050505050565b600060208284031215613ca257600080fd5b81356103f281614558565b600060208284031215613cbf57600080fd5b81516103f281614558565b600080600080600060a08688031215613ce257600080fd5b8551613ced81614540565b6020870151909550613cfe81614540565b6040870151909450613d0f81614540565b6060870151909350613d2081614540565b6080870151909250613d3181614558565b809150509295509295909350565b600080600080600060a08688031215613d5757600080fd5b8535613d6281614540565b94506020860135613d7281614540565b93506040860135613d8281614566565b92506060860135613d9281614566565b949793965091946080013592915050565b600080600080600080600080610100898b031215613dc057600080fd5b8835613dcb81614540565b97506020890135613ddb81614540565b96506040890135613deb81614566565b95506060890135613dfb81614566565b94506080890135935060a0890135925060c0890135613e1981614540565b8092505060e089013590509295985092959890939650565b60008060008060808587031215613e4757600080fd5b8435613e5281614540565b93506020850135613e6281614566565b92506040850135613e7281614566565b9396929550929360600135925050565b600080600080600080600060e0888a031215613e9d57600080fd5b8735613ea881614540565b96506020880135613eb881614566565b95506040880135613ec881614566565b9450606088013593506080880135925060a0880135613ee681614540565b8092505060c0880135905092959891949750929550565b600080600060608486031215613f1257600080fd5b613f1b84613b94565b9250613f2960208501613b94565b9150604084015163ffffffff81168114613f4257600080fd5b809150509250925092565b600060208284031215613f5f57600080fd5b5051919050565b600080600080600060808688031215613f7e57600080fd5b85359450602086013567ffffffffffffffff811115613f9c57600080fd5b613fa888828901613b4f565b9095509350506040860135613fbc81614540565b949793965091946060013592915050565b60008060408385031215613fe057600080fd5b8235915060208084013567ffffffffffffffff811115613fff57600080fd5b8401601f8101861361401057600080fd5b803561401e613c338261440c565b80828252848201915084840189868560051b870101111561403e57600080fd5b600094505b8385101561406a57803561405681614540565b835260019490940193918501918501614043565b5080955050505050509250929050565b60008060008060008060a0878903121561409357600080fd5b8635955060208701359450604087013567ffffffffffffffff8111156140b857600080fd5b6140c489828a01613b4f565b90955093505060608701356140d881614540565b80925050608087013590509295509295509295565b60008060006060848603121561410257600080fd5b505081359360208301359350604090920135919050565b60006020828403121561412b57600080fd5b81516103f281614566565b600081518084526020808501945080840160005b838110156141665781518752958201959082019060010161414a565b509495945050505050565b600081518084526141898160208601602086016144a0565b601f01601f19169290920160200192915050565b600082516141af8184602087016144a0565b9190910192915050565b6020815260006104136020830184614136565b6040815260006141df6040830185614136565b905082151560208301529392505050565b6060815260006142036060830186614136565b60208301949094525060400152919050565b6020815260006104136020830184614171565b6020808252601a908201527f53776170526f7574657256313a20494e56414c49445f50415448000000000000604082015260600190565b60208082526028908201527f53776170526f7574657256313a20494e53554646494349454e545f4f555450556040820152671517d05353d5539560c21b606082015260800190565b60208082526015908201527414ddd85c149bdd5d195c958c4e8811561412549151605a1b604082015260600190565b6020808252601c908201527f53776170526f7574657256313a20494e56414c49445f524f5554455300000000604082015260600190565b60208082526024908201527f53776170526f7574657256313a204558434553534956455f494e5055545f414d60408201526313d5539560e21b606082015260800190565b84815283602082015260018060a01b03831660408201526080606082015260006132bf6080830184614171565b6000808335601e1984360301811261439557600080fd5b83018035915067ffffffffffffffff8211156143b057600080fd5b60200191503681900382131561353657600080fd5b60008235603e198336030181126141af57600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156144045761440461452a565b604052919050565b600067ffffffffffffffff8211156144265761442661452a565b5060051b60200190565b60008219821115614443576144436144fe565b500190565b60008261446557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615614484576144846144fe565b500290565b60008282101561449b5761449b6144fe565b500390565b60005b838110156144bb5781810151838201526020016144a3565b838111156121835750506000910152565b6000816144db576144db6144fe565b506000190190565b60006000198214156144f7576144f76144fe565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461455557600080fd5b50565b801515811461455557600080fd5b60ff8116811461455557600080fdfea2646970667358221220434b266976e68a5e64ea5679f4937dcdadb69a23c4fee5e344e0f9871a96043264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17131,
        "contract": "contracts/periphery/SwapRouterV1.sol:SwapRouterV1",
        "label": "factory",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17134,
        "contract": "contracts/periphery/SwapRouterV1.sol:SwapRouterV1",
        "label": "WNativeCurrency",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}