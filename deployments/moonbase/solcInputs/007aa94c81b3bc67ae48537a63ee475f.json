{
  "language": "Solidity",
  "sources": {
    "contracts/core/Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"./interfaces/IFactory.sol\";\nimport \"./Pair.sol\";\nimport \"../libraries/AdminUpgradeable.sol\";\n\ncontract Factory is AdminUpgradeable, IFactory {\n    address public override feeto;\n    uint8 public override feeBasePoint;\n    bool public override lockForPairCreate;\n\n    mapping(address => mapping(address => address)) public override getPair;\n    mapping(address => mapping(address => address)) public override getBootstrap;\n    address[] public override allPairs;\n\n    constructor(address _admin) {\n        _initializeAdmin(_admin);\n        feeto = _admin;\n    }\n\n    function allPairsLength() external view override returns (uint256) {\n        return allPairs.length;\n    }\n\n    function pairCodeHash() external pure returns (bytes32) {\n        return keccak256(type(Pair).creationCode);\n    }\n\n    function createPair(address tokenA, address tokenB)\n        external\n        override\n        returns (address pair)\n    {\n        require(\n            !lockForPairCreate || (lockForPairCreate && msg.sender == admin), \n            \"CREATE_PAIR_LOCKED\"\n        );\n        require(tokenA != tokenB, \"IDENTICAL_ADDRESSES\");\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"ZERO_ADDRESS\");\n        require(getPair[token0][token1] == address(0), \"Factory: PAIR_EXISTS\");\n        if (getBootstrap[token0][token1] != address(0)) {\n            require(getBootstrap[token0][token1] == msg.sender, 'NOT_BOOTSTRAP_OWNER');\n        }\n        bytes memory bytecode = type(Pair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IPair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair;\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setBootstrap(address tokenA, address tokenB, address bootstrap) external onlyAdmin {\n        require(getPair[tokenA][tokenB] == address(0), \"Factory: PAIR_EXISTS\");\n        getBootstrap[tokenA][tokenB] = bootstrap;\n        getBootstrap[tokenB][tokenA] = bootstrap;\n        emit BootstrapSetted(tokenA, tokenB, bootstrap);\n    }\n\n    function lockPairCreate() external onlyAdmin {\n        lockForPairCreate = true;\n        emit PairCreateLocked(msg.sender);\n    }\n\n    function unlockPairCreate() external onlyAdmin {\n        lockForPairCreate = false;\n        emit PairCreateUnlocked(msg.sender);\n    }\n\n    function setFeeto(address _feeto) external onlyAdmin {\n        feeto = _feeto;\n        emit FeetoUpdated(_feeto);\n    }\n\n    function setFeeBasePoint(uint8 _basePoint) external onlyAdmin {\n        require(_basePoint <= 30, \"FORBIDDEN\");\n        feeBasePoint = _basePoint;\n        emit FeeBasePointUpdated(_basePoint);\n    }\n}\n"
    },
    "contracts/core/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IFactory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n    event PairCreateLocked(\n        address indexed caller\n    );\n    event PairCreateUnlocked(\n        address indexed caller\n    );\n    event BootstrapSetted(\n        address indexed tokenA,\n        address indexed tokenB,\n        address indexed bootstrap\n    );\n    event FeetoUpdated(\n        address indexed feeto\n    );\n    event FeeBasePointUpdated(\n        uint8 basePoint\n    );\n\n    function feeto() external view returns (address);\n\n    function feeBasePoint() external view returns (uint8);\n\n    function lockForPairCreate() external view returns (bool);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n    \n    function getBootstrap(address tokenA, address tokenB)\n        external\n        view\n        returns (address bootstrap);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n"
    },
    "contracts/core/Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"./ZenlinkERC20.sol\";\nimport \"./interfaces/IPair.sol\";\nimport \"./interfaces/IFactory.sol\";\nimport './interfaces/IZenlinkCallee.sol';\nimport \"../libraries/Math.sol\";\nimport \"../libraries/UQ112x112.sol\";\n\ncontract Pair is IPair, ZenlinkERC20 {\n    using Math for uint256;\n    using UQ112x112 for uint224;\n\n    uint256 public constant override MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR =\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n\n    address public override factory;\n    address public override token0;\n    address public override token1;\n\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint256 public override price0CumulativeLast;\n    uint256 public override price1CumulativeLast;\n    uint256 public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint8 private unlocked = 1;\n\n    modifier lock() {\n        require(unlocked == 1, \"LOCKED\");\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) private {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(SELECTOR, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function getReserves()\n        public\n        view\n        override\n        returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast)\n    {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    constructor() {\n        factory = msg.sender;\n    }\n\n    function initialize(address _token0, address _token1) external override {\n        require(msg.sender == factory, \"Only called by factory\");\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\n        private\n        returns (uint8 feeBasePoint)\n    {\n        address feeTo = IFactory(factory).feeto();\n        feeBasePoint = IFactory(factory).feeBasePoint();\n        uint256 _kLast = kLast; // gas savings\n        if (feeBasePoint > 0) {\n            if (_kLast != 0) {\n                uint256 rootK = Math.sqrt(\n                    uint256(_reserve0).mul(uint256(_reserve1))\n                );\n                uint256 rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint256 numerator = totalSupply().mul(rootK.sub(rootKLast));\n                    uint256 denominator = (rootK.mul(30 - feeBasePoint) /\n                        feeBasePoint).add(rootKLast);\n                    uint256 liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    function mint(address to)\n        external\n        override\n        lock\n        returns (uint256 liquidity)\n    {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 amount0 = balance0.sub(_reserve0);\n        uint256 amount1 = balance1.sub(_reserve1);\n\n        uint8 feeBasePoint = _mintFee(_reserve0, _reserve1);\n        uint256 _totalSupply = totalSupply();\n        if (_totalSupply == 0) {\n            address feeTo = IFactory(factory).feeto();\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n            _mint(feeTo, MINIMUM_LIQUIDITY);\n        } else {\n            liquidity = Math.min(\n                amount0.mul(_totalSupply) / _reserve0,\n                amount1.mul(_totalSupply) / _reserve1\n            );\n        }\n        require(liquidity > 0, \"INSUFFICIENT_LIQUIDITY_MINTED\");\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeBasePoint > 0) kLast = uint256(reserve0).mul(reserve1);\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    function burn(address to)\n        external\n        override\n        lock\n        returns (uint256 amount0, uint256 amount1)\n    {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\n        address _token0 = token0;\n        address _token1 = token1;\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n        uint256 liquidity = balanceOf(address(this));\n\n        uint8 feeBasePoint = _mintFee(_reserve0, _reserve1);\n        uint256 _totalSupply = totalSupply();\n        amount0 = liquidity.mul(balance0) / _totalSupply;\n        amount1 = liquidity.mul(balance1) / _totalSupply;\n        require(amount0 > 0 && amount1 > 0, \"INSUFFICIENT_LIQUIDITY_BURNED\");\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeBasePoint > 0) kLast = uint256(reserve0).mul(reserve1);\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external override lock {\n        require(amount0Out > 0 || amount1Out > 0, \"INSUFFICIENT_OUTPUT_AMOUNT\");\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\n        require(\n            amount0Out < _reserve0 && amount1Out < _reserve1,\n            \"INSUFFICIENT_LIQUIDITY\"\n        );\n\n        uint256 balance0;\n        uint256 balance1;\n        {\n            address _token0 = token0;\n            address _token1 = token1;\n            require(to != _token0 && to != _token1, \"INVALID_TO\");\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\n            if (data.length > 0) IZenlinkCallee(to).zenlinkCall(msg.sender, amount0Out, amount1Out, data);\n            balance0 = IERC20(_token0).balanceOf(address(this));\n            balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\n            ? balance0 - (_reserve0 - amount0Out)\n            : 0;\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\n            ? balance1 - (_reserve1 - amount1Out)\n            : 0;\n        require(amount0In > 0 || amount1In > 0, \" INSUFFICIENT_INPUT_AMOUNT\");\n        {\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n            require(\n                balance0Adjusted.mul(balance1Adjusted) >=\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\n                \"Pair: K\"\n            );\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    function _update(uint256 balance0, uint256 balance1, uint112 _reserve0, uint112 _reserve1) private {\n        require(\n            balance0 <= type(uint112).max && balance1 <= type(uint112).max,\n            \"OVERFLOW\"\n        );\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external override lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n    function sync() external override lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n"
    },
    "contracts/libraries/AdminUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nabstract contract AdminUpgradeable {\n    address public admin;\n    address public adminCandidate;\n\n    function _initializeAdmin(address _admin) internal {\n        require(admin == address(0), \"admin already set\");\n\n        admin = _admin;\n    }\n\n    function candidateConfirm() external {\n        require(msg.sender == adminCandidate, \"not Candidate\");\n        emit AdminChanged(admin, adminCandidate);\n\n        admin = adminCandidate;\n        adminCandidate = address(0);\n    }\n\n    function setAdminCandidate(address _candidate) external onlyAdmin {\n        adminCandidate = _candidate;\n        emit Candidate(_candidate);\n    }\n\n    modifier onlyAdmin {\n        require(msg.sender == admin, \"not admin\");\n        _;\n    }\n\n    event Candidate(address indexed newAdmin);\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\n}"
    },
    "contracts/core/ZenlinkERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./interfaces/IZenlinkERC20.sol\";\n\ncontract ZenlinkERC20 is IZenlinkERC20, ERC20 {\n\n    bytes32 public override DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint256) public override nonces;\n\n    constructor() ERC20('Zenlink LP Token', 'ZLK-LP') {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name())),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external override {\n        require(deadline >= block.timestamp, 'EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/core/interfaces/IPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IPair {\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n    function price1CumulativeLast() external view returns (uint256);\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/core/interfaces/IZenlinkCallee.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IZenlinkCallee {\n    function zenlinkCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external;\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}\n"
    },
    "contracts/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/core/interfaces/IZenlinkERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IZenlinkERC20 is IERC20 {\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/tools/ZenlinkMaker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {AdminUpgradeable} from \"../libraries/AdminUpgradeable.sol\";\nimport {IFactory} from \"../core/interfaces/IFactory.sol\";\nimport {IPair} from \"../core/interfaces/IPair.sol\";\nimport {IStableSwap} from \"../stableswap/interfaces/IStableSwap.sol\";\n\ncontract ZenlinkMaker is AdminUpgradeable {\n    using SafeERC20 for IERC20;\n\n    IFactory public immutable factory;\n    address public immutable vxzlk;\n    address private immutable zlk;\n    address private immutable wnative;\n\n    uint256 public constant PRECISION = 10**3;\n    address public feeDistributor;\n    uint256 public fee;\n\n    mapping(address => address) internal _bridges;\n    mapping(address => uint8) internal _stableSwapFeeTokenIndex;\n\n    event LogBridgeSet(address indexed token, address indexed bridge);\n    event LogStableSwapFeeTokenIndexSet(address indexed pool, uint8 indexed feeTokenIndex);\n    event FeeDistributorChanged(address newController);\n    event FeeChanged(uint256 newFee);\n    event LogConvertPair(\n        address indexed sender, \n        address indexed token0, \n        address indexed token1, \n        uint256 amount0, \n        uint256 amount1, \n        uint256 amountZLK\n    );\n    event LogConvertStableSwap(\n        address indexed sender, \n        address indexed pool,\n        address indexed token,\n        uint256 amount,\n        uint256 amountZLK\n    );\n\n    error NotEOA(address account);\n    error BridgeTokenInvalid(address token);\n    error TokenIndexInvalid(uint8 feeTokenIndex);\n    error ZeroAddress();\n    error FeeExceedsMaximum(uint256 newFee, uint256 max);\n    error ArrayMismatch();\n\n    constructor(\n        IFactory _factory,\n        address _vxzlk,\n        address _zlk,\n        address _wnative,\n        address _feeDistributor\n    ) {\n        factory = _factory;\n        vxzlk = _vxzlk;\n        zlk = _zlk;\n        wnative = _wnative;\n        feeDistributor = _feeDistributor;\n        _initializeAdmin(msg.sender);\n    }\n\n    modifier onlyEOA() {\n        if (msg.sender != tx.origin) revert NotEOA(msg.sender);\n        _;\n    } \n\n    function bridgeFor(address token) public view returns (address bridge) {\n        bridge = _bridges[token];\n        if (bridge == address(0)) {\n            bridge = wnative;\n        }\n    }\n\n    function feeTokenIndexFor(address pool) public view returns (uint8 feeTokenIndex) {\n        feeTokenIndex = _stableSwapFeeTokenIndex[pool];\n    }\n\n    function setBridge(address token, address bridge) external onlyAdmin {\n        if (token == zlk || token == wnative || token == bridge) \n            revert BridgeTokenInvalid(token);\n\n        _bridges[token] = bridge;\n        emit LogBridgeSet(token, bridge);\n    }\n\n    function setFeeTokenIndex(address pool, uint8 feeTokenIndex) external onlyAdmin {\n        if (feeTokenIndex >= IStableSwap(pool).getNumberOfTokens())\n            revert TokenIndexInvalid(feeTokenIndex);\n\n        _stableSwapFeeTokenIndex[pool] = feeTokenIndex;\n        emit LogStableSwapFeeTokenIndexSet(pool, feeTokenIndex);\n    }\n\n    function setFeeDistributor(address _feeDistributor) external onlyAdmin {\n        if (_feeDistributor == address(0)) revert ZeroAddress();\n        feeDistributor = _feeDistributor;\n        emit FeeDistributorChanged(_feeDistributor);\n    }\n\n    function setFee(uint256 newFee) external onlyAdmin {\n        if (newFee > PRECISION) revert FeeExceedsMaximum(newFee, PRECISION);\n        fee = newFee;\n        emit FeeChanged(newFee);\n    }\n\n    function convertPair(address token0, address token1) external onlyEOA() {\n        _convertPair(token0, token1);\n    }\n\n    function convertStableSwap(IStableSwap pool) external onlyEOA() {\n        _convertStableSwap(pool);\n    }\n\n    function convertPairMultiple(\n        address[] calldata tokens0, \n        address[] calldata tokens1\n    ) external onlyEOA() {\n        uint256 len = tokens0.length;\n        if (len != tokens1.length) revert ArrayMismatch();\n        for (uint256 i = 0; i < len; i++) {\n            _convertPair(tokens0[i], tokens1[i]);\n        }\n    }\n\n    function convertStableSwapMultiple(IStableSwap[] calldata pools) external onlyEOA() {\n        for (uint256 i = 0; i < pools.length; i++) {\n            _convertStableSwap(pools[i]);\n        }\n    }\n\n    function _convertPair(address token0, address token1) internal {\n        IPair pair = IPair(factory.getPair(token0, token1));\n        if (address(pair) == address(0)) revert ZeroAddress();\n\n        uint256 amount = IERC20(address(pair)).balanceOf(address(this));\n        IERC20(address(pair)).safeTransfer(address(pair), amount);\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\n        if (token0 != pair.token0()) {\n            (amount0, amount1) = (amount1, amount0);\n        }\n        uint256 amount0Fee = (amount0 * fee) / PRECISION;\n        uint256 amount1Fee = (amount1 * fee) / PRECISION;\n        if (amount0Fee > 0) {\n            IERC20(token0).safeTransfer(feeDistributor, amount0Fee);\n        }\n        if (amount1Fee > 0) {\n            IERC20(token1).safeTransfer(feeDistributor, amount1Fee);\n        }\n        emit LogConvertPair(\n            msg.sender, \n            token0, \n            token1, \n            amount0 - amount0Fee, \n            amount1 - amount1Fee, \n            _convertStep(token0, token1, amount0 - amount0Fee, amount1 - amount1Fee)\n        );\n    }\n\n    function _convertStableSwap(IStableSwap pool) internal {\n        pool.withdrawAdminFee();\n        IERC20[] memory tokens = pool.getTokens();\n        uint8 feeTokenIndex = _stableSwapFeeTokenIndex[address(pool)];\n        IERC20 feeToken = pool.getToken(feeTokenIndex);\n\n        for (uint8 i = 0; i < tokens.length; i++) {\n            if (i == feeTokenIndex) continue;\n\n            uint256 balance = tokens[i].balanceOf(address(this));\n            tokens[i].safeIncreaseAllowance(address(pool), balance);\n            pool.swap(i, feeTokenIndex, balance, 0, block.timestamp);\n        }\n\n        uint256 amount = feeToken.balanceOf(address(this));\n        uint256 feeAmount = (amount * fee) / PRECISION;\n        if (feeAmount > 0) {\n            feeToken.safeTransfer(feeDistributor, feeAmount);\n        }\n\n        emit LogConvertStableSwap(\n            msg.sender,\n            address(pool),\n            address(feeToken),\n            amount - feeAmount,\n            _convertStep(address(feeToken), address(feeToken), amount - feeAmount, 0)\n        );\n    }\n\n    function _convertStep(\n        address token0,\n        address token1,\n        uint256 amount0,\n        uint256 amount1\n    ) internal returns(uint256 zlkOut) {\n        if (token0 == token1) {\n            uint256 amount = amount0 + amount1;\n            \n            if (token0 == zlk) {\n                IERC20(zlk).safeTransfer(vxzlk, amount);\n                zlkOut = amount;\n            } else if (token0 == wnative) {\n                zlkOut = _toZLK(wnative, amount);\n            } else {\n                address bridge = bridgeFor(token0);\n                amount = _swap(token0, bridge, amount, address(this));\n                zlkOut = _convertStep(bridge, bridge, amount, 0);\n            }\n        } else if (token0 == zlk) {\n            IERC20(zlk).safeTransfer(vxzlk, amount0);\n            zlkOut = _toZLK(token1, amount1) + amount0;\n        } else if (token1 == zlk) {\n            IERC20(zlk).safeTransfer(vxzlk, amount1);\n            zlkOut = _toZLK(token0, amount0) + amount1;\n        } else if (token0 == wnative) {\n            zlkOut = _toZLK(wnative, _swap(token1, wnative, amount1, address(this)) + amount0);\n        } else if (token1 == wnative) {\n            zlkOut = _toZLK(wnative, _swap(token0, wnative, amount0, address(this)) + amount1);\n        } else {\n            address bridge0 = bridgeFor(token0);\n            address bridge1 = bridgeFor(token1);\n\n            if (bridge0 == token1) {\n                zlkOut = _convertStep(\n                    bridge0,\n                    token1,\n                    _swap(token0, bridge0, amount0, address(this)),\n                    amount1\n                );\n            } else if (bridge1 == token0) {\n                zlkOut = _convertStep(\n                    token0,\n                    bridge1,\n                    amount0,\n                    _swap(token1, bridge1, amount1, address(this))\n                );\n            } else {\n                zlkOut = _convertStep(\n                    bridge0,\n                    bridge1,\n                    _swap(token0, bridge0, amount0, address(this)),\n                    _swap(token1, bridge1, amount1, address(this))\n                );\n            }\n        }\n    }\n\n    function _swap(\n        address fromToken, \n        address toToken, \n        uint256 amountIn, \n        address to\n    ) internal returns(uint256 amountOut) {\n        IPair pair = IPair(factory.getPair(fromToken, toToken));\n        if (address(pair) == address(0)) revert ZeroAddress();\n\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n        uint256 amountInWithFee = amountIn * 997;\n\n        if (fromToken == pair.token0()) {\n            amountOut = (amountInWithFee * reserve1) / (reserve0 * 1000 + amountInWithFee);\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\n            pair.swap(0, amountOut, to, new bytes(0));\n        } else {\n            amountOut = (amountInWithFee * reserve0) / (reserve1 * 1000 + amountInWithFee);\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\n            pair.swap(amountOut, 0, to, new bytes(0));\n        }\n    }\n\n    function _toZLK(address token, uint256 amountIn) internal returns(uint256 amountOut) {\n        amountOut = _swap(token, zlk, amountIn, vxzlk);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/stableswap/interfaces/IStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../LPToken.sol\";\n\ninterface IStableSwap {\n    /// EVENTS\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event FlashLoan(\n        address indexed caller,\n        address indexed receiver,\n        uint256[] amounts_out\n    );\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 soldId,\n        uint256 tokensSold,\n        uint256 boughtId,\n        uint256 tokensBought\n    );\n\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\n\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\n\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\n\n    event StopRampA(uint256 A, uint256 timestamp);\n\n    event NewFee(uint256 fee, uint256 adminFee);\n\n    event CollectProtocolFee(address token, uint256 amount);\n\n    event FeeControllerChanged(address newController);\n\n    event FeeDistributorChanged(address newController);\n\n    // pool data view functions\n    function getLpToken() external view returns (IERC20 lpToken);\n\n    function getA() external view returns (uint256);\n\n    function getAPrecise() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokens() external view returns (IERC20[] memory);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getTokenBalances() external view returns (uint256[] memory);\n\n    function getNumberOfTokens() external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\n        external\n        view\n        returns (uint256 availableTokenAmount);\n\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\n\n    function getAdminBalance(uint8 index) external view returns (uint256);\n\n    function swapStorage()\n        external\n        view\n        returns (\n            LPToken,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    // state modifying functions\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function flashLoan(\n        uint256[] memory amountsOut,\n        address to,\n        bytes calldata data,\n        uint256 deadline\n    ) external;\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function withdrawAdminFee() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/stableswap/LPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IStableSwap.sol\";\n\ncontract LPToken is Ownable, ERC20Burnable {\n    IStableSwap public swap;\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        swap = IStableSwap(msg.sender);\n    }\n\n    function mint(address _to, uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"zeroMintAmount\");\n        _mint(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/stableswap/MetaSwapStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {LPToken} from \"./LPToken.sol\";\nimport {IStableSwap} from \"./interfaces/IStableSwap.sol\";\nimport {IStableSwapCallee} from \"./interfaces/IStableSwapCallee.sol\";\nimport {StableSwapStorage} from \"./StableSwapStorage.sol\";\n\nlibrary MetaSwapStorage {\n    using SafeERC20 for IERC20;\n\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] token_amounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n\n    event FlashLoan(\n        address indexed caller,\n        address indexed receiver,\n        uint256[] amounts_out\n    );\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 sold_id,\n        uint256 tokens_sold,\n        uint256 bought_id,\n        uint256 tokens_bought\n    );\n\n    event TokenSwapUnderlying(\n        address indexed buyer,\n        uint256 tokensSold,\n        uint256 tokensBought,\n        uint128 soldId,\n        uint128 boughtId\n    );\n\n    event RemoveLiquidity(\n        address indexed provider, \n        uint256[] token_amounts, \n        uint256[] fees, \n        uint256 token_supply\n    );\n\n    event RemoveLiquidityOne(\n        address indexed provider, \n        uint256 index, \n        uint256 token_amount, \n        uint256 coin_amount\n    );\n\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] token_amounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n\n    uint256 public constant FEE_DENOMINATOR = 1e10;\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\n    /// so we add some (small) PRECISION when divide in each iteration\n    uint256 public constant A_PRECISION = 100;\n    /// @dev max iteration of converge calculate\n    uint256 internal constant MAX_ITERATION = 256;\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\n\n    // Cache expire time for the stored value of base Swap's virtual price\n    uint256 public constant BASE_CACHE_EXPIRE_TIME = 10 minutes;\n    uint256 public constant BASE_VIRTUAL_PRICE_PRECISION = 10**18;\n\n    struct MetaSwap {\n        // Meta-Swap related parameters\n        IStableSwap baseSwap;\n        uint256 baseVirtualPrice;\n        uint256 baseCacheLastUpdated;\n        IERC20[] baseTokens;\n    }\n\n    // Struct storing variables used in calculations in the\n    // calculateRemoveLiquidityOneTokenInfo function to avoid stack too deep errors\n    struct CalculateRemoveLiquidityOneTokenInfo {\n        uint256 D0;\n        uint256 D1;\n        uint256 newY;\n        uint256 feePerToken;\n        uint256 preciseA;\n        uint256 xpi;\n    }\n\n    // Struct storing variables used in calculation in removeLiquidityImbalance function\n    // to avoid stack too deep error\n    struct ManageLiquidityInfo {\n        uint256 D0;\n        uint256 D1;\n        uint256 D2;\n        LPToken lpToken;\n        uint256 totalSupply;\n        uint256 preciseA;\n        uint256 baseVirtualPrice;\n        uint256[] tokenPrecisionMultipliers;\n        uint256[] newBalances;\n    }\n\n    struct SwapUnderlyingInfo {\n        uint256 x;\n        uint256 dx;\n        uint256 dy;\n        uint256[] tokenPrecisionMultipliers;\n        uint256[] oldBalances;\n        IERC20[] baseTokens;\n        IERC20 tokenFrom;\n        uint8 metaIndexFrom;\n        IERC20 tokenTo;\n        uint8 metaIndexTo;\n        uint256 baseVirtualPrice;\n    }\n\n    struct CalculateSwapUnderlyingInfo {\n        uint256 baseVirtualPrice;\n        IStableSwap baseSwap;\n        uint8 baseLPTokenIndex;\n        uint8 baseTokensLength;\n        uint8 metaIndexTo;\n        uint256 x;\n        uint256 dy;\n    }\n\n    /**\n     * @notice swap two tokens in the pool\n     * @param self Swap struct to read from and write to\n     * @param metaSwapStorage MetaSwap struct to read from and write to\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @return amount of token user received on swap\n     */\n    function swap(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256) {\n        {\n            uint256 pooledTokensLength = self.pooledTokens.length;\n            require(\n                tokenIndexFrom < pooledTokensLength && tokenIndexTo < pooledTokensLength,\n                \"Token index is out of range\"\n            );\n        }\n\n        uint256 transferredDx;\n        {\n            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\n            require(\n                dx <= tokenFrom.balanceOf(msg.sender),\n                \"Cannot swap more than you own\"\n            );\n            transferredDx = _doTransferIn(tokenFrom, dx);\n        }\n        (uint256 dy, uint256 dyFee) = _calculateSwap(\n            self,\n            tokenIndexFrom,\n            tokenIndexTo,\n            transferredDx,\n            _updateBaseVirtualPrice(metaSwapStorage)\n        );\n        require(dy >= minDy, \"Swap didn't result in min tokens\");\n        uint256 dyAdminFee = ((dyFee * self.adminFee) / FEE_DENOMINATOR) / self.tokenMultipliers[tokenIndexTo];\n        self.balances[tokenIndexFrom] += transferredDx;\n        self.balances[tokenIndexTo] -= dy + dyAdminFee;\n\n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\n        emit TokenExchange(\n            msg.sender,\n            tokenIndexFrom,\n            transferredDx,\n            tokenIndexTo,\n            dy\n        );\n\n        return dy;\n    }\n\n    /**\n     * @notice Swaps with the underlying tokens of the base Swap pool. For this function,\n     * the token indices are flattened out so that underlying tokens are represented\n     * in the indices.\n     * @dev Since this calls multiple external functions during the execution,\n     * it is recommended to protect any function that depends on this with reentrancy guards.\n     * @param self Swap struct to read from and write to\n     * @param metaSwapStorage MetaSwap struct to read from and write to\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @return amount of token user received on swap\n     */\n    function swapUnderlying(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256) {\n        SwapUnderlyingInfo memory v = SwapUnderlyingInfo(\n            0,\n            0,\n            0,\n            self.tokenMultipliers,\n            self.balances,\n            metaSwapStorage.baseTokens,\n            IERC20(address(0)),\n            0,\n            IERC20(address(0)),\n            0,\n            _updateBaseVirtualPrice(metaSwapStorage)\n        );\n\n        uint8 baseLPTokenIndex = uint8(v.oldBalances.length - 1);\n\n        {\n            uint8 maxRange = uint8(baseLPTokenIndex + v.baseTokens.length);\n            require(\n                tokenIndexFrom < maxRange && tokenIndexTo < maxRange,\n                \"Token index out of range\"\n            );\n        }\n\n        IStableSwap baseSwap = metaSwapStorage.baseSwap;\n\n        // Find the address of the token swapping from and the index in MetaSwap's token list\n        if (tokenIndexFrom < baseLPTokenIndex) {\n            v.tokenFrom = self.pooledTokens[tokenIndexFrom];\n            v.metaIndexFrom = tokenIndexFrom;\n        } else {\n            v.tokenFrom = v.baseTokens[tokenIndexFrom - baseLPTokenIndex];\n            v.metaIndexFrom = baseLPTokenIndex;\n        }\n\n        // Find the address of the token swapping to and the index in MetaSwap's token list\n        if (tokenIndexTo < baseLPTokenIndex) {\n            v.tokenTo = self.pooledTokens[tokenIndexTo];\n            v.metaIndexTo = tokenIndexTo;\n        } else {\n            v.tokenTo = v.baseTokens[tokenIndexTo - baseLPTokenIndex];\n            v.metaIndexTo = baseLPTokenIndex;\n        }\n\n        v.dx = _doTransferIn(v.tokenFrom, dx);\n\n        if (\n            tokenIndexFrom < baseLPTokenIndex || tokenIndexTo < baseLPTokenIndex\n        ) {\n            // Either one of the tokens belongs to the MetaSwap tokens list\n            uint256[] memory xp = _xp(\n                v.oldBalances,\n                v.tokenPrecisionMultipliers,\n                v.baseVirtualPrice\n            );\n\n            if (tokenIndexFrom < baseLPTokenIndex) {\n                // Swapping from a MetaSwap token\n                v.x = xp[tokenIndexFrom] + (dx * v.tokenPrecisionMultipliers[tokenIndexFrom]);\n            } else {\n                // Swapping from one of the tokens hosted in the base Swap\n                // This case requires adding the underlying token to the base Swap, then\n                // using the base LP token to swap to the desired token\n                uint256[] memory baseAmounts = new uint256[](v.baseTokens.length);\n                baseAmounts[tokenIndexFrom - baseLPTokenIndex] = v.dx;\n\n                // Add liquidity to the base Swap contract and receive base LP token\n                v.dx = baseSwap.addLiquidity(baseAmounts, 0, block.timestamp);\n\n                // Calculate the value of total amount of baseLPToken we end up with\n                v.x = ((v.dx * v.baseVirtualPrice) / BASE_VIRTUAL_PRICE_PRECISION) + xp[baseLPTokenIndex];\n            }\n\n            // Calculate how much to withdraw in MetaSwap level and the the associated swap fee\n            uint256 dyFee;\n            {\n                uint256 y = _getY(\n                    self,\n                    v.metaIndexFrom,\n                    v.metaIndexTo,\n                    v.x,\n                    xp\n                );\n                v.dy = xp[v.metaIndexTo] - y - 1;\n                if (tokenIndexTo >= baseLPTokenIndex) {\n                    // When swapping to a base Swap token, scale down dy by its virtual price\n                    v.dy = (v.dy * BASE_VIRTUAL_PRICE_PRECISION) / v.baseVirtualPrice;\n                }\n                dyFee = (v.dy * self.fee) / FEE_DENOMINATOR;\n                v.dy = (v.dy - dyFee) / v.tokenPrecisionMultipliers[v.metaIndexTo];\n            }\n\n            // Update the balances array according to the calculated input and output amount\n            {\n                uint256 dyAdminFee = (dyFee * self.adminFee) / FEE_DENOMINATOR;\n                dyAdminFee = dyAdminFee / v.tokenPrecisionMultipliers[v.metaIndexTo];\n                self.balances[v.metaIndexFrom] = v.oldBalances[v.metaIndexFrom] + v.dx;\n                self.balances[v.metaIndexTo] = v.oldBalances[v.metaIndexTo] - v.dy - dyAdminFee;\n            }\n\n            if (tokenIndexTo >= baseLPTokenIndex) {\n                // When swapping to a token that belongs to the base Swap, burn the LP token\n                // and withdraw the desired token from the base pool\n                uint256 oldBalance = v.tokenTo.balanceOf(address(this));\n                baseSwap.removeLiquidityOneToken(\n                    v.dy,\n                    tokenIndexTo - baseLPTokenIndex,\n                    0,\n                    block.timestamp\n                );\n                v.dy = v.tokenTo.balanceOf(address(this)) - oldBalance;\n            }\n\n            // Check the amount of token to send meets minDy\n            require(v.dy >= minDy, \"Swap didn't result in min tokens\");\n        } else {\n            // Both tokens are from the base Swap pool\n            // Do a swap through the base Swap\n            v.dy = v.tokenTo.balanceOf(address(this));\n            baseSwap.swap(\n                tokenIndexFrom - baseLPTokenIndex,\n                tokenIndexTo - baseLPTokenIndex,\n                v.dx,\n                minDy,\n                block.timestamp\n            );\n            v.dy = v.tokenTo.balanceOf(address(this)) - v.dy;\n        }\n\n        // Send the desired token to the caller\n        v.tokenTo.safeTransfer(msg.sender, v.dy);\n\n        emit TokenSwapUnderlying(\n            msg.sender,\n            dx,\n            v.dy,\n            tokenIndexFrom,\n            tokenIndexTo\n        );\n\n        return v.dy;\n    }\n\n    function flashLoan(\n        StableSwapStorage.SwapStorage storage self,\n        uint256[] memory amountsOut,\n        address to,\n        bytes calldata data\n    ) external {\n        uint256 nCoins = self.pooledTokens.length;\n        require(amountsOut.length == nCoins, \"invalidAmountsLength\");\n        {\n            uint256 tokenSupply = self.lpToken.totalSupply();\n            require(tokenSupply > 0, \"insufficientLiquidity\");\n        }\n        uint256[] memory fees = new uint256[](nCoins);\n        uint256 _fee = _feePerToken(self);\n        uint256 amp = _getAPrecise(self);\n        uint256 D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (amountsOut[i] > 0) {\n                require(amountsOut[i] < self.balances[i], \"insufficientBalance\");\n                fees[i] = (_fee * amountsOut[i]) / FEE_DENOMINATOR;\n                self.pooledTokens[i].safeTransfer(to, amountsOut[i]);\n            }\n        }\n\n        if (data.length > 0) {\n            IStableSwapCallee(to).zenlinkStableSwapCall(\n                msg.sender, \n                self.pooledTokens,\n                amountsOut, \n                fees, \n                data\n            );\n        }\n\n        uint256[] memory newBalances = self.balances;\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (amountsOut[i] > 0) {\n                newBalances[i] += (_doTransferIn(self.pooledTokens[i], amountsOut[i] + fees[i]) - amountsOut[i]);\n            }\n        }\n\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        assert(D1 > D0);\n\n        uint256 diff = 0;\n        for (uint256 i = 0; i < nCoins; i++) {\n            diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\n        }\n\n        emit FlashLoan(msg.sender, to, amountsOut);\n    }\n\n    /**\n     * @notice Add liquidity to the pool\n     * @param self Swap struct to read from and write to\n     * @param metaSwapStorage MetaSwap struct to read from and write to\n     * @param amounts the amounts of each token to add, in their native precision\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\n     * should mint, otherwise revert. Handy for front-running mitigation\n     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\n     * @return amount of LP token user received\n     */\n    function addLiquidity(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint256[] memory amounts,\n        uint256 minToMint\n    ) external returns (uint256) {\n        IERC20[] memory pooledTokens = self.pooledTokens;\n        require(\n            amounts.length == pooledTokens.length,\n            \"Amounts must match pooled tokens\"\n        );\n        uint256[] memory fees = new uint256[](pooledTokens.length);\n\n        // current state\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\n            0,\n            0,\n            0,\n            self.lpToken,\n            0,\n            _getAPrecise(self),\n            _updateBaseVirtualPrice(metaSwapStorage),\n            self.tokenMultipliers,\n            self.balances\n        );\n        v.totalSupply = v.lpToken.totalSupply();\n        \n        if (v.totalSupply != 0) {\n            v.D0 = _getD(\n                _xp(v.newBalances, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\n                v.preciseA\n            );\n        }\n\n        for (uint256 i = 0; i < pooledTokens.length; i++) {\n            require(\n                v.totalSupply != 0 || amounts[i] > 0,\n                \"Must supply all tokens in pool\"\n            );\n\n            if (amounts[i] > 0) {\n                v.newBalances[i] += _doTransferIn(pooledTokens[i], amounts[i]);\n            }\n        }\n\n        v.D1 = _getD(\n            _xp(v.newBalances, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\n            v.preciseA\n        );\n        require(v.D1 > v.D0, \"D should increase\");\n\n        // updated to reflect fees and calculate the user's LP tokens\n        v.D2 = v.D1;\n        uint256 toMint;\n\n        if (v.totalSupply > 0) {\n            uint256 feePerToken = _feePerToken(self);\n            for (uint256 i = 0; i < pooledTokens.length; i++) {\n                uint256 idealBalance = (v.D1 * self.balances[i]) / v.D0;\n                fees[i] = (feePerToken * _distance(idealBalance, v.newBalances[i])) / FEE_DENOMINATOR;\n                self.balances[i] = v.newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\n                v.newBalances[i] -= fees[i];\n            }\n            v.D2 = _getD(\n                _xp(v.newBalances, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\n                v.preciseA\n            );\n            toMint = ((v.D2 - v.D0) * v.totalSupply) / v.D0;\n        } else {\n            // the initial depositor doesn't pay fees\n            self.balances = v.newBalances;\n            toMint = v.D1;\n        }\n\n        require(toMint >= minToMint, \"Couldn't mint min requested\");\n        // mint the user's LP tokens\n        self.lpToken.mint(msg.sender, toMint);\n\n        emit AddLiquidity(msg.sender, amounts, fees, v.D1, toMint);\n\n        return toMint;\n    }\n\n    function removeLiquidity(\n        StableSwapStorage.SwapStorage storage self,\n        uint256 lpAmount,\n        uint256[] memory minAmounts\n    ) external returns (uint256[] memory amounts) {\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(lpAmount <= totalSupply);\n        uint256 nCoins = self.pooledTokens.length;\n\n        uint256[] memory fees = new uint256[](nCoins);\n        amounts = _calculateRemoveLiquidity(self, lpAmount);\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            require(amounts[i] >= minAmounts[i], \"> slippage\");\n            self.balances[i] = self.balances[i] - amounts[i];\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n        }\n\n        self.lpToken.burnFrom(msg.sender, lpAmount);\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\n    }\n\n    /**\n     * @notice Remove liquidity from the pool all in one token.\n     * @param self Swap struct to read from and write to\n     * @param metaSwapStorage MetaSwap struct to read from and write to\n     * @param tokenAmount the amount of the lp tokens to burn\n     * @param tokenIndex the index of the token you want to receive\n     * @param minAmount the minimum amount to withdraw, otherwise revert\n     * @return amount chosen token that user received\n     */\n    function removeLiquidityOneToken(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount\n    ) external returns (uint256) {\n        LPToken lpToken = self.lpToken;\n        uint256 totalSupply = lpToken.totalSupply();\n        uint256 numTokens = self.pooledTokens.length;\n        require(tokenAmount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\n        require(tokenIndex < numTokens, \"Token not found\");\n\n        uint256 dyFee;\n        uint256 dy;\n\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(\n            self,\n            tokenAmount,\n            tokenIndex,\n            _updateBaseVirtualPrice(metaSwapStorage),\n            totalSupply\n        );\n\n        require(dy >= minAmount, \"dy < minAmount\");\n\n        self.balances[tokenIndex] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\n        // Burn the associated LP token from the caller and send the desired token\n        lpToken.burnFrom(msg.sender, tokenAmount);\n        self.pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);\n\n        emit RemoveLiquidityOne(msg.sender, tokenIndex, tokenAmount, dy);\n\n        return dy;\n    }\n\n    /**\n     * @notice Remove liquidity from the pool, weighted differently than the\n     * pool's current balances.\n     *\n     * @param self Swap struct to read from and write to\n     * @param metaSwapStorage MetaSwap struct to read from and write to\n     * @param amounts how much of each token to withdraw\n     * @param maxBurnAmount the max LP token provider is willing to pay to\n     * remove liquidity. Useful as a front-running mitigation.\n     * @return actual amount of LP tokens burned in the withdrawal\n     */\n    function removeLiquidityImbalance(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint256[] memory amounts,\n        uint256 maxBurnAmount\n    ) external returns (uint256) {\n        // Using this struct to avoid stack too deep error\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\n            0,\n            0,\n            0,\n            self.lpToken,\n            0,\n            _getAPrecise(self),\n            _updateBaseVirtualPrice(metaSwapStorage),\n            self.tokenMultipliers,\n            self.balances\n        );\n        v.totalSupply = v.lpToken.totalSupply();\n\n        require(\n            amounts.length == v.newBalances.length,\n            \"Amounts should match pool tokens\"\n        );\n        require(maxBurnAmount != 0, \"Must burn more than 0\");\n\n        uint256 feePerToken = _feePerToken(self);\n\n        // Calculate how much LPToken should be burned\n        uint256[] memory fees = new uint256[](v.newBalances.length);\n        {\n            uint256[] memory balances1 = new uint256[](v.newBalances.length);\n            v.D0 = _getD(\n                _xp(v.newBalances, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\n                v.preciseA\n            );\n            for (uint256 i = 0; i < v.newBalances.length; i++) {\n                balances1[i] = v.newBalances[i] - amounts[i];\n            }\n            v.D1 = _getD(\n                _xp(balances1, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\n                v.preciseA\n            );\n\n            for (uint256 i = 0; i < v.newBalances.length; i++) {\n                uint256 idealBalance = (v.D1 * v.newBalances[i]) / v.D0;\n                uint256 difference = _distance(idealBalance, balances1[i]);\n                fees[i] = (feePerToken * difference) / FEE_DENOMINATOR;\n                self.balances[i] = balances1[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\n                balances1[i] -= fees[i];\n            }\n\n            v.D2 = _getD(\n                _xp(balances1, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\n                v.preciseA\n            );\n        }\n\n        uint256 tokenAmount = ((v.D0 - v.D2) * v.totalSupply) / v.D0;\n        require(tokenAmount != 0, \"Burnt amount cannot be zero\");\n\n        // Scale up by withdraw fee\n        tokenAmount += 1;\n        // Check for max burn amount\n        require(tokenAmount <= maxBurnAmount, \"tokenAmount > maxBurnAmount\");\n        \n        // Burn the calculated amount of LPToken from the caller and send the desired tokens\n        v.lpToken.burnFrom(msg.sender, tokenAmount);\n        for (uint256 i = 0; i < v.newBalances.length; i++) {\n            if (amounts[i] > 0) {\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n            }\n        }\n\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, v.D1, v.totalSupply - tokenAmount);\n\n        return tokenAmount;\n    }\n\n    /// VIEW FUNCTIONS\n\n    /**\n     * @notice Get the virtual price, to help calculate profit\n     * @param self Swap struct to read from\n     * @param metaSwapStorage MetaSwap struct to read from\n     * @return the virtual price, scaled to precision of BASE_VIRTUAL_PRICE_PRECISION\n     */\n    function getVirtualPrice(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage\n    ) external view returns (uint256) {\n        uint256 D = _getD(_xp(self, _getBaseVirtualPrice(metaSwapStorage)), _getAPrecise(self));\n        uint256 tokenSupply = self.lpToken.totalSupply();\n        if (tokenSupply != 0) {\n            return (D * BASE_VIRTUAL_PRICE_PRECISION) / tokenSupply;\n        }\n        return 0;\n    }\n\n    function calculateRemoveLiquidityOneToken(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint256 inAmount,\n        uint256 inIndex\n    ) external view returns (uint256 amount) {\n        (amount, ) = _calculateRemoveLiquidityOneToken(\n            self,\n            inAmount,\n            inIndex,\n            _getBaseVirtualPrice(metaSwapStorage),\n            self.lpToken.totalSupply()\n        );\n    }\n\n    function calculateSwap(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint256 inIndex,\n        uint256 outIndex,\n        uint256 inAmount\n    ) external view returns (uint256 outAmount) {\n        (outAmount, ) = _calculateSwap(\n            self, \n            inIndex, \n            outIndex, \n            inAmount, \n            _getBaseVirtualPrice(metaSwapStorage)\n        );\n    }\n\n    /**\n     * @notice Calculates the expected return amount from swapping between\n     * the pooled tokens and the underlying tokens of the base Swap pool.\n     *\n     * @param self Swap struct to read from\n     * @param metaSwapStorage MetaSwap struct from the same contract\n     * @param tokenIndexFrom the token to sell\n     * @param tokenIndexTo the token to buy\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @return dy the number of tokens the user will get\n     */\n    function calculateSwapUnderlying(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256) {\n        CalculateSwapUnderlyingInfo memory v = CalculateSwapUnderlyingInfo(\n            _getBaseVirtualPrice(metaSwapStorage),\n            metaSwapStorage.baseSwap,\n            0,\n            uint8(metaSwapStorage.baseTokens.length),\n            0,\n            0,\n            0\n        );\n        uint256[] memory xp = _xp(self, v.baseVirtualPrice);\n        v.baseLPTokenIndex = uint8(xp.length - 1);\n        {\n            uint8 maxRange = v.baseLPTokenIndex + v.baseTokensLength;\n            require(\n                tokenIndexFrom < maxRange && tokenIndexTo < maxRange,\n                \"Token index out of range\"\n            );\n        }\n\n        if (tokenIndexFrom < v.baseLPTokenIndex) {\n            // tokenFrom is from this pool\n            v.x = xp[tokenIndexFrom] + (dx * self.tokenMultipliers[tokenIndexFrom]);\n        } else {\n            // tokenFrom is from the base pool\n            tokenIndexFrom = tokenIndexFrom - v.baseLPTokenIndex;\n            if (tokenIndexTo < v.baseLPTokenIndex) {\n                uint256[] memory baseInputs = new uint256[](v.baseTokensLength);\n                baseInputs[tokenIndexFrom] = dx;\n                v.x = (\n                    v.baseSwap.calculateTokenAmount(baseInputs, true) * v.baseVirtualPrice\n                ) / BASE_VIRTUAL_PRICE_PRECISION;\n                // when adding to the base pool,you pay approx 50% of the swap fee\n                v.x = v.x \n                    - ((v.x * _getBaseSwapFee(metaSwapStorage.baseSwap)) / (FEE_DENOMINATOR * 2))\n                    + xp[v.baseLPTokenIndex];\n            } else {\n                return v.baseSwap.calculateSwap(\n                    tokenIndexFrom,\n                    tokenIndexTo - v.baseLPTokenIndex,\n                    dx\n                );\n            }\n            tokenIndexFrom = v.baseLPTokenIndex;\n        }\n\n        v.metaIndexTo = v.baseLPTokenIndex;\n        if (tokenIndexTo < v.baseLPTokenIndex) {\n            v.metaIndexTo = tokenIndexTo;\n        }\n\n        {\n            uint256 y = _getY(\n                self,\n                tokenIndexFrom,\n                v.metaIndexTo,\n                v.x,\n                xp\n            );\n            v.dy = xp[v.metaIndexTo] - y - 1;\n            uint256 dyFee = (v.dy * self.fee) / FEE_DENOMINATOR;\n            v.dy = v.dy - dyFee;\n        }\n\n        if (tokenIndexTo < v.baseLPTokenIndex) {\n            // tokenTo is from this pool\n            v.dy = v.dy / self.tokenMultipliers[v.metaIndexTo];\n        } else {\n            // tokenTo is from the base pool\n            v.dy = v.baseSwap.calculateRemoveLiquidityOneToken(\n                (v.dy * BASE_VIRTUAL_PRICE_PRECISION) / v.baseVirtualPrice,\n                tokenIndexTo - v.baseLPTokenIndex\n            );\n        }\n\n        return v.dy;\n    }\n\n    function calculateRemoveLiquidity(StableSwapStorage.SwapStorage storage self, uint256 amount)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return _calculateRemoveLiquidity(self, amount);\n    }\n\n    /**\n     * @notice A simple method to calculate prices from deposits or\n     * withdrawals, excluding fees but including slippage. This is\n     * helpful as an input into the various \"min\" parameters on calls\n     * to fight front-running\n     *\n     * @dev This shouldn't be used outside frontends for user estimates.\n     *\n     * @param self Swap struct to read from\n     * @param metaSwapStorage MetaSwap struct to read from\n     * @param amounts an array of token amounts to deposit or withdrawal,\n     * corresponding to pooledTokens. The amount should be in each\n     * pooled token's native precision. If a token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @param deposit whether this is a deposit or a withdrawal\n     * @return if deposit was true, total amount of lp token that will be minted and if\n     * deposit was false, total amount of lp token that will be burned\n     */\n    function calculateTokenAmount(\n        StableSwapStorage.SwapStorage storage self,\n        MetaSwap storage metaSwapStorage,\n        uint256[] calldata amounts,\n        bool deposit\n    ) external view returns (uint256) {\n        uint256 amp = _getAPrecise(self);\n        uint256 D0;\n        uint256 D1;\n        {\n            uint256 baseVirtualPrice = _getBaseVirtualPrice(metaSwapStorage);\n            uint256[] memory balances1 = self.balances;\n            uint256[] memory tokenPrecisionMultipliers = self.tokenMultipliers;\n            uint256 numTokens = balances1.length;\n            D0 = _getD(_xp(balances1, tokenPrecisionMultipliers, baseVirtualPrice), amp);\n            for (uint256 i = 0; i < numTokens; i++) {\n                if (deposit) {\n                    balances1[i] += amounts[i];\n                } else {\n                    balances1[i] -= amounts[i];\n                }\n            }\n            D1 = _getD(_xp(balances1, tokenPrecisionMultipliers, baseVirtualPrice), amp);\n        }\n        uint256 totalSupply = self.lpToken.totalSupply();\n        if (totalSupply == 0) {\n            return D1; // first depositor take it all\n        }\n        if (deposit) {\n            return ((D1 - D0) * totalSupply) / D0;\n        } else {\n            return ((D0 - D1) * totalSupply) / D0;\n        }\n    }\n\n    /// INTERNAL FUNCTIONS\n\n    /**\n     * @notice Return the stored value of base Swap's virtual price. If\n     * value was updated past BASE_CACHE_EXPIRE_TIME, then read it directly\n     * from the base Swap contract.\n     * @param metaSwapStorage MetaSwap struct to read from\n     * @return base Swap's virtual price\n     */\n    function _getBaseVirtualPrice(MetaSwap storage metaSwapStorage) internal view returns (uint256) {\n        if (block.timestamp > metaSwapStorage.baseCacheLastUpdated + BASE_CACHE_EXPIRE_TIME) {\n            return metaSwapStorage.baseSwap.getVirtualPrice();\n        }\n        return metaSwapStorage.baseVirtualPrice;\n    }\n\n    function _getBaseSwapFee(IStableSwap baseSwap)\n        internal\n        view\n        returns (uint256 fee)\n    {\n        (, fee, , , , , ) = baseSwap.swapStorage();\n    }\n\n\n    function _calculateRemoveLiquidity(StableSwapStorage.SwapStorage storage self, uint256 amount)\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(amount <= totalSupply, \"Cannot exceed total supply\");\n\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\n\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\n            amounts[i] = (self.balances[i] * (amount)) / (totalSupply);\n        }\n        return amounts;\n    }\n\n    function _calculateRemoveLiquidityOneToken(\n        StableSwapStorage.SwapStorage storage self,\n        uint256 inAmount,\n        uint256 inIndex,\n        uint256 baseVirtualPrice,\n        uint256 totalSupply\n    ) internal view returns(uint256, uint256) {\n        uint256 dy;\n        uint256 swapFee;\n        {\n            uint256 currentY;\n            uint256 newY;\n\n            (dy, newY, currentY) = _calculateRemoveLiquidityOneTokenDY(\n                self,\n                inIndex,\n                inAmount,\n                baseVirtualPrice,\n                totalSupply\n            );\n            swapFee = ((currentY - newY) / self.tokenMultipliers[inIndex]) - dy;\n        }\n\n        return (dy, swapFee);\n    }\n\n    function _calculateRemoveLiquidityOneTokenDY(\n        StableSwapStorage.SwapStorage storage self,\n        uint256 inIndex,\n        uint256 inAmount,\n        uint256 baseVirtualPrice,\n        uint256 totalSupply\n    ) internal view returns (uint256, uint256, uint256) {\n        // Get the current D, then solve the stableswap invariant\n        // y_i for D - tokenAmount\n        uint256[] memory xp = _xp(self, baseVirtualPrice);\n        require(inIndex < xp.length, \"Token index out of range\");\n        CalculateRemoveLiquidityOneTokenInfo memory v = CalculateRemoveLiquidityOneTokenInfo(\n            0,\n            0,\n            0,\n            0,\n            _getAPrecise(self),\n            0\n        );\n        v.D0 = _getD(xp, v.preciseA);\n        v.D1 = v.D0 - ((inAmount * v.D0) / totalSupply);\n\n        require(inAmount <= xp[inIndex], \"Withdraw exceeds available\");\n        v.newY = _getYD(self, v.preciseA, inIndex, xp, v.D1);\n        uint256[] memory xpReduced = new uint256[](xp.length);\n        v.feePerToken = _feePerToken(self);\n\n        for (uint256 i = 0; i < xp.length; i++) {\n            v.xpi = xp[i];\n            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\n            // else dxExpected = xp[i] - (xp[i] * d1 / d0)\n            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\n            xpReduced[i] = v.xpi - (\n                (\n                    (i == inIndex)\n                        ? ((v.xpi * v.D1) / v.D0) - v.newY\n                        : v.xpi - ((v.xpi * v.D1) / v.D0)\n                ) * v.feePerToken / FEE_DENOMINATOR\n            );\n        }\n\n        uint256 dy = xpReduced[inIndex] - (\n            _getYD(self, v.preciseA, inIndex, xpReduced, v.D1)\n        );\n\n        if (inIndex == xp.length - 1) {\n            dy = (dy * BASE_VIRTUAL_PRICE_PRECISION) / baseVirtualPrice;\n            v.newY = (v.newY * BASE_VIRTUAL_PRICE_PRECISION) / baseVirtualPrice;\n            xp[inIndex] = (xp[inIndex] * BASE_VIRTUAL_PRICE_PRECISION) / baseVirtualPrice;\n        }\n        dy = (dy - 1) * self.tokenMultipliers[inIndex];\n\n        return (dy, v.newY, xp[inIndex]);\n    }\n\n    function _calculateSwap(\n        StableSwapStorage.SwapStorage storage self,\n        uint256 inIndex,\n        uint256 outIndex,\n        uint256 inAmount,\n        uint256 baseVirtualPrice\n    ) internal view returns (uint256 outAmount, uint256 fee) {\n        uint256[] memory normalizedBalances = _xp(self, baseVirtualPrice);\n        require(\n            inIndex < normalizedBalances.length && outIndex < normalizedBalances.length, \n            \"Token index out of range\"\n        );\n        uint256 baseLPTokenIndex = normalizedBalances.length - 1;\n\n        uint256 newInBalance = inAmount * self.tokenMultipliers[inIndex];\n        if (inIndex == baseLPTokenIndex) {\n            newInBalance = (newInBalance * baseVirtualPrice) / BASE_VIRTUAL_PRICE_PRECISION;\n        }\n        newInBalance = newInBalance + normalizedBalances[inIndex];\n\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\n        outAmount = normalizedBalances[outIndex] - outBalance - 1;\n        if (outIndex == baseLPTokenIndex) {\n            outAmount = (outAmount * BASE_VIRTUAL_PRICE_PRECISION) / baseVirtualPrice;\n        }\n\n        fee = (outAmount * self.fee) / FEE_DENOMINATOR;\n        outAmount = outAmount - fee;\n        outAmount = outAmount / self.tokenMultipliers[outIndex];\n    }\n\n    /**\n     * Ramping A up or down, return A with precision of A_PRECISION\n     */\n    function _getAPrecise(StableSwapStorage.SwapStorage storage self) internal view returns (uint256) {\n        if (block.timestamp >= self.futureATime) {\n            return self.futureA;\n        }\n\n        if (self.futureA > self.initialA) {\n            return\n                self.initialA +\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\n                (self.futureATime - self.initialATime);\n        }\n\n        return\n            self.initialA -\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\n            (self.futureATime - self.initialATime);\n    }\n\n    /**\n     * normalized balances of each tokens.\n     */\n    function _xp(\n        uint256[] memory balances, \n        uint256[] memory rates\n    ) internal pure returns (uint256[] memory) {\n        require(\n            balances.length == rates.length,\n            \"Balances must match rates\"\n        );\n        uint256[] memory xp = new uint256[](balances.length);\n        for (uint256 i = 0; i < balances.length; i++) {\n            xp[i] = (rates[i] * balances[i]);\n        }\n\n        return xp;\n    }\n\n    function _xp(\n        uint256[] memory balances, \n        uint256[] memory rates,\n        uint256 baseVirtualPrice\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory xp = _xp(balances, rates);\n        uint256 baseLPTokenIndex = balances.length - 1;\n        xp[baseLPTokenIndex] = (xp[baseLPTokenIndex] * baseVirtualPrice) / BASE_VIRTUAL_PRICE_PRECISION;\n        return xp;\n    }\n\n    function _xp(\n        StableSwapStorage.SwapStorage storage self, \n        uint256 baseVirtualPrice\n    ) internal view returns (uint256[] memory) {\n        return _xp(\n            self.balances,\n            self.tokenMultipliers,\n            baseVirtualPrice\n        );\n    }\n\n    /**\n     * Calculate D for *NORMALIZED* balances of each tokens\n     * @param xp normalized balances of token\n     */\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\n        uint256 nCoins = xp.length;\n        uint256 sum = _sumOf(xp);\n        if (sum == 0) {\n            return 0;\n        }\n\n        uint256 Dprev = 0;\n        uint256 D = sum;\n        uint256 Ann = amp * nCoins;\n\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\n            uint256 D_P = D;\n            for (uint256 j = 0; j < xp.length; j++) {\n                D_P = (D_P * D) / (xp[j] * nCoins);\n            }\n            Dprev = D;\n            D =\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\n            if (_distance(D, Dprev) <= 1) {\n                return D;\n            }\n        }\n\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n        // function which does not rely on D.\n        revert(\"invariantCalculationFailed\");\n    }\n\n     /**\n     * calculate new balance of when swap\n     * Done by solving quadratic equation iteratively.\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n     *  x_1**2 + b*x_1 = c\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\n     * @param inIndex index of token to swap in\n     * @param outIndex index of token to swap out\n     * @param inBalance new balance (normalized) of input token if the swap success\n     * @return NORMALIZED balance of output token if the swap success\n     */\n    function _getY(\n        StableSwapStorage.SwapStorage storage self,\n        uint256 inIndex,\n        uint256 outIndex,\n        uint256 inBalance,\n        uint256[] memory normalizedBalances\n    ) internal view returns (uint256) {\n        require(inIndex != outIndex, \"sameToken\");\n        uint256 nCoins = self.pooledTokens.length;\n        require(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n        uint256 amp = _getAPrecise(self);\n        uint256 Ann = amp * nCoins;\n        uint256 D = _getD(normalizedBalances, amp);\n\n        uint256 sum = 0; // sum of new balances except output token\n        uint256 c = D;\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (i == outIndex) {\n                continue;\n            }\n\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\n            sum += x;\n            c = (c * D) / (x * nCoins);\n        }\n\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\n        uint256 b = sum + (D * A_PRECISION) / Ann;\n\n        uint256 lastY = 0;\n        uint256 y = D;\n\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\n            lastY = y;\n            y = (y * y + c) / (2 * y + b - D);\n            if (_distance(lastY, y) <= 1) {\n                return y;\n            }\n        }\n\n        revert(\"yCalculationFailed\");\n    }\n\n    function _getYD(\n        StableSwapStorage.SwapStorage storage self,\n        uint256 A,\n        uint256 index,\n        uint256[] memory xp,\n        uint256 D\n    ) internal view returns (uint256) {\n        uint256 nCoins = self.pooledTokens.length;\n        assert(index < nCoins);\n        uint256 Ann = A * nCoins;\n        uint256 c = D;\n        uint256 s = 0;\n        uint256 _x = 0;\n        uint256 yPrev = 0;\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (i == index) {\n                continue;\n            }\n            _x = xp[i];\n            s += _x;\n            c = (c * D) / (_x * nCoins);\n        }\n\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\n        uint256 b = s + (D * A_PRECISION) / Ann;\n        uint256 y = D;\n\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\n            yPrev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            if (_distance(yPrev, y) <= 1) {\n                return y;\n            }\n        }\n        revert(\"invariantCalculationFailed\");\n    }\n\n    function _feePerToken(StableSwapStorage.SwapStorage storage self) internal view returns (uint256) {\n        uint256 nCoins = self.pooledTokens.length;\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\n    }\n\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\n        uint256 priorBalance = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        return token.balanceOf(address(this)) - priorBalance;\n    }\n\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\n        sum = 0;\n        for (uint256 i = 0; i < x.length; i++) {\n            sum += x[i];\n        }\n    }\n\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x > y ? x - y : y - x;\n    }\n\n     /**\n     * @notice Determines if the stored value of base Swap's virtual price is expired.\n     * If the last update was past the BASE_CACHE_EXPIRE_TIME, then update the stored value.\n     *\n     * @param metaSwapStorage MetaSwap struct to read from and write to\n     * @return base Swap's virtual price\n     */\n    function _updateBaseVirtualPrice(MetaSwap storage metaSwapStorage) internal returns (uint256) {\n        if (\n            block.timestamp >\n            metaSwapStorage.baseCacheLastUpdated + BASE_CACHE_EXPIRE_TIME\n        ) {\n            // When the cache is expired, update it\n            uint256 baseVirtualPrice = IStableSwap(metaSwapStorage.baseSwap).getVirtualPrice();\n            metaSwapStorage.baseVirtualPrice = baseVirtualPrice;\n            metaSwapStorage.baseCacheLastUpdated = block.timestamp;\n            return baseVirtualPrice;\n        } else {\n            return metaSwapStorage.baseVirtualPrice;\n        }\n    }\n}\n"
    },
    "contracts/stableswap/interfaces/IStableSwapCallee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStableSwapCallee {\n    function zenlinkStableSwapCall(\n        address sender, \n        IERC20[] memory tokens,\n        uint256[] memory amounts, \n        uint256[] memory fees, \n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/stableswap/StableSwapStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IStableSwapCallee.sol\";\nimport \"./LPToken.sol\";\n\n/**\n * StableSwap main algorithm\n */\nlibrary StableSwapStorage {\n    using SafeERC20 for IERC20;\n\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] token_amounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n\n    event FlashLoan(\n        address indexed caller,\n        address indexed receiver,\n        uint256[] amounts_out\n    );\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 sold_id,\n        uint256 tokens_sold,\n        uint256 bought_id,\n        uint256 tokens_bought\n    );\n\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\n\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\n\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] token_amounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n\n    uint256 public constant FEE_DENOMINATOR = 1e10;\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\n    /// so we add some (small) PRECISION when divide in each iteration\n    uint256 public constant A_PRECISION = 100;\n    /// @dev max iteration of converge calculate\n    uint256 internal constant MAX_ITERATION = 256;\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\n\n    struct SwapStorage {\n        IERC20[] pooledTokens;\n        LPToken lpToken;\n        uint256[] tokenMultipliers; // token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\n        uint256[] balances; // effective balance which might different from token balance of the contract 'cause it hold admin fee as well\n        uint256 fee; // swap fee ratio. Charge on any action which move balance state far from the ideal state\n        uint256 adminFee; // admin fee in ratio of swap fee.\n        uint256 initialA; // observation of A, multiplied with A_PRECISION\n        uint256 futureA;\n        uint256 initialATime;\n        uint256 futureATime;\n    }\n\n    /**\n     * @notice Deposit coins into the pool\n     * @param amounts List of amounts of coins to deposit\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\n     * @return mintAmount Amount of LP tokens received by depositing\n     */\n    function addLiquidity(\n        SwapStorage storage self,\n        uint256[] memory amounts,\n        uint256 minMintAmount\n    ) external returns (uint256 mintAmount) {\n        uint256 nCoins = self.pooledTokens.length;\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\n        uint256[] memory fees = new uint256[](nCoins);\n        uint256 _fee = _feePerToken(self);\n\n        uint256 tokenSupply = self.lpToken.totalSupply();\n        uint256 amp = _getAPrecise(self);\n\n        uint256 D0 = 0;\n        if (tokenSupply > 0) {\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\n        }\n\n        uint256[] memory newBalances = self.balances;\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (tokenSupply == 0) {\n                require(amounts[i] > 0, \"initialDepositRequireAllTokens\");\n            }\n            // get real transfer in amount\n            if (amounts[i] > 0) {\n                newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\n            }\n        }\n\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        assert(D1 > D0); // double check\n\n        if (tokenSupply == 0) {\n            self.balances = newBalances;\n            mintAmount = D1;\n        } else {\n            uint256 diff = 0;\n            for (uint256 i = 0; i < nCoins; i++) {\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\n                newBalances[i] -= fees[i];\n            }\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\n        }\n\n        require(mintAmount >= minMintAmount, \"> slippage\");\n\n        self.lpToken.mint(msg.sender, mintAmount);\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\n    }\n\n    function flashLoan(\n        SwapStorage storage self,\n        uint256[] memory amountsOut,\n        address to,\n        bytes calldata data\n    ) external {\n        uint256 nCoins = self.pooledTokens.length;\n        require(amountsOut.length == nCoins, \"invalidAmountsLength\");\n        {\n            uint256 tokenSupply = self.lpToken.totalSupply();\n            require(tokenSupply > 0, \"insufficientLiquidity\");\n        }\n        uint256[] memory fees = new uint256[](nCoins);\n        uint256 _fee = _feePerToken(self);\n        uint256 amp = _getAPrecise(self);\n        uint256 D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (amountsOut[i] > 0) {\n                require(amountsOut[i] < self.balances[i], \"insufficientBalance\");\n                fees[i] = (_fee * amountsOut[i]) / FEE_DENOMINATOR;\n                self.pooledTokens[i].safeTransfer(to, amountsOut[i]);\n            }\n        }\n\n        if (data.length > 0) {\n            IStableSwapCallee(to).zenlinkStableSwapCall(\n                msg.sender, \n                self.pooledTokens,\n                amountsOut, \n                fees, \n                data\n            );\n        }\n\n        uint256[] memory newBalances = self.balances;\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (amountsOut[i] > 0) {\n                newBalances[i] += (_doTransferIn(self.pooledTokens[i], amountsOut[i] + fees[i]) - amountsOut[i]);\n            }\n        }\n\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        assert(D1 > D0);\n\n        uint256 diff = 0;\n        for (uint256 i = 0; i < nCoins; i++) {\n            diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\n        }\n\n        emit FlashLoan(msg.sender, to, amountsOut);\n    }\n\n    function swap(\n        SwapStorage storage self,\n        uint256 i,\n        uint256 j,\n        uint256 inAmount,\n        uint256 minOutAmount\n    ) external returns (uint256) {\n        IERC20 inCoin = self.pooledTokens[i];\n        uint256[] memory normalizedBalances = _xp(self);\n        inAmount = _doTransferIn(inCoin, inAmount);\n\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\n\n        uint256 dy = normalizedBalances[j] - y - 1; // just in case there were some rounding errors\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\n\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\n\n        require(dy >= minOutAmount, \"> slippage\");\n\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\n\n        // update balances\n        self.balances[i] += inAmount;\n        self.balances[j] -= dy + _adminFee;\n\n        self.pooledTokens[j].safeTransfer(msg.sender, dy);\n        emit TokenExchange(msg.sender, i, inAmount, j, dy);\n        return dy;\n    }\n\n    function removeLiquidity(\n        SwapStorage storage self,\n        uint256 lpAmount,\n        uint256[] memory minAmounts\n    ) external returns (uint256[] memory amounts) {\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(lpAmount <= totalSupply);\n        uint256 nCoins = self.pooledTokens.length;\n\n        uint256[] memory fees = new uint256[](nCoins);\n        amounts = _calculateRemoveLiquidity(self, lpAmount);\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            require(amounts[i] >= minAmounts[i], \"> slippage\");\n            self.balances[i] = self.balances[i] - amounts[i];\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n        }\n\n        self.lpToken.burnFrom(msg.sender, lpAmount);\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\n    }\n\n    function removeLiquidityOneToken(\n        SwapStorage storage self,\n        uint256 lpAmount,\n        uint256 index,\n        uint256 minAmount\n    ) external returns (uint256) {\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(totalSupply > 0, \"totalSupply = 0\");\n        uint256 numTokens = self.pooledTokens.length;\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \"> balance\");\n        require(lpAmount <= totalSupply, \"> totalSupply\");\n        require(index < numTokens, \"tokenNotFound\");\n\n        uint256 dyFee;\n        uint256 dy;\n\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, lpAmount, index);\n\n        require(dy >= minAmount, \"> slippage\");\n\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\n        self.lpToken.burnFrom(msg.sender, lpAmount);\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\n\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\n\n        return dy;\n    }\n\n    function removeLiquidityImbalance(\n        SwapStorage storage self,\n        uint256[] memory amounts,\n        uint256 maxBurnAmount\n    ) external returns (uint256 burnAmount) {\n        uint256 nCoins = self.pooledTokens.length;\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(totalSupply != 0, \"totalSupply = 0\");\n        uint256 _fee = _feePerToken(self);\n        uint256 amp = _getAPrecise(self);\n\n        uint256[] memory newBalances = self.balances;\n        uint256 D0 = _getD(_xp(self), amp);\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            newBalances[i] -= amounts[i];\n        }\n\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        uint256[] memory fees = new uint256[](nCoins);\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\n            uint256 diff = _distance(newBalances[i], idealBalance);\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\n            newBalances[i] -= fees[i];\n        }\n\n        // recalculate invariant with fee charged balances\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\n        assert(burnAmount > 0);\n        burnAmount += 1; // in case of rounding errors\n        require(burnAmount <= maxBurnAmount, \"> slippage\");\n\n        self.lpToken.burnFrom(msg.sender, burnAmount);\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (amounts[i] != 0) {\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n            }\n        }\n\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\n    }\n\n    /// VIEW FUNCTIONS\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\n        return _getAPrecise(self);\n    }\n\n    /**\n     * Returns portfolio virtual price (for calculating profit)\n     * scaled up by 1e18\n     */\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\n        uint256 tokenSupply = self.lpToken.totalSupply();\n        if (tokenSupply > 0) {\n            return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\n        }\n        return 0;\n    }\n\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\n        require(index < self.pooledTokens.length, \"indexOutOfRange\");\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\n    }\n\n    /**\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\n     * without taking fees into account\n     */\n    function calculateTokenAmount(\n        SwapStorage storage self,\n        uint256[] memory amounts,\n        bool deposit\n    ) external view returns (uint256) {\n        uint256 nCoins = self.pooledTokens.length;\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\n        uint256 amp = _getAPrecise(self);\n        uint256 D0 = _getD(_xp(self), amp);\n\n        uint256[] memory newBalances = self.balances;\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (deposit) {\n                newBalances[i] += amounts[i];\n            } else {\n                newBalances[i] -= amounts[i];\n            }\n        }\n\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        uint256 totalSupply = self.lpToken.totalSupply();\n\n        if (totalSupply == 0) {\n            return D1; // first depositor take it all\n        }\n\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\n        return (diff * self.lpToken.totalSupply()) / D0;\n    }\n\n    function getA(SwapStorage storage self) external view returns (uint256) {\n        return _getAPrecise(self) / A_PRECISION;\n    }\n\n    function calculateSwap(\n        SwapStorage storage self,\n        uint256 inIndex,\n        uint256 outIndex,\n        uint256 inAmount\n    ) external view returns (uint256) {\n        uint256[] memory normalizedBalances = _xp(self);\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance - 1) / self.tokenMultipliers[outIndex];\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\n        return outAmount - _fee;\n    }\n\n    function calculateRemoveLiquidity(SwapStorage storage self, uint256 amount)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return _calculateRemoveLiquidity(self, amount);\n    }\n\n    function calculateRemoveLiquidityOneToken(\n        SwapStorage storage self,\n        uint256 lpAmount,\n        uint256 tokenIndex\n    ) external view returns (uint256 amount) {\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, lpAmount, tokenIndex);\n    }\n\n    /// INTERNAL FUNCTIONS\n\n    /**\n     * Ramping A up or down, return A with precision of A_PRECISION\n     */\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\n        if (block.timestamp >= self.futureATime) {\n            return self.futureA;\n        }\n\n        if (self.futureA > self.initialA) {\n            return\n                self.initialA +\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\n                (self.futureATime - self.initialATime);\n        }\n\n        return\n            self.initialA -\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\n            (self.futureATime - self.initialATime);\n    }\n\n    /**\n     * normalized balances of each tokens.\n     */\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\n        for (uint256 i = 0; i < balances.length; i++) {\n            rates[i] = (rates[i] * balances[i]);\n        }\n\n        return rates;\n    }\n\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\n        return _xp(self.balances, self.tokenMultipliers);\n    }\n\n    /**\n     * Calculate D for *NORMALIZED* balances of each tokens\n     * @param xp normalized balances of token\n     */\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\n        uint256 nCoins = xp.length;\n        uint256 sum = _sumOf(xp);\n        if (sum == 0) {\n            return 0;\n        }\n\n        uint256 Dprev = 0;\n        uint256 D = sum;\n        uint256 Ann = amp * nCoins;\n\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\n            uint256 D_P = D;\n            for (uint256 j = 0; j < xp.length; j++) {\n                D_P = (D_P * D) / (xp[j] * nCoins);\n            }\n            Dprev = D;\n            D =\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\n            if (_distance(D, Dprev) <= 1) {\n                return D;\n            }\n        }\n\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n        // function which does not rely on D.\n        revert(\"invariantCalculationFailed\");\n    }\n\n    /**\n     * calculate new balance of when swap\n     * Done by solving quadratic equation iteratively.\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n     *  x_1**2 + b*x_1 = c\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\n     * @param inIndex index of token to swap in\n     * @param outIndex index of token to swap out\n     * @param inBalance new balance (normalized) of input token if the swap success\n     * @return NORMALIZED balance of output token if the swap success\n     */\n    function _getY(\n        SwapStorage storage self,\n        uint256 inIndex,\n        uint256 outIndex,\n        uint256 inBalance,\n        uint256[] memory normalizedBalances\n    ) internal view returns (uint256) {\n        require(inIndex != outIndex, \"sameToken\");\n        uint256 nCoins = self.pooledTokens.length;\n        require(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n        uint256 amp = _getAPrecise(self);\n        uint256 Ann = amp * nCoins;\n        uint256 D = _getD(normalizedBalances, amp);\n\n        uint256 sum = 0; // sum of new balances except output token\n        uint256 c = D;\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (i == outIndex) {\n                continue;\n            }\n\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\n            sum += x;\n            c = (c * D) / (x * nCoins);\n        }\n\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\n        uint256 b = sum + (D * A_PRECISION) / Ann;\n\n        uint256 lastY = 0;\n        uint256 y = D;\n\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\n            lastY = y;\n            y = (y * y + c) / (2 * y + b - D);\n            if (_distance(lastY, y) <= 1) {\n                return y;\n            }\n        }\n\n        revert(\"yCalculationFailed\");\n    }\n\n    function _calculateRemoveLiquidity(SwapStorage storage self, uint256 amount)\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(amount <= totalSupply, \"Cannot exceed total supply\");\n\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\n\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\n            amounts[i] = (self.balances[i] * (amount)) / (totalSupply);\n        }\n        return amounts;\n    }\n\n    function _calculateRemoveLiquidityOneToken(\n        SwapStorage storage self,\n        uint256 tokenAmount,\n        uint256 index\n    ) internal view returns (uint256 dy, uint256 fee) {\n        require(index < self.pooledTokens.length, \"indexOutOfRange\");\n        uint256 amp = _getAPrecise(self);\n        uint256[] memory xp = _xp(self);\n        uint256 D0 = _getD(xp, amp);\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\n        uint256 newY = _getYD(self, amp, index, xp, D1);\n        uint256[] memory reducedXP = xp;\n        uint256 _fee = _feePerToken(self);\n\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\n            uint256 expectedDx = 0;\n            if (i == index) {\n                expectedDx = (xp[i] * D1) / D0 - newY;\n            } else {\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\n            }\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\n        }\n\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\n        dy = (dy - 1) / self.tokenMultipliers[index];\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\n    }\n\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\n        uint256 nCoins = self.pooledTokens.length;\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\n    }\n\n    function _getYD(\n        SwapStorage storage self,\n        uint256 A,\n        uint256 index,\n        uint256[] memory xp,\n        uint256 D\n    ) internal view returns (uint256) {\n        uint256 nCoins = self.pooledTokens.length;\n        assert(index < nCoins);\n        uint256 Ann = A * nCoins;\n        uint256 c = D;\n        uint256 s = 0;\n        uint256 _x = 0;\n        uint256 yPrev = 0;\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (i == index) {\n                continue;\n            }\n            _x = xp[i];\n            s += _x;\n            c = (c * D) / (_x * nCoins);\n        }\n\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\n        uint256 b = s + (D * A_PRECISION) / Ann;\n        uint256 y = D;\n\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\n            yPrev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            if (_distance(yPrev, y) <= 1) {\n                return y;\n            }\n        }\n        revert(\"invariantCalculationFailed\");\n    }\n\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\n        uint256 priorBalance = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        return token.balanceOf(address(this)) - priorBalance;\n    }\n\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\n        sum = 0;\n        for (uint256 i = 0; i < x.length; i++) {\n            sum += x[i];\n        }\n    }\n\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x > y ? x - y : y - x;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/stableswap/OwnerPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"../libraries/AdminUpgradeable.sol\";\n\nabstract contract OwnerPausable is Pausable, AdminUpgradeable {\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n}\n"
    },
    "contracts/stableswap/StableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./OwnerPausable.sol\";\nimport \"./StableSwapStorage.sol\";\nimport \"./interfaces/IStableSwap.sol\";\n\ncontract StableSwap is OwnerPausable, ReentrancyGuard, Initializable, IStableSwap {\n    using StableSwapStorage for StableSwapStorage.SwapStorage;\n    using SafeERC20 for IERC20;\n\n    /// constants\n    uint256 public constant MIN_RAMP_TIME = 1 days;\n    uint256 public constant MAX_A = 1e6; // max_a with precision\n    uint256 public constant MAX_A_CHANGE = 10;\n    uint256 public constant MAX_ADMIN_FEE = 1e10; // 100%\n    uint256 public constant MAX_SWAP_FEE = 1e8; // 1%\n\n    /// STATE VARS\n    StableSwapStorage.SwapStorage public override swapStorage;\n    address public feeDistributor;\n    address public feeController;\n    mapping(address => uint8) public tokenIndexes;\n\n    modifier deadlineCheck(uint256 _deadline) {\n        require(block.timestamp <= _deadline, \"timeout\");\n        _;\n    }\n\n    modifier onlyFeeControllerOrOwner() {\n        require(msg.sender == feeController || msg.sender == admin, \"!feeControllerOrOwner\");\n        _;\n    }\n\n    constructor () {\n        _initializeAdmin(msg.sender);\n    }\n\n    function initialize(\n        address[] memory _coins,\n        uint8[] memory _decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _adminFee,\n        address _feeDistributor\n    ) public virtual onlyAdmin initializer {\n        require(_coins.length == _decimals.length, \"coinsLength != decimalsLength\");\n        require(_feeDistributor != address(0), \"feeDistributor = empty\");\n        uint256 numberOfCoins = _coins.length;\n        uint256[] memory rates = new uint256[](numberOfCoins);\n        IERC20[] memory coins = new IERC20[](numberOfCoins);\n        for (uint256 i = 0; i < numberOfCoins; i++) {\n            require(_coins[i] != address(0), \"invalidTokenAddress\");\n            require(_decimals[i] <= StableSwapStorage.POOL_TOKEN_COMMON_DECIMALS, \"invalidDecimals\");\n            rates[i] = 10**(StableSwapStorage.POOL_TOKEN_COMMON_DECIMALS - _decimals[i]);\n            coins[i] = IERC20(_coins[i]);\n            tokenIndexes[address(coins[i])] = uint8(i);\n        }\n\n        require(_A < MAX_A, \"> maxA\");\n        require(_fee <= MAX_SWAP_FEE, \"> maxSwapFee\");\n        require(_adminFee <= MAX_ADMIN_FEE, \"> maxAdminFee\");\n\n        swapStorage.lpToken = new LPToken(lpTokenName, lpTokenSymbol);\n        swapStorage.balances = new uint256[](numberOfCoins);\n        swapStorage.tokenMultipliers = rates;\n        swapStorage.pooledTokens = coins;\n        swapStorage.initialA = _A * StableSwapStorage.A_PRECISION;\n        swapStorage.futureA = _A * StableSwapStorage.A_PRECISION;\n        swapStorage.fee = _fee;\n        swapStorage.adminFee = _adminFee;\n        feeDistributor = _feeDistributor;\n    }\n\n    /// PUBLIC FUNCTIONS\n    function addLiquidity(\n        uint256[] memory amounts,\n        uint256 minMintAmount,\n        uint256 deadline\n    ) external virtual override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\n        return swapStorage.addLiquidity(amounts, minMintAmount);\n    }\n\n    function flashLoan(\n        uint256[] memory amountsOut,\n        address to,\n        bytes calldata data,\n        uint256 deadline\n    ) external virtual override whenNotPaused nonReentrant deadlineCheck(deadline) {\n        swapStorage.flashLoan(amountsOut, to, data);\n    }\n\n    function swap(\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount,\n        uint256 minOutAmount,\n        uint256 deadline\n    ) external virtual override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\n        return swapStorage.swap(fromIndex, toIndex, inAmount, minOutAmount);\n    }\n\n    function removeLiquidity(\n        uint256 lpAmount,\n        uint256[] memory minAmounts,\n        uint256 deadline\n    ) external virtual override nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\n        return swapStorage.removeLiquidity(lpAmount, minAmounts);\n    }\n\n    function removeLiquidityOneToken(\n        uint256 lpAmount,\n        uint8 index,\n        uint256 minAmount,\n        uint256 deadline\n    ) external virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\n        return swapStorage.removeLiquidityOneToken(lpAmount, index, minAmount);\n    }\n\n    function removeLiquidityImbalance(\n        uint256[] memory amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\n        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\n    }\n\n    /// VIEW FUNCTIONS\n\n    function getVirtualPrice() external virtual view override returns (uint256) {\n        return swapStorage.getVirtualPrice();\n    }\n\n    function getA() external virtual view override returns (uint256) {\n        return swapStorage.getA();\n    }\n\n    function getAPrecise() external virtual view override returns (uint256) {\n        return swapStorage.getAPrecise();\n    }\n\n    function getTokens() external virtual view override returns (IERC20[] memory) {\n        return swapStorage.pooledTokens;\n    }\n\n    function getToken(uint8 index) external virtual view override returns (IERC20) {\n        return swapStorage.pooledTokens[index];\n    }\n\n    function getLpToken() external virtual view override returns (IERC20) {\n        return swapStorage.lpToken;\n    }\n\n    function getTokenIndex(address token) external virtual view override returns (uint8 index) {\n        index = tokenIndexes[token];\n        require(address(swapStorage.pooledTokens[index]) == token, \"tokenNotFound\");\n    }\n\n    function getTokenPrecisionMultipliers() external virtual view returns (uint256[] memory) {\n        return swapStorage.tokenMultipliers;\n    }\n\n    function getTokenBalances() external virtual view override returns (uint256[] memory) {\n        return swapStorage.balances;\n    }\n\n    function getTokenBalance(uint8 index) external virtual view override returns (uint256) {\n        return swapStorage.balances[index];\n    }\n\n    function getNumberOfTokens() external virtual view override returns (uint256) {\n        return swapStorage.pooledTokens.length;\n    }\n\n    function getAdminBalances() external virtual view override returns (uint256[] memory adminBalances) {\n        uint256 length = swapStorage.pooledTokens.length;\n        adminBalances = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            adminBalances[i] = swapStorage.getAdminBalance(i);\n        }\n    }\n\n    function getAdminBalance(uint8 index) external virtual view override returns (uint256) {\n        return swapStorage.getAdminBalance((index));\n    }\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external virtual view override returns (uint256) {\n        return swapStorage.calculateTokenAmount(amounts, deposit);\n    }\n\n    function calculateSwap(\n        uint8 inIndex,\n        uint8 outIndex,\n        uint256 inAmount\n    ) external virtual view override returns (uint256) {\n        return swapStorage.calculateSwap(inIndex, outIndex, inAmount);\n    }\n\n    function calculateRemoveLiquidity(uint256 amount) external virtual view override returns (uint256[] memory) {\n        return swapStorage.calculateRemoveLiquidity(amount);\n    }\n\n    function calculateRemoveLiquidityOneToken(uint256 amount, uint8 index) external virtual view override returns (uint256) {\n        return swapStorage.calculateRemoveLiquidityOneToken(amount, index);\n    }\n\n    /// RESTRICTED FUNCTION\n\n    /**\n     * @notice Sets the admin fee\n     * @dev adminFee cannot be higher than 100% of the swap fee\n     * swap fee cannot be higher than 1% of each swap\n     * @param newSwapFee new swap fee to be applied on future transactions\n     * @param newAdminFee new admin fee to be applied on future transactions\n     */\n    function setFee(uint256 newSwapFee, uint256 newAdminFee) external onlyAdmin {\n        require(newSwapFee <= MAX_SWAP_FEE, \"> maxSwapFee\");\n        require(newAdminFee <= MAX_ADMIN_FEE, \"> maxAdminFee\");\n        swapStorage.adminFee = newAdminFee;\n        swapStorage.fee = newSwapFee;\n        emit NewFee(newSwapFee, newAdminFee);\n    }\n\n    /**\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\n     * the limit range.\n     * @param futureA the new A to ramp towards\n     * @param futureATime timestamp when the new A should be reached\n     */\n    function rampA(uint256 futureA, uint256 futureATime) external onlyAdmin {\n        require(block.timestamp >= swapStorage.initialATime + (1 days), \"< rampDelay\"); // please wait 1 days before start a new ramping\n        require(futureATime >= block.timestamp + (MIN_RAMP_TIME), \"< minRampTime\");\n        require(0 < futureA && futureA < MAX_A, \"outOfRange\");\n\n        uint256 initialAPrecise = swapStorage.getAPrecise();\n        uint256 futureAPrecise = futureA * StableSwapStorage.A_PRECISION;\n\n        if (futureAPrecise < initialAPrecise) {\n            require(futureAPrecise * (MAX_A_CHANGE) >= initialAPrecise, \"> maxChange\");\n        } else {\n            require(futureAPrecise <= initialAPrecise * (MAX_A_CHANGE), \"> maxChange\");\n        }\n\n        swapStorage.initialA = initialAPrecise;\n        swapStorage.futureA = futureAPrecise;\n        swapStorage.initialATime = block.timestamp;\n        swapStorage.futureATime = futureATime;\n\n        emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureATime);\n    }\n\n    function stopRampA() external onlyAdmin {\n        require(swapStorage.futureATime > block.timestamp, \"alreadyStopped\");\n        uint256 currentA = swapStorage.getAPrecise();\n\n        swapStorage.initialA = currentA;\n        swapStorage.futureA = currentA;\n        swapStorage.initialATime = block.timestamp;\n        swapStorage.futureATime = block.timestamp;\n\n        emit StopRampA(currentA, block.timestamp);\n    }\n\n    function setFeeController(address _feeController) external onlyAdmin {\n        require(_feeController != address(0), \"zeroAddress\");\n        feeController = _feeController;\n        emit FeeControllerChanged(_feeController);\n    }\n\n    function setFeeDistributor(address _feeDistributor) external onlyAdmin {\n        require(_feeDistributor != address(0), \"zeroAddress\");\n        feeDistributor = _feeDistributor;\n        emit FeeDistributorChanged(_feeDistributor);\n    }\n\n    function withdrawAdminFee() external override onlyFeeControllerOrOwner {\n        for (uint256 i = 0; i < swapStorage.pooledTokens.length; i++) {\n            IERC20 token = swapStorage.pooledTokens[i];\n            uint256 balance = token.balanceOf(address(this)) - (swapStorage.balances[i]);\n            if (balance != 0) {\n                token.safeTransfer(feeDistributor, balance);\n                emit CollectProtocolFee(address(token), balance);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../utils/SafeERC20.sol\";\nimport \"../../../interfaces/IERC4626.sol\";\nimport \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of\n * shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * _Available since v4.7._\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20Metadata private immutable _asset;\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20Metadata asset_) {\n        _asset = asset_;\n    }\n\n    /** @dev See {IERC4262-asset}. */\n    function asset() public view virtual override returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4262-totalAssets}. */\n    function totalAssets() public view virtual override returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4262-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\n        return _convertToShares(assets, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\n        return _convertToAssets(shares, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-maxDeposit}. */\n    function maxDeposit(address) public view virtual override returns (uint256) {\n        return _isVaultCollateralized() ? type(uint256).max : 0;\n    }\n\n    /** @dev See {IERC4262-maxMint}. */\n    function maxMint(address) public view virtual override returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4262-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4262-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-previewMint}. */\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Up);\n    }\n\n    /** @dev See {IERC4262-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Up);\n    }\n\n    /** @dev See {IERC4262-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\n        require(assets <= maxDeposit(receiver), \"ERC4626: deposit more than max\");\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4262-mint}. */\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\n        require(shares <= maxMint(receiver), \"ERC4626: mint more than max\");\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4262-withdraw}. */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual override returns (uint256) {\n        require(assets <= maxWithdraw(owner), \"ERC4626: withdraw more than max\");\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4262-redeem}. */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual override returns (uint256) {\n        require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     *\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\n     * would represent an infinite amout of shares.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\n        uint256 supply = totalSupply();\n        return\n            (assets == 0 || supply == 0)\n                ? assets.mulDiv(10**decimals(), 10**_asset.decimals(), rounding)\n                : assets.mulDiv(supply, totalAssets(), rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\n        uint256 supply = totalSupply();\n        return\n            (supply == 0)\n                ? shares.mulDiv(10**_asset.decimals(), 10**decimals(), rounding)\n                : shares.mulDiv(totalAssets(), supply, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(\n        address caller,\n        address receiver,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transfered and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transfered, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _isVaultCollateralized() private view returns (bool) {\n        return totalAssets() > 0 || totalSupply() == 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\nimport \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/libraries/ZenlinkTokenLoyaltyCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {AdminUpgradeable} from \"./AdminUpgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract ZenlinkTokenLoyaltyCalculator is AdminUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address immutable vxZenlinkToken;\n    address immutable zenlinkToken;\n    uint256 public minPenaltyRatio;\n    uint256 public maxPenaltyRatio;\n\n    EnumerableSet.AddressSet private _lockedContracts;\n\n    error ZeroAddress();\n    error CannotExceedMaxPenaltyRatio(uint256 maxPenaltyRatio);\n    error InvalidPenaltyRatio(uint256 min, uint256 max);\n\n    constructor(\n        address _vxZenlinkToken, \n        address _zenlinkToken,\n        uint256 _minPenaltyRatio,\n        uint256 _maxPenaltyRatio\n    ) {\n        vxZenlinkToken = _vxZenlinkToken;\n        zenlinkToken = _zenlinkToken;\n        _updatePenaltyRatio(_minPenaltyRatio, _maxPenaltyRatio);\n        _initializeAdmin(msg.sender);\n    }\n\n    function updatePenaltyRatio(\n        uint256 _minPenaltyRatio, \n        uint256 _maxPenaltyRatio\n    ) external onlyAdmin {\n        _updatePenaltyRatio(_minPenaltyRatio, _maxPenaltyRatio);\n    }\n\n    function _updatePenaltyRatio(\n        uint256 _minPenaltyRatio, \n        uint256 _maxPenaltyRatio\n    ) private {\n        if (_maxPenaltyRatio > 5e17) \n            revert CannotExceedMaxPenaltyRatio(5e17);\n        if (_minPenaltyRatio > _maxPenaltyRatio) \n            revert InvalidPenaltyRatio(_minPenaltyRatio, _maxPenaltyRatio);\n        minPenaltyRatio = _minPenaltyRatio;\n        maxPenaltyRatio = _maxPenaltyRatio;\n    }\n\n    function lockedContracts() external view returns (address[] memory) {\n        return _lockedContracts.values();\n    }\n\n    function addLockedContract(address lockedContract) external onlyAdmin {\n        if (lockedContract == address(0)) revert ZeroAddress();\n        if (!_lockedContracts.contains(lockedContract)) {\n            _lockedContracts.add(lockedContract);\n        }\n    }\n\n    function removeLockedContract(address lockedContract) external onlyAdmin {\n        if (lockedContract == address(0)) revert ZeroAddress();\n        if (_lockedContracts.contains(lockedContract)) {\n            _lockedContracts.remove(lockedContract);\n        }\n    }\n\n    function getCirculation() public view returns (uint256 circulation) {\n        circulation = IERC20(zenlinkToken).totalSupply();\n        address[] memory contracts = _lockedContracts.values();\n        for (uint256 i = 0; i < contracts.length; i++) {\n            circulation -= IERC20(zenlinkToken).balanceOf(contracts[i]);\n        }\n    }\n\n    function getZenlinkTokenWithdrawFeeRatio() external view returns (uint256 ratio) {\n        uint256 zenlinkCirculation = getCirculation();\n        uint256 x = Math.mulDiv(\n            IERC20(zenlinkToken).balanceOf(vxZenlinkToken),\n            1e18,\n            zenlinkCirculation\n        );\n        ratio = getRatioValue(x);\n    }\n\n    function getRatioValue(uint256 input) public view returns (uint256) {\n        // y = maxPenaltyRatio (x < 0.1)\n        // y = minPenaltyRatio (x > 0.5)\n        // y = maxPenaltyRatio - (input - 0.1) * step\n        if (input < 1e17) {\n            return maxPenaltyRatio;\n        } else if (input > 5e17) {\n            return minPenaltyRatio;\n        } else {\n            uint256 step = Math.mulDiv(\n                maxPenaltyRatio - minPenaltyRatio,\n                1e18,\n                4e17\n            );\n            return maxPenaltyRatio - Math.mulDiv(input - 1e17, step, 1e18);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/tools/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IMerkleDistributor.sol\";\nimport \"../libraries/AdminUpgradeable.sol\";\n\ncontract MerkleDistributor is IMerkleDistributor, AdminUpgradeable {\n    address public immutable override token;\n    bytes32 public immutable override merkleRoot;\n\n    // This is a packed array of booleans.\n    mapping(uint256 => uint256) private claimedBitMap;\n\n    constructor(address token_, bytes32 merkleRoot_) {\n        token = token_;\n        merkleRoot = merkleRoot_;\n        _initializeAdmin(msg.sender);\n    }\n\n    function isClaimed(uint256 index) public view override returns (bool) {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    function _setClaimed(uint256 index) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n    }\n\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override {\n        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\n\n        // Mark it claimed and send the token.\n        _setClaimed(index);\n        require(IERC20(token).transfer(account, amount), 'MerkleDistributor: Transfer failed.');\n\n        emit Claimed(index, account, amount);\n    }\n\n    function withdraw(uint256 amount) external override onlyAdmin {\n        IERC20(token).transfer(msg.sender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/tools/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMerkleDistributor {\n    // Returns the address of the token distributed by this contract.\n    function token() external view returns (address);\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\n    function merkleRoot() external view returns (bytes32);\n    // Returns true if the index has been marked claimed.\n    function isClaimed(uint256 index) external view returns (bool);\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\n    // Withdraw the given amount of the token\n    function withdraw(uint256 amount) external;\n\n    // This event is triggered whenever a call to #claim succeeds.\n    event Claimed(uint256 index, address account, uint256 amount);\n}\n"
    },
    "contracts/tokens/ZenlinkToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../libraries/AdminUpgradeable.sol\";\nimport \"../libraries/Math.sol\";\n\ncontract ZenlinkToken is ERC20, AdminUpgradeable {\n    using Math for uint256;\n    // global transfer switch\n    bool public transferable;\n\n    uint8 private decimal;\n\n    uint256 public maxTotalSupply;\n\n    // address map that can be transferred at any time.\n    mapping(address => bool) public whitelistMap;\n\n    modifier canTransfer() {\n        require(\n            transferable == true || whitelistMap[msg.sender] == true,\n            \"can't transfer\"\n        );\n        _;\n    }\n\n    constructor(\n        string memory setSymbol,\n        string memory setName,\n        uint8 setDecimal,\n        uint256 initialBalance,\n        uint256 maxMint\n    ) ERC20(setName, setSymbol) {\n        require(maxMint >= initialBalance, \"initialBalance bigger than max\");\n        _initializeAdmin(msg.sender);\n        _mint(msg.sender, initialBalance);\n        whitelistMap[msg.sender] = true;\n        decimal = setDecimal;\n        maxTotalSupply = maxMint;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return decimal;\n    }\n\n    function addWhitelist(address user) external onlyAdmin {\n        whitelistMap[user] = true;\n    }\n\n    function removeWhitelist(address user) external onlyAdmin {\n        delete whitelistMap[user];\n    }\n\n    function enableTransfer() external onlyAdmin {\n        transferable = true;\n    }\n\n    function disableTransfer() external onlyAdmin {\n        transferable = false;\n    }\n\n    function mint(uint256 mintAmount) external onlyAdmin {\n        require(totalSupply().add(mintAmount) <= maxTotalSupply, \"can't mint\");\n        _mint(msg.sender, mintAmount);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        canTransfer\n        returns (bool)\n    {\n        return ERC20.transfer(recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override canTransfer returns (bool) {\n        return ERC20.transferFrom(sender, recipient, amount);\n    }\n\n    function burn(uint256 amount) public virtual canTransfer{\n        ERC20._burn(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/periphery/SwapRouterV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IWNativeCurrency.sol\";\nimport \"./interfaces/ISwapRouterV1.sol\";\nimport \"../stableswap/interfaces/IStableSwap.sol\";\nimport \"../libraries/Math.sol\";\nimport \"../libraries/Helper.sol\";\n\ncontract SwapRouterV1 is ISwapRouterV1 {\n    using SafeERC20 for IERC20;\n    using Math for uint256;\n\n    struct StablePath {\n        IStableSwap pool;\n        IStableSwap basePool;\n        address fromToken;\n        address toToken;\n        bool fromBase;\n    }\n\n    address public override factory;\n    address public override WNativeCurrency;\n\n    constructor(address _factory, address _WNativeCurrency) {\n        factory = _factory;\n        WNativeCurrency = _WNativeCurrency;\n    }\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"SwapRouterV1: EXPIRED\");\n        _;\n    }\n\n    receive() external payable {\n        require(msg.sender == WNativeCurrency);\n    }\n\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) private {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = Helper.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2\n                ? Helper.pairFor(factory, output, path[i + 2])\n                : _to;\n            IPair(Helper.pairFor(factory, input, output)).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n        }\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = Helper.getAmountsOut(factory, amountIn, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        Helper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            Helper.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"SwapRouterV1: EXCESSIVE_INPUT_AMOUNT\");\n        Helper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            Helper.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapExactNativeCurrencyForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override payable ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[0] == WNativeCurrency, \"SwapRouterV1: INVALID_PATH\");\n        amounts = Helper.getAmountsOut(factory, msg.value, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\n        require(\n            IERC20(WNativeCurrency).transfer(\n                Helper.pairFor(factory, path[0], path[1]),\n                amounts[0]\n            )\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactNativeCurrency(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        require(\n            path[path.length - 1] == WNativeCurrency,\n            \"SwapRouterV1: INVALID_PATH\"\n        );\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"SwapRouterV1: EXCESSIVE_INPUT_AMOUNT\");\n        Helper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            Helper.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWNativeCurrency(WNativeCurrency).withdraw(amounts[amounts.length - 1]);\n        Helper.safeTransferNativeCurrency(to, amounts[amounts.length - 1]);\n    }\n\n    function swapExactTokensForNativeCurrency(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        require(\n            path[path.length - 1] == WNativeCurrency,\n            \"SwapRouterV1: INVALID_PATH\"\n        );\n        amounts = Helper.getAmountsOut(factory, amountIn, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        Helper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            Helper.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWNativeCurrency(WNativeCurrency).withdraw(amounts[amounts.length - 1]);\n        Helper.safeTransferNativeCurrency(to, amounts[amounts.length - 1]);\n    }\n\n    function swapNativeCurrencyForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override payable ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[0] == WNativeCurrency, \"SwapRouterV1: INVALID_PATH\");\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, \"SwapRouterV1: EXCESSIVE_INPUT_AMOUNT\");\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\n        require(\n            IERC20(WNativeCurrency).transfer(\n                Helper.pairFor(factory, path[0], path[1]),\n                amounts[0]\n            )\n        );\n        _swap(amounts, path, to);\n        if (msg.value > amounts[0]) {\n            Helper.safeTransferNativeCurrency(\n                msg.sender,\n                msg.value - amounts[0]\n            );\n        }\n    }\n\n    function _swapPool(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount,\n        uint256 minOutAmount,\n        uint256 deadline\n    ) private returns (uint256 amountOut) {\n        IERC20 coin = pool.getToken(fromIndex);\n        coin.safeIncreaseAllowance(address(pool), inAmount);\n        amountOut = pool.swap(fromIndex, toIndex, inAmount, minOutAmount, deadline);\n    }\n\n    function _swapPoolFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) private returns (uint256 amountOut) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\n        base_amounts[tokenIndexFrom] = dx;\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\n        coin.safeIncreaseAllowance(address(basePool), dx);\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\n        if (baseTokenIndex != tokenIndexTo) {\n            amountOut = _swapPool(pool, baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, deadline);\n        } else {\n            amountOut = baseLpAmount;\n        }\n    }\n\n    function _swapPoolToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) private returns (uint256 amountOut) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256 tokenLPAmount = dx;\n        if (baseTokenIndex != tokenIndexFrom) {\n            tokenLPAmount = _swapPool(pool, tokenIndexFrom, baseTokenIndex, dx, 0, deadline);\n        }\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\n        amountOut = basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\n    }\n\n    function swapPool(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount,\n        uint256 minOutAmount,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256 amountOut) {\n        IERC20 coin = pool.getToken(fromIndex);\n        coin.safeTransferFrom(msg.sender, address(this), inAmount);\n        amountOut = _swapPool(pool, fromIndex, toIndex, inAmount, minOutAmount, deadline);\n        IERC20 coinTo = pool.getToken(toIndex);\n        coinTo.safeTransfer(to, amountOut);\n    }\n\n    function swapPoolFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256 amountOut) {\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\n        coin.safeTransferFrom(msg.sender, address(this), dx);\n        amountOut = _swapPoolFromBase(pool, basePool, tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\n        coinTo.safeTransfer(to, amountOut);\n    }\n\n    function swapPoolToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256 amountOut) {\n        IERC20 coin = pool.getToken(tokenIndexFrom);\n        coin.safeTransferFrom(msg.sender, address(this), dx);\n        amountOut = _swapPoolToBase(pool, basePool, tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\n        coinTo.safeTransfer(to, amountOut);\n    }\n\n    function _anyStableSwap(\n        uint256 amountIn,\n        Route calldata route,\n        uint256 deadline\n    ) private returns (address tokenOut, uint256 amountOut) {\n        StablePath memory path = _decodeStableSwapCallData(route.callData);\n        tokenOut = path.toToken;\n\n        if (address(path.basePool) == address(0)) {\n            amountOut = _swapPool(\n                path.pool, \n                path.pool.getTokenIndex(path.fromToken), \n                path.pool.getTokenIndex(path.toToken), \n                amountIn, \n                0, \n                deadline\n            );\n        } else if (path.fromBase) {\n            amountOut = _swapPoolFromBase(\n                path.pool, \n                path.basePool, \n                path.basePool.getTokenIndex(path.fromToken), \n                path.pool.getTokenIndex(path.toToken), \n                amountIn, \n                0, \n                deadline\n            );\n        } else {\n            amountOut = _swapPoolToBase(\n                path.pool,\n                path.basePool,\n                path.pool.getTokenIndex(path.fromToken), \n                path.basePool.getTokenIndex(path.toToken), \n                amountIn, \n                0,\n                deadline\n            );\n        }\n    }\n\n    function _swapThroughStablePool(\n        address tokenIn,\n        uint256 amountIn,\n        Route[] calldata routes,\n        uint256 deadline\n    ) private returns (address tokenOut, uint256 amountOut) {\n        tokenOut = tokenIn;\n        amountOut = amountIn;\n\n        for (uint256 i = 0; i < routes.length; i++) {\n            if (routes[i].stable) {\n               (tokenOut, amountOut) = _anyStableSwap(amountOut, routes[i], deadline);\n            } else {\n                address[] memory path = _decodeAmmCalldata(routes[i].callData);\n                tokenOut = path[path.length - 1];\n                uint256[] memory amounts = Helper.getAmountsOut(factory, amountOut, path);\n                Helper.safeTransfer(\n                    path[0], \n                    Helper.pairFor(factory, path[0], path[1]),\n                    amounts[0]\n                );\n                _swap(amounts, path, address(this));\n                amountOut = amounts[amounts.length - 1];\n            }\n        }\n    }\n\n    function swapExactTokensForTokensThroughStablePool(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256 amountOut) {\n        address tokenIn;\n        if (routes[0].stable) {\n            tokenIn = _decodeStableSwapCallData(routes[0].callData).fromToken;\n        } else {\n            tokenIn = _decodeAmmCalldata(routes[0].callData)[0];\n        }\n\n        Helper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\n        address tokenOut;\n        (tokenOut, amountOut) = _swapThroughStablePool(tokenIn, amountIn, routes, deadline);\n        require(\n            amountOut >= amountOutMin,\n            \"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        IERC20(tokenOut).safeTransfer(to, amountOut);\n    }\n\n    function swapExactNativeCurrencyForTokensThroughStablePool(\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external override payable ensure(deadline) returns (uint256 amountOut) {\n        require(!routes[0].stable, \"SwapRouterV1: INVALID_ROUTES\");\n        address tokenIn = _decodeAmmCalldata(routes[0].callData)[0];\n        require(tokenIn == WNativeCurrency, \"SwapRouterV1: INVALID_ROUTES\");\n        IWNativeCurrency(WNativeCurrency).deposit{value: msg.value}();\n        address tokenOut;\n        (tokenOut, amountOut) = _swapThroughStablePool(tokenIn, msg.value, routes, deadline);\n        require(\n            amountOut >= amountOutMin,\n            \"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        IERC20(tokenOut).safeTransfer(to, amountOut);\n    }\n\n    function swapExactTokensForNativeCurrencyThroughStablePool(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256 amountOut) {\n        require(!routes[routes.length - 1].stable, \"SwapRouterV1: INVALID_ROUTES\");\n        address[] memory tokenOutPath = _decodeAmmCalldata(routes[routes.length - 1].callData);\n        require(tokenOutPath[tokenOutPath.length - 1] == WNativeCurrency, \"SwapRouterV1: INVALID_ROUTES\");\n        address tokenIn;\n        if (routes[0].stable) {\n            tokenIn = _decodeStableSwapCallData(routes[0].callData).fromToken;\n        } else {\n            tokenIn = _decodeAmmCalldata(routes[0].callData)[0];\n        }\n        Helper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\n        address tokenOut;\n        (tokenOut, amountOut) = _swapThroughStablePool(tokenIn, amountIn, routes, deadline);\n        require(\n            amountOut >= amountOutMin,\n            \"SwapRouterV1: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        IWNativeCurrency(WNativeCurrency).withdraw(amountOut);\n        Helper.safeTransferNativeCurrency(to, amountOut);\n    }\n\n    function _decodeAmmCalldata(bytes memory data) private pure returns (address[] memory path) {\n        path = abi.decode(data, (address[]));\n    }\n\n    function _decodeStableSwapCallData(bytes memory data) \n        private \n        pure \n        returns (StablePath memory path) \n    {\n        (\n            IStableSwap pool, \n            IStableSwap basePool, \n            address fromToken, \n            address toToken, \n            bool fromBase\n        ) = abi.decode(data, (IStableSwap, IStableSwap, address, address, bool));\n\n        return StablePath(pool, basePool, fromToken, toToken, fromBase);\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external override pure returns (uint256 amountOut) {\n        return Helper.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external override pure returns (uint256 amountIn) {\n        return Helper.getAmountOut(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        external\n        override\n        view\n        returns (uint256[] memory amounts)\n    {\n        return Helper.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint256 amountOut, address[] memory path)\n        external\n        override\n        view\n        returns (uint256[] memory amounts)\n    {\n        return Helper.getAmountsIn(factory, amountOut, path);\n    }\n\n    function calculateSwap(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount\n    ) external override view returns (uint256) {\n        return pool.calculateSwap(fromIndex, toIndex, inAmount);\n    }\n\n    function calculateSwapFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external override view returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\n        base_amounts[tokenIndexFrom] = dx;\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\n        if (baseTokenIndex == tokenIndexTo) {\n            return baseLpAmount;\n        }\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\n    }\n\n    function calculateSwapToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external override view returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256 tokenLPAmount = dx;\n        if (baseTokenIndex != tokenIndexFrom) {\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\n        }\n        return basePool.calculateRemoveLiquidityOneToken(tokenLPAmount, tokenIndexTo);\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IWNativeCurrency.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IWNativeCurrency {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/periphery/interfaces/ISwapRouterV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../../stableswap/interfaces/IStableSwap.sol\";\n\ninterface ISwapRouterV1 {\n\n    struct Route {\n        bool stable;\n        bytes callData; \n    }\n\n    function factory() external view returns (address);\n\n    function WNativeCurrency() external view returns (address);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactNativeCurrencyForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactNativeCurrency(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForNativeCurrency(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapNativeCurrencyForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapPool(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount,\n        uint256 minOutAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapPoolFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapPoolToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactTokensForTokensThroughStablePool(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactNativeCurrencyForTokensThroughStablePool(\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountOut);\n\n    function swapExactTokensForNativeCurrencyThroughStablePool(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(\n        uint256 amountIn, \n        address[] memory path\n    ) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(\n        uint256 amountOut, \n        address[] memory path\n    ) external view returns (uint256[] memory amounts);\n\n    function calculateSwap(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount\n    ) external view returns (uint256);\n\n    function calculateSwapFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateSwapToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/libraries/Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"./Math.sol\";\nimport \"../core/interfaces/IPair.sol\";\nimport \"../core/interfaces/IFactory.sol\";\n\nlibrary Helper {\n    using Math for uint256;\n\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"Helper: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"Helper: ZERO_ADDRESS\");\n    }\n\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (address pair) {\n        return IFactory(factory).getPair(tokenA, tokenB);\n    }\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"INSUFFICIENT_LIQUIDITY\");\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IPair(\n            pairFor(factory, tokenA, tokenB)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::transferFrom: transferFrom failed\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferNativeCurrency(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(\n            success,\n            \"TransferHelper::safeTransferNativeCurrency: NativeCurrency transfer failed\"\n        );\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"Helper: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"Helper: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"Helper: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"Helper: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"Helper: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i],\n                path[i + 1]\n            );\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"Helper: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i - 1],\n                path[i]\n            );\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/periphery/Stake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"../libraries/Helper.sol\";\nimport \"../libraries/Math.sol\";\nimport \"../libraries/AdminUpgradeable.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract Stake is ReentrancyGuard, AdminUpgradeable {\n    using Math for uint256;\n\n    // Info of each staker\n    struct StakerInfo {\n        uint256 stakedAmount;      // How many stake tokens the user has provided\n        uint256 lastUpdatedBlock;  // Last block number that user behavior occurs\n        uint256 accInterest;       // Accumulated interest the user has owned\n    }\n\n    // The STAKED TOKEN\n    address public immutable STAKED_TOKEN;\n    // The REWARD TOKEN\n    address public immutable REWARD_TOKEN;\n    // The block when stake starts\n    uint256 public immutable START_BLOCK;\n    // The block when stake ends\n    uint256 public immutable END_BLOCK;\n    // The total interest of whole stake\n    uint256 public totalInterest;\n    // The total staked amount of whole stake\n    uint256 public totalStakedAmount;\n    // The total reward amount of whole stake\n    uint256 public totalRewardAmount;\n\n    // Is stake paused\n    bool private _stakePaused;\n\n    // Info of each staker that stakes token\n    mapping(address => StakerInfo) private _stakerInfos;\n\n    event Staked(address indexed user, uint256 amount, uint256 interest);\n    event Redeem(address indexed user, uint256 redeemAmount, uint256 interest);\n    event RewardsClaimed(address indexed to, uint256 amount);\n    event WithdrawExtraFunds(address indexed token, address indexed to, uint256 amount);\n    event StakePaused(address indexed caller);\n    event StakeUnpaused(address indexed caller);\n\n    constructor(\n        address _stakeToken,\n        address _rewardToken,\n        uint256 _startBlock,\n        uint256 _endBlock\n    ) {\n        require(_startBlock >= block.number, 'INVALID_START_BLOCK');\n        require(_endBlock > _startBlock, 'INVALID_STAKE_PERIOD');\n\n        _initializeAdmin(msg.sender);\n        STAKED_TOKEN = _stakeToken;\n        REWARD_TOKEN = _rewardToken;\n        START_BLOCK = _startBlock;\n        END_BLOCK = _endBlock;\n        totalRewardAmount = IERC20(_rewardToken).balanceOf(address(this));\n        \n        _stakePaused = false;\n    }\n\n    modifier beforeEndPeriod() {\n        require(block.number < END_BLOCK, \"OVER_PERIOD\");\n        _;\n    }\n\n    modifier whenStakeNotPaused() {\n        require(!_stakePaused, \"STAKE_PAUSED\");\n        _;\n    }\n\n    /**\n     * @dev add reward amount by admin\n     **/\n    function addReward(uint256 amount) external onlyAdmin beforeEndPeriod {\n        Helper.safeTransferFrom(\n            REWARD_TOKEN,\n            msg.sender,\n            address(this),\n            amount\n        );\n        totalRewardAmount = totalRewardAmount.add(amount);\n    }\n\n    /**\n     * @dev remove reward amount by admin\n     **/\n    function removeReward(uint256 amount) external onlyAdmin beforeEndPeriod {\n        require(amount <= totalRewardAmount, 'INSUFFICIENT_REWARD_AMOUNT');\n        Helper.safeTransfer(REWARD_TOKEN, msg.sender, amount);\n        totalRewardAmount = totalRewardAmount.sub(amount);\n    }\n\n    /**\n     * @dev Return funds directly transfered to this contract, will not affect the portion of the amount \n     *      that participated in stake using `stake` function\n     **/\n    function withdrawExtraFunds(address token, address to, uint256 amount) external onlyAdmin {\n        if (token == STAKED_TOKEN) {\n            uint256 stakedBalance = IERC20(STAKED_TOKEN).balanceOf(address(this));\n            require(stakedBalance.sub(amount) >= totalStakedAmount, 'INSUFFICIENT_STAKED_BALANCE');\n        }\n        if (token == REWARD_TOKEN) {\n            uint256 rewardBalance = IERC20(REWARD_TOKEN).balanceOf(address(this));\n            require(rewardBalance.sub(amount) >= totalRewardAmount, 'INSUFFICIENT_REWARD_BALANCE');\n        }\n        Helper.safeTransfer(token, to, amount);\n\n        emit WithdrawExtraFunds(token, to, amount);\n    }\n    \n    function getStakerInfo(address staker) \n        external \n        view \n        returns (uint256 stakedAmount, uint256 accInterest)  \n    {\n        StakerInfo memory stakerInfo = _stakerInfos[staker];\n        stakedAmount = stakerInfo.stakedAmount;\n        accInterest = stakerInfo.accInterest;\n    }\n    \n    function pauseStake() external onlyAdmin {\n        require(!_stakePaused, 'STAKE_PAUSED');\n        _stakePaused = true;\n        emit StakePaused(msg.sender);\n    }\n\n    function unpauseStake() external onlyAdmin {\n        require(_stakePaused, 'STAKE_UNPAUSED');\n        _stakePaused = false;\n        emit StakeUnpaused(msg.sender);\n    }\n\n    /**\n     * @dev Stakes tokens\n     * @param amount Amount to stake\n     **/\n    function stake(uint256 amount) external beforeEndPeriod nonReentrant whenStakeNotPaused {\n        require(amount > 0, 'INVALID_ZERO_AMOUNT');\n        StakerInfo storage stakerInfo = _stakerInfos[msg.sender];\n\n        Helper.safeTransferFrom(\n            STAKED_TOKEN,\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        stakerInfo.lastUpdatedBlock = block.number < START_BLOCK\n            ? START_BLOCK\n            : block.number;\n\n        uint256 addedInterest = amount.mul(END_BLOCK.sub(stakerInfo.lastUpdatedBlock));\n\n        totalInterest = totalInterest.add(addedInterest);\n        totalStakedAmount = totalStakedAmount.add(amount);\n\n        stakerInfo.stakedAmount = stakerInfo.stakedAmount.add(amount);\n        stakerInfo.accInterest = stakerInfo.accInterest.add(addedInterest);\n        \n        emit Staked(msg.sender, amount, addedInterest);\n    }\n\n    /**\n     * @dev Redeems staked tokens\n     * @param amount Amount to redeem\n     **/\n    function redeem(uint256 amount) external nonReentrant {\n        require(amount > 0, 'INVALID_ZERO_AMOUNT');\n        require(block.number > START_BLOCK, \"STAKE_NOT_STARTED\");\n\n        StakerInfo storage stakerInfo = _stakerInfos[msg.sender];\n        require(amount <= totalStakedAmount, 'INSUFFICIENT_TOTAL_STAKED_AMOUNT');\n        require(amount <= stakerInfo.stakedAmount, 'INSUFFICIENT_STAKED_AMOUNT');\n\n        stakerInfo.lastUpdatedBlock = block.number < END_BLOCK ? block.number : END_BLOCK;\n\n        uint256 removedInterest = amount.mul(END_BLOCK.sub(stakerInfo.lastUpdatedBlock));\n\n        totalInterest = totalInterest.sub(removedInterest);\n        totalStakedAmount = totalStakedAmount.sub(amount);\n\n        stakerInfo.stakedAmount = stakerInfo.stakedAmount.sub(amount);\n        stakerInfo.accInterest = stakerInfo.accInterest.sub(removedInterest);\n\n        Helper.safeTransfer(STAKED_TOKEN, msg.sender, amount);\n        emit Redeem(msg.sender, amount, removedInterest);\n    }\n\n    /**\n     * @dev Return the total amount of estimated rewards from an staker\n     * @param staker The staker address\n     * @return The rewards\n     */\n    function getEstimatedRewardsBalance(address staker) external view returns (uint256) {\n        StakerInfo memory stakerInfo = _stakerInfos[staker];\n        if (totalInterest != 0) {\n            return totalRewardAmount.mul(stakerInfo.accInterest) / totalInterest;\n        }\n        return 0;\n    }\n\n    /**\n     * @dev Claims all amount of `REWARD_TOKEN` calculated from staker interest\n     **/\n    function claim() external nonReentrant {\n        require(block.number > END_BLOCK, \"STAKE_NOT_FINISHED\");\n        require(totalInterest > 0, 'INVALID_ZERO_TOTAL_INTEREST');\n\n        StakerInfo storage stakerInfo = _stakerInfos[msg.sender];\n        require(stakerInfo.accInterest > 0, \"INSUFFICIENT_ACCUMULATED_INTEREST\");\n\n        uint256 claimRewardAmount = totalRewardAmount.mul(stakerInfo.accInterest) / totalInterest;\n\n        stakerInfo.accInterest = 0;\n        stakerInfo.lastUpdatedBlock = block.number;\n\n        Helper.safeTransfer(REWARD_TOKEN, msg.sender, claimRewardAmount);\n        emit RewardsClaimed(msg.sender, claimRewardAmount);\n    }\n}\n"
    },
    "contracts/periphery/Bootstrap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../libraries/Math.sol\";\nimport \"../libraries/Helper.sol\";\nimport \"../libraries/AdminUpgradeable.sol\";\nimport \"../core/interfaces/IFactory.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract Bootstrap is ReentrancyGuard, AdminUpgradeable {\n    using Math for uint256;\n\n    struct UserInfo {\n        uint256 amount0;\n        uint256 amount1;\n    }\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n    uint256 public MINUM_AMOUNT0;\n    uint256 public MINUM_AMOUNT1;\n    uint256 public HARD_CAP_AMOUNT0;\n    uint256 public HARD_CAP_AMOUNT1;\n    uint256 public END_BLOCK;\n\n    uint256 public totalAmount0;\n    uint256 public totalAmount1;\n\n    address[] private rewardTokens;\n    address[] private limitTokens;\n    uint256[] private limitTokenAmounts;\n    uint256[] private rewardTokenAmounts;\n\n    mapping(address => UserInfo) private _userInfos;\n\n    event Provided(address indexed user, uint256 amount0, uint256 amount1);\n    event LiquidityClaimed(address indexed to, uint256 amount);\n    event Refund(address indexed to, uint256 amount0, uint256 amount1);\n    event WithdrawExtraFunds(address indexed token, address indexed to, uint256 amount);\n    event MinumAmountUpdated(uint256 amount0, uint256 amount1);\n    event HardCapAmountUpdated(uint256 amount0, uint256 amount1);\n    event EndBlockUpdated(uint256 endBlock);\n    event DistributeReward(address indexed provider, address[] rewardTokens, uint256[] rewardAmount);\n    event ChargeReward(address indexed sender, address[] rewardTokens, uint256[] totalAmount);\n    event SetRewardAndLimit(address[] rewards, address[] limits, uint256[] limitAmounts);\n\n    constructor(\n        address _factory,\n        address _tokenA,\n        address _tokenB,\n        uint256 _minumAmountA,\n        uint256 _minumAmountB,\n        uint256 _hardCapAmountA,\n        uint256 _hardCapAmountB,\n        uint256 _endBlock\n    ) {\n        require(_endBlock > block.number, 'INVALID_END_BLOCK');\n        require(_hardCapAmountA > _minumAmountA && _hardCapAmountB > _minumAmountB, 'INVALID_HARD_CAP_AMOUNT');\n        (address _token0, address _token1) = Helper.sortTokens(_tokenA, _tokenB);\n        require(\n            IFactory(_factory).getPair(_token0, _token1) == address(0), \n            'PAIR_EXISTS'\n        );\n        require(\n            IFactory(_factory).getBootstrap(_token0, _token1) != address(0), \n            'BOOTSTRAP_NOT_EXISTS'\n        );\n        factory = _factory;\n        token0 = _token0;\n        token1 = _token1;\n        MINUM_AMOUNT0 = _token0 == _tokenA ? _minumAmountA : _minumAmountB;\n        MINUM_AMOUNT1 = _token0 == _tokenA ? _minumAmountB : _minumAmountA;\n        HARD_CAP_AMOUNT0 = _token0 == _tokenA ? _hardCapAmountA : _hardCapAmountB;\n        HARD_CAP_AMOUNT1 =  _token0 == _tokenA ? _hardCapAmountB : _hardCapAmountA;\n        END_BLOCK = _endBlock;\n        _initializeAdmin(msg.sender);\n    }\n\n    modifier whenNotEnded() {\n        require(block.number < END_BLOCK, 'BOOTSTRAP_ENDED');\n        _;\n    }\n\n    modifier whenEndedAndCapped {\n        require(\n            block.number >= END_BLOCK &&\n            totalAmount0 >= MINUM_AMOUNT0 &&\n            totalAmount1 >= MINUM_AMOUNT1,\n            'NOT_ENDED_AND_CAPPED'\n        );\n        _;\n    }\n\n    modifier whenEndedAndFailed {\n        require(\n            block.number >= END_BLOCK &&\n            (totalAmount0 < MINUM_AMOUNT0 || totalAmount1 < MINUM_AMOUNT1),\n            'NOT_ENDED_AND_FAILED'\n        );\n        _;\n    }\n\n    modifier whenLiquidityMinted {\n        address pair = Helper.pairFor(factory, token0, token1);\n        require(pair != address(0), 'PAIR_NOT_CREATED');\n        require(\n            IERC20(pair).balanceOf(address(this)) > 0, \n            'LIQUIDITY_NOT_MINTED'\n        );\n        _;\n    }\n\n    function setMinumAmount0(uint256 amount0) \n        external \n        whenNotEnded \n        onlyAdmin \n    {\n        MINUM_AMOUNT0 = amount0;\n        emit MinumAmountUpdated(amount0, MINUM_AMOUNT1);\n    }\n\n    function setMinumAmount1(uint256 amount1) \n        external \n        whenNotEnded \n        onlyAdmin \n    {\n        MINUM_AMOUNT1 = amount1;\n        emit MinumAmountUpdated(MINUM_AMOUNT0, amount1);\n    }\n\n    function setHardCapAmount0(uint256 amount0)\n        external\n        whenNotEnded\n        onlyAdmin\n    {\n        require(amount0 > MINUM_AMOUNT0, 'INVALID_AMOUNT0');\n        HARD_CAP_AMOUNT0 = amount0;\n        emit HardCapAmountUpdated(amount0, HARD_CAP_AMOUNT1);\n    }\n\n    function setHardCapAmount1(uint256 amount1)\n        external\n        whenNotEnded\n        onlyAdmin\n    {\n        require(amount1 > MINUM_AMOUNT1, 'INVALID_AMOUNT1');\n        HARD_CAP_AMOUNT1 = amount1;\n        emit HardCapAmountUpdated(HARD_CAP_AMOUNT0, amount1);\n    }\n\n    function setEndBlock(uint256 endBlock) \n        external \n        whenNotEnded \n        onlyAdmin \n    {\n        require(endBlock > block.number, 'INVALID_END_BLOCK');\n        END_BLOCK = endBlock;\n        emit EndBlockUpdated(endBlock);\n    }\n\n    function getUserInfo(address user) \n        external \n        view \n        returns (uint256 amount0, uint256 amount1)  \n    {\n        UserInfo memory userInfo = _userInfos[user];\n        amount0 = userInfo.amount0;\n        amount1 = userInfo.amount1;\n    }\n    \n    function getTotalLiquidity() \n        public \n        view \n        returns (uint256 totalLiquidity) \n    {\n        if (totalAmount0 == 0 || totalAmount1 == 0) return 0;\n        totalLiquidity = Math.sqrt(totalAmount0.mul(totalAmount1));\n    }\n\n    function getExactLiquidity(address user) \n        public \n        view \n        returns (uint256 exactLiquidity) \n    {\n        if (totalAmount0 == 0 || totalAmount1 == 0) return 0;\n        UserInfo memory userInfo = _userInfos[user];\n        uint256 _amount0 = userInfo.amount0;\n        uint256 _amount1 = userInfo.amount1;\n        uint256 exactAmount0 = \n            _amount0.mul(totalAmount1).add(_amount1.mul(totalAmount0)) / totalAmount1.mul(2);\n        uint256 exactAmount1 = \n            _amount1.mul(totalAmount0).add(_amount0.mul(totalAmount1)) / totalAmount0.mul(2);\n        uint256 calculatedLiquidity = Math.sqrt(exactAmount0.mul(exactAmount1));\n        uint256 totalLiquidity = getTotalLiquidity();\n        exactLiquidity = \n            calculatedLiquidity.mul(totalLiquidity.sub(MINIMUM_LIQUIDITY)) / totalLiquidity;\n    }\n\n    function getLiquidityBalance()\n        external\n        view\n        returns (uint256 balance)\n    {\n        address pair = Helper.pairFor(factory, token0, token1);\n        if (pair == address(0)) return 0;\n        balance = IERC20(pair).balanceOf(address(this));\n    }\n\n    function addProvision(\n        address tokenA,\n        address tokenB,\n        uint256 amountA,\n        uint256 amountB\n    ) external whenNotEnded nonReentrant {\n        require(checkProviderLimit(msg.sender), 'CheckLimitFailed');\n\n        (address _token0, address _token1) = Helper.sortTokens(tokenA, tokenB);\n        require(_token0 == token0 && _token1 == token1, 'INVALID_TOKEN');\n        uint256 _amount0 = _token0 == tokenA ? amountA : amountB;\n        uint256 _amount1 = _token0 == tokenA ? amountB : amountA;\n        require(_amount0 > 0 || _amount1 > 0, 'INVALID_ZERO_AMOUNT');\n        UserInfo storage userInfo = _userInfos[msg.sender];\n        if (_amount0 > 0) {\n            require(totalAmount0 < HARD_CAP_AMOUNT0, 'AMOUNT0_CAPPED');\n            uint256 remainingAmount0 = HARD_CAP_AMOUNT0.sub(totalAmount0);\n            _amount0 = _amount0 < remainingAmount0 ? _amount0 : remainingAmount0;\n            totalAmount0 = totalAmount0.add(_amount0);\n            userInfo.amount0 = userInfo.amount0.add(_amount0);\n            Helper.safeTransferFrom(\n                _token0,\n                msg.sender,\n                address(this),\n                _amount0\n            );\n        }\n        if (_amount1 > 0) {\n            require(totalAmount1 < HARD_CAP_AMOUNT1, 'AMOUNT1_CAPPED');\n            uint256 remainingAmount1 = HARD_CAP_AMOUNT1.sub(totalAmount1);\n            _amount1 = _amount1 < remainingAmount1 ? _amount1 : remainingAmount1;\n            totalAmount1 = totalAmount1.add(_amount1);\n            userInfo.amount1 = userInfo.amount1.add(_amount1);\n            Helper.safeTransferFrom(\n                _token1,\n                msg.sender,\n                address(this),\n                _amount1\n            );\n        }\n\n        emit Provided(msg.sender, _amount0, _amount1);\n    }\n\n    function mintLiquidity() \n        external\n        whenEndedAndCapped\n        nonReentrant\n        onlyAdmin\n    {\n        require(\n            IFactory(factory).getPair(token0, token1) == address(0), \n            'PAIR_EXISTS'\n        );\n        IFactory(factory).createPair(token0, token1);\n        address pair = Helper.pairFor(factory, token0, token1);\n        Helper.safeTransfer(token0, pair, totalAmount0);\n        Helper.safeTransfer(token1, pair, totalAmount1);\n        IPair(pair).mint(address(this));\n    }\n\n    function claim() \n        external \n        whenEndedAndCapped \n        whenLiquidityMinted\n        nonReentrant\n    {\n        UserInfo storage userInfo = _userInfos[msg.sender];\n        require(\n            userInfo.amount0 > 0 || userInfo.amount1 > 0, \n            'INSUFFICIENT_AMOUNT'\n        );\n        uint256 exactLiquidity = getExactLiquidity(msg.sender);\n        require(exactLiquidity > 0, 'INSUFFICIENT_LIQUIDITY');\n        userInfo.amount0 = 0;\n        userInfo.amount1 = 0;\n        address pair = Helper.pairFor(factory, token0, token1);\n        Helper.safeTransfer(pair, msg.sender, exactLiquidity);\n      \n        if (rewardTokens.length > 0){\n            distributeReward(msg.sender, exactLiquidity, getTotalLiquidity());\n        }\n\n        emit LiquidityClaimed(msg.sender, exactLiquidity);\n    }\n\n    function refund()\n        external\n        whenEndedAndFailed\n        nonReentrant\n    {\n        UserInfo storage userInfo = _userInfos[msg.sender];\n        require(\n            userInfo.amount0 > 0 || userInfo.amount1 > 0, \n            'INSUFFICIENT_AMOUNT'\n        );\n        uint256 _amount0 = userInfo.amount0;\n        uint256 _amount1 = userInfo.amount1;\n        if (_amount0 > 0) {\n            totalAmount0 = totalAmount0.sub(_amount0);\n            userInfo.amount0 = 0;\n            Helper.safeTransfer(token0, msg.sender, _amount0);\n        }\n        if (_amount1 > 0) {\n            totalAmount1 = totalAmount1.sub(_amount1);\n            userInfo.amount1 = 0;\n            Helper.safeTransfer(token1, msg.sender, _amount1);\n        }\n\n        emit Refund(msg.sender, _amount0, _amount1);\n    }\n\n    /**\n     * @dev Return funds directly transfered to this contract, will not affect the portion of the amount \n     *      that participated in bootstrap using `addProvision` function\n     **/\n    function withdrawExtraFunds(\n        address token,\n        address to, \n        uint256 amount\n    ) external onlyAdmin {\n        if (token == token0) {\n            uint256 token0Balance = IERC20(token0).balanceOf(address(this));\n            require(token0Balance.sub(amount) >= totalAmount0, 'INSUFFICIENT_TOKEN_BALANCE');\n        }\n        if (token == token1) {\n            uint256 token1Balance = IERC20(token1).balanceOf(address(this));\n            require(token1Balance.sub(amount) >= totalAmount1, 'INSUFFICIENT_TOKEN_BALANCE');\n        }\n        Helper.safeTransfer(token, to, amount);\n\n        emit WithdrawExtraFunds(token, to, amount);\n    }\n\n    function setRewardAndLimit(        \n        address[] memory _rewardTokens,\n        address[] memory _limitTokens,\n        uint256[] memory _limitAmounts\n    ) external onlyAdmin{\n        rewardTokens = _rewardTokens;\n        limitTokens  = _limitTokens;\n        limitTokenAmounts = _limitAmounts;\n\n        emit SetRewardAndLimit(_rewardTokens, _limitTokens, _limitAmounts);\n    }\n\n    function charge(\n        uint256[] memory _amounts\n    ) external onlyAdmin {\n        require(_amounts.length == rewardTokens.length, 'INVALID_AMOUNTS');\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            if ( _amounts[i] > 0 ){\n                 Helper.safeTransferFrom(\n                    rewardTokens[i], \n                    msg.sender, \n                    address(this), \n                    _amounts[i]\n                );\n            }\n        }\n\n        if (rewardTokenAmounts.length == 0){\n           rewardTokenAmounts = _amounts;     \n        }else{\n            for(uint256 i = 0; i < _amounts.length; i++){\n                rewardTokenAmounts[i] = rewardTokenAmounts[i].add(_amounts[i]);\n            }\n        }\n\n        emit ChargeReward(msg.sender, rewardTokens, _amounts);\n    }\n\n    function withdrawReward(address recipient) external onlyAdmin{\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            if (rewardTokenAmounts[i] == 0){\n                continue;\n            }\n            Helper.safeTransfer(\n                rewardTokens[i],  \n                recipient, \n                rewardTokenAmounts[i]\n            );\n            rewardTokenAmounts[i] = 0;\n        }\n    }\n\n    function checkProviderLimit(address provider) public view returns(bool success){\n        success = true;\n        for (uint256 i = 0; i < limitTokenAmounts.length; i++){\n            uint256 balance =  IERC20(limitTokens[i]).balanceOf(provider);\n\n            if (balance < limitTokenAmounts[i]){\n                success = false;\n                break;\n            }\n        }\n    }\n\n    function distributeReward(address provider, uint256 providerLiquidity, uint256 totalLiquidity) private{\n        uint256[] memory rewardAmounts = new uint256[](rewardTokens.length);\n\n        for (uint256 i = 0; i < rewardTokens.length; i++){\n            uint256 distributeRewardAmount = providerLiquidity.mul(rewardTokenAmounts[i]) / totalLiquidity;\n            if (distributeRewardAmount > 0) {\n                Helper.safeTransfer(\n                    rewardTokens[i],\n                    provider, \n                    distributeRewardAmount\n                );\n            }\n            rewardAmounts[i] = distributeRewardAmount;\n        }\n\n        emit DistributeReward(provider, rewardTokens, rewardAmounts);\n    }\n\n    function getRewardTokens() external view returns(address[] memory tokens){\n        tokens = rewardTokens;\n    }\n\n    function getLimitTokens() external view returns(address[] memory tokens){\n        tokens = limitTokens;\n    }\n\n    function getLimitAmounts() external view returns(uint256[] memory amounts){\n        amounts = limitTokenAmounts;\n    }\n\n    function getRewardTokenAmounts() external view returns(uint256[] memory amounts){\n        amounts = rewardTokenAmounts;\n    }\n\n    function estimateRewardTokenAmounts(address who) external view returns(uint256[] memory amounts){\n        uint256 whoLiquidity = getExactLiquidity(who);\n        uint256 totalLiquidity = getTotalLiquidity();\n        amounts = new uint256[](rewardTokens.length);\n        \n        for (uint256 i = 0; i < rewardTokens.length; i++){\n            amounts[i] = whoLiquidity.mul(rewardTokenAmounts[i]) / totalLiquidity;\n        }\n    }\n}"
    },
    "contracts/periphery/Migrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IMigrator } from \"./interfaces/IMigrator.sol\";\nimport { IRouter } from \"./interfaces/IRouter.sol\";\nimport { IFactory } from \"../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../core/interfaces/IPair.sol\";\nimport { IWNativeCurrency } from \"./interfaces/IWNativeCurrency.sol\";\nimport { Helper } from \"../libraries/Helper.sol\";\n\ncontract Migrator is IMigrator {\n    using SafeERC20 for IERC20;\n\n    IFactory immutable factoryV1;\n    IRouter immutable router;\n    address immutable wnative;\n\n    error InvalidMinAmountsParams();\n\n    constructor(IFactory _factoryV1, IRouter _router, address _wnative) {\n        factoryV1 = _factoryV1;\n        router = _router;\n        wnative = _wnative;\n    }\n\n    receive() external payable {\n        require(msg.sender == wnative);\n    }\n\n    function _migrate(IPair pair, uint256 amount0Min, uint256 amount1Min, address to, uint256 deadline) internal {\n        {\n            uint256 liquidity = IERC20(address(pair)).balanceOf(msg.sender);\n            IERC20(address(pair)).safeTransferFrom(msg.sender, address(pair), liquidity);\n        }\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n        (uint256 amount0V1, uint256 amount1V1) = pair.burn(address(this));\n        IERC20(token0).safeApprove(address(router), amount0V1);\n        IERC20(token1).safeApprove(address(router), amount1V1);\n        (uint256 amount0V2, uint256 amount1V2, ) = router.addLiquidity(\n            token0, \n            token1, \n            amount0V1, \n            amount1V1, \n            amount0Min, \n            amount1Min, \n            to, \n            deadline\n        );\n        if (amount0V1 > amount0V2) {\n            IERC20(token0).safeApprove(address(router), 0);\n            _transferBack(token0, amount0V1 - amount0V2, to);\n        } else if (amount1V1 > amount1V2) {\n            IERC20(token1).safeApprove(address(router), 0);\n            _transferBack(token1, amount1V1 - amount1V2, to);\n        }\n    }\n\n    function _transferBack(address token, uint256 amount, address to) internal {\n        if (token == wnative) {\n            IWNativeCurrency(wnative).withdraw(amount);\n            Helper.safeTransferNativeCurrency(to, amount);\n        } else {\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n\n    function migrate(\n        IPair pair, \n        uint256 amount0Min, \n        uint256 amount1Min, \n        address to, \n        uint256 deadline\n    ) override external {\n        _migrate(pair, amount0Min, amount1Min, to, deadline);\n    }\n\n    function migrateMany(\n        IPair[] memory pairs, \n        uint256[] memory amounts0Min, \n        uint256[] memory amounts1Min, \n        address to, \n        uint256 deadline\n    ) override external {\n        uint256 commonLength = pairs.length;\n        if (amounts0Min.length != commonLength || amounts1Min.length != commonLength) \n            revert InvalidMinAmountsParams();\n        for (uint256 i; i < commonLength; i++) {\n            _migrate(pairs[i], amounts0Min[i], amounts1Min[i], to, deadline);\n        }\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\n\ninterface IMigrator {\n    function migrate(IPair pair, uint256 amount0Min, uint256 amount1Min, address to, uint256 deadline) external;\n    function migrateMany(IPair[] memory pairs, uint256[] memory amounts0Min, uint256[] memory amounts1Min, address to, uint256 deadline) external;\n}\n"
    },
    "contracts/periphery/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IRouter {\n    function factory() external view returns (address);\n\n    function WNativeCurrency() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquiditySingleToken(\n        address[] calldata path,\n        uint256 amountIn,\n        uint256 amountSwapIn,\n        uint256 amountSwapOutMin,\n        uint256 amountInReserveMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 liquidity\n        );\n\n    function addLiquidityNativeCurrency(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountNativeCurrencyMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountNativeCurrency,\n            uint256 liquidity\n        );\n\n    function addLiquiditySingleNativeCurrency(\n        address[] calldata path,\n        uint256 amountSwapOut,\n        uint256 nativeCurrencySwapInMax,\n        uint256 nativeCurrencyReserveMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountNativeCurrency,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityNativeCurrency(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountNativeCurrencyMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountNativeCurrency);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactNativeCurrencyForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactNativeCurrency(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForNativeCurrency(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapNativeCurrencyForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/test/NativeCurrency.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../periphery/interfaces/IWNativeCurrency.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract NativeCurrency is IWNativeCurrency, ERC20 {\n    constructor(string memory setName, string memory setSymbol)\n        ERC20(setName, setSymbol)\n    {}\n\n    function deposit() public payable override {\n        _mint(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 wad) public override {\n        require(balanceOf(msg.sender) >= wad, \"\");\n        _burn(msg.sender, wad);\n        payable(msg.sender).transfer(wad);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    },
    "contracts/periphery/Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IRouter.sol\";\nimport \"./interfaces/IWNativeCurrency.sol\";\nimport \"../libraries/Helper.sol\";\nimport \"../libraries/Math.sol\";\n\ncontract Router is IRouter {\n    using Math for uint256;\n\n    address public override factory;\n    address public override WNativeCurrency;\n\n    constructor(address _factory, address _WNativeCurrency) {\n        factory = _factory;\n        WNativeCurrency = _WNativeCurrency;\n    }\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"Router: EXPIRED\");\n        _;\n    }\n\n    receive() external payable {\n        require(msg.sender == WNativeCurrency); // only accept Native Currency via fallback from the WNativeCurrency contract\n    }\n\n    function addLiquidity(\n        address token0,\n        address token1,\n        uint256 amount0Desired,\n        uint256 amount1Desired,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        address to,\n        uint256 deadline\n    )\n        public\n        override\n        ensure(deadline)\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 liquidity\n        )\n    {\n        (amount0, amount1) = _addLiquidity(\n            token0,\n            token1,\n            amount0Desired,\n            amount1Desired,\n            amount0Min,\n            amount1Min\n        );\n        address pair = Helper.pairFor(factory, token0, token1);\n        Helper.safeTransferFrom(token0, msg.sender, pair, amount0);\n        Helper.safeTransferFrom(token1, msg.sender, pair, amount1);\n        liquidity = IPair(pair).mint(to);\n    }\n\n    function addLiquiditySingleToken(\n        address[] calldata path,\n        uint256 amountIn,\n        uint256 amountSwapOut,\n        uint256 amountSwapInMax,\n        uint256 amountInReserveMin,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256 liquidity) {\n        address token0 = path[0];\n        address token1 = path[path.length - 1];\n\n        uint256[] memory amounts = swapTokensForExactTokens(\n            amountSwapOut,\n            amountSwapInMax,\n            path,\n            to,\n            deadline\n        );\n\n        uint256 amountInReserve = amountIn - amounts[0];\n        (, , liquidity) = addLiquidity(\n            token1,\n            token0,\n            amounts[amounts.length - 1],\n            amountInReserve,\n            amounts[amounts.length - 1],\n            amountInReserveMin,\n            to,\n            deadline\n        );\n    }\n\n    function addLiquidityNativeCurrency(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountNativeCurrencyMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        ensure(deadline)\n        returns (\n            uint256 amountToken,\n            uint256 amountNativeCurrency,\n            uint256 liquidity\n        )\n    {\n        (amountToken, amountNativeCurrency) = _addLiquidity(\n            token,\n            WNativeCurrency,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountNativeCurrencyMin\n        );\n        address pair = Helper.pairFor(factory, token, WNativeCurrency);\n        Helper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWNativeCurrency(WNativeCurrency).deposit{\n            value: amountNativeCurrency\n        }();\n        require(IERC20(WNativeCurrency).transfer(pair, amountNativeCurrency));\n        liquidity = IPair(pair).mint(to);\n        if (msg.value > amountNativeCurrency)\n            Helper.safeTransferNativeCurrency(\n                msg.sender,\n                msg.value - amountNativeCurrency\n            ); // refund dust native currency, if any\n    }\n\n    function addLiquiditySingleNativeCurrency(\n        address[] memory path,\n        uint256 amountSwapOut,\n        uint256 nativeCurrencySwapInMax,\n        uint256 nativeCurrencyReserveMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        ensure(deadline)\n        returns (\n            uint256 amountToken,\n            uint256 amountNativeCurrency,\n            uint256 liquidity\n        )\n    {\n        // Swap\n        require(path[0] == WNativeCurrency, \"Router: INVALID_PATH\");\n        uint256[] memory amounts = Helper.getAmountsIn(\n            factory,\n            amountSwapOut,\n            path\n        );\n\n        require(amounts[0] <= msg.value, \"Router: EXCESSIVE_INPUT_AMOUNT\");\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\n\n        require(\n            IERC20(WNativeCurrency).transfer(\n                Helper.pairFor(factory, path[0], path[1]),\n                amounts[0]\n            )\n        );\n\n        _swap(amounts, path, to);\n\n        require(\n            amounts[0] <= nativeCurrencySwapInMax,\n            \"not allow bigger than nativeCurrencySwapInMax\"\n        );\n\n        // Addliquidity\n        address token = path[path.length - 1];\n        uint256 nativeCurrencyReserve = msg.value - amounts[0];\n        (amountToken, amountNativeCurrency) = _addLiquidity(\n            token,\n            WNativeCurrency,\n            amounts[amounts.length - 1],\n            nativeCurrencyReserve,\n            amounts[amounts.length - 1],\n            nativeCurrencyReserveMin\n        );\n\n        address pair = Helper.pairFor(factory, token, WNativeCurrency);\n\n        Helper.safeTransferFrom(token, msg.sender, pair, amountToken);\n\n        IWNativeCurrency(WNativeCurrency).deposit{\n            value: amountNativeCurrency\n        }();\n\n        require(IERC20(WNativeCurrency).transfer(pair, amountNativeCurrency));\n\n        liquidity = IPair(pair).mint(to);\n\n        if (msg.value > (amountNativeCurrency + amounts[0]))\n            Helper.safeTransferNativeCurrency(\n                msg.sender,\n                msg.value - (amountNativeCurrency + amounts[0])\n            ); // refund dust native currency, if any\n    }\n\n    function _addLiquidity(\n        address token0,\n        address token1,\n        uint256 amount0Desired,\n        uint256 amount1Desired,\n        uint256 amount0Min,\n        uint256 amount1Min\n    ) private returns (uint256 amount0, uint256 amount1) {\n        if (IFactory(factory).getPair(token0, token1) == address(0)) {\n            IFactory(factory).createPair(token0, token1);\n        }\n        (uint256 reserve0, uint256 reserve1) = Helper.getReserves(\n            factory,\n            token0,\n            token1\n        );\n        if (reserve0 == 0 && reserve1 == 0) {\n            (amount0, amount1) = (amount0Desired, amount1Desired);\n        } else {\n            uint256 amount1Optimal = Helper.quote(\n                amount0Desired,\n                reserve0,\n                reserve1\n            );\n            if (amount1Optimal <= amount1Desired) {\n                require(\n                    amount1Optimal >= amount1Min,\n                    \"Router: INSUFFICIENT_1_AMOUNT\"\n                );\n                (amount0, amount1) = (amount0Desired, amount1Optimal);\n            } else {\n                uint256 amount0Optimal = Helper.quote(\n                    amount1Desired,\n                    reserve1,\n                    reserve0\n                );\n                require(amount0Optimal <= amount0Desired);\n                require(\n                    amount0Optimal >= amount0Min,\n                    \"Router: INSUFFICIENT_0_AMOUNT\"\n                );\n                (amount0, amount1) = (amount0Optimal, amount1Desired);\n            }\n        }\n    }\n\n    function removeLiquidity(\n        address token0,\n        address token1,\n        uint256 liquidity,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        address to,\n        uint256 deadline\n    )\n        public\n        override\n        ensure(deadline)\n        returns (uint256 amount0, uint256 amount1)\n    {\n        address pair = Helper.pairFor(factory, token0, token1);\n        IERC20(pair).transferFrom(msg.sender, pair, liquidity);\n        (uint256 amountA, uint256 amountB) = IPair(pair).burn(to);\n        (address tokenA, ) = Helper.sortTokens(token0, token1);\n        (amount0, amount1) = tokenA == token0\n            ? (amountA, amountB)\n            : (amountB, amountA);\n        require(amount0 >= amount0Min, \"Router: INSUFFICIENT_0_AMOUNT\");\n        require(amount1 >= amount1Min, \"Router: INSUFFICIENT_1_AMOUNT\");\n    }\n\n    function removeLiquidityNativeCurrency(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountNativeCurrencyMin,\n        address to,\n        uint256 deadline\n    )\n        public\n        override\n        ensure(deadline)\n        returns (uint256 amountToken, uint256 amountNativeCurrency)\n    {\n        (amountToken, amountNativeCurrency) = removeLiquidity(\n            token,\n            WNativeCurrency,\n            liquidity,\n            amountTokenMin,\n            amountNativeCurrencyMin,\n            address(this),\n            deadline\n        );\n        Helper.safeTransfer(token, to, amountToken);\n        IWNativeCurrency(WNativeCurrency).withdraw(amountNativeCurrency);\n        Helper.safeTransferNativeCurrency(to, amountNativeCurrency);\n    }\n\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) private {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = Helper.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2\n                ? Helper.pairFor(factory, output, path[i + 2])\n                : _to;\n            IPair(Helper.pairFor(factory, input, output)).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n        }\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) public override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = Helper.getAmountsOut(factory, amountIn, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        Helper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            Helper.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) public override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"Router: EXCESSIVE_INPUT_AMOUNT\");\n        Helper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            Helper.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapExactNativeCurrencyForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        ensure(deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(path[0] == WNativeCurrency, \"Router: INVALID_PATH\");\n        amounts = Helper.getAmountsOut(factory, msg.value, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\n        require(\n            IERC20(WNativeCurrency).transfer(\n                Helper.pairFor(factory, path[0], path[1]),\n                amounts[0]\n            )\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactNativeCurrency(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        require(\n            path[path.length - 1] == WNativeCurrency,\n            \"Router: INVALID_PATH\"\n        );\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"Router: EXCESSIVE_INPUT_AMOUNT\");\n        Helper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            Helper.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWNativeCurrency(WNativeCurrency).withdraw(amounts[amounts.length - 1]);\n        Helper.safeTransferNativeCurrency(to, amounts[amounts.length - 1]);\n    }\n\n    function swapExactTokensForNativeCurrency(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        require(\n            path[path.length - 1] == WNativeCurrency,\n            \"Router: INVALID_PATH\"\n        );\n        amounts = Helper.getAmountsOut(factory, amountIn, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        Helper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            Helper.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWNativeCurrency(WNativeCurrency).withdraw(amounts[amounts.length - 1]);\n        Helper.safeTransferNativeCurrency(to, amounts[amounts.length - 1]);\n    }\n\n    function swapNativeCurrencyForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        ensure(deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(path[0] == WNativeCurrency, \"Router: INVALID_PATH\");\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, \"Router: EXCESSIVE_INPUT_AMOUNT\");\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\n        require(\n            IERC20(WNativeCurrency).transfer(\n                Helper.pairFor(factory, path[0], path[1]),\n                amounts[0]\n            )\n        );\n        _swap(amounts, path, to);\n        if (msg.value > amounts[0])\n            Helper.safeTransferNativeCurrency(\n                msg.sender,\n                msg.value - amounts[0]\n            ); // refund dust eth, if any\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure override returns (uint256 amountOut) {\n        return Helper.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure override returns (uint256 amountIn) {\n        return Helper.getAmountOut(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        public\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        return Helper.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint256 amountOut, address[] memory path)\n        public\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        return Helper.getAmountsIn(factory, amountOut, path);\n    }\n}\n"
    },
    "contracts/libraries/LiquidityMathLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport { IPair } from '../core/interfaces/IPair.sol';\nimport { IFactory } from '../core/interfaces/IFactory.sol';\nimport { Helper } from './Helper.sol';\nimport { Math } from '@openzeppelin/contracts/utils/math/Math.sol';\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary LiquidityMathLibrary {\n    error ZeroPairReserves();\n    error InvalidLiquidityAmount();\n\n    // computes the direction and magnitude of the profit-maximizing trade\n    function computeProfitMaximizingTrade(\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB,\n        uint256 reserveA,\n        uint256 reserveB\n    ) pure internal returns (bool aToB, uint256 amountIn) {\n        aToB = Math.mulDiv(reserveA, truePriceTokenB, reserveB) < truePriceTokenA;\n\n        uint256 invariant = reserveA * reserveB;\n\n        uint256 leftSide = Math.sqrt(\n            Math.mulDiv(\n                invariant * 1000,\n                aToB ? truePriceTokenA : truePriceTokenB,\n                (aToB ? truePriceTokenB : truePriceTokenA) * 997\n            )\n        );\n        uint256 rightSide = (aToB ? reserveA * 1000 : reserveB * 1000) / 997;\n\n        if (leftSide < rightSide) return (false, 0);\n\n        // compute the amount that must be sent to move the price to the profit-maximizing price\n        amountIn = leftSide - rightSide;\n    }\n\n    // gets the reserves after an arbitrage moves the price to the profit-maximizing ratio given an externally observed true price\n    function getReservesAfterArbitrage(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB\n    ) view internal returns (uint256 reserveA, uint256 reserveB) {\n        // first get reserves before the swap\n        (reserveA, reserveB) = Helper.getReserves(factory, tokenA, tokenB);\n\n        if (reserveA == 0 || reserveB == 0) revert ZeroPairReserves();\n\n        // then compute how much to swap to arb to the true price\n        (bool aToB, uint256 amountIn) = computeProfitMaximizingTrade(truePriceTokenA, truePriceTokenB, reserveA, reserveB);\n\n        if (amountIn == 0) {\n            return (reserveA, reserveB);\n        }\n\n        // now affect the trade to the reserves\n        if (aToB) {\n            uint256 amountOut = Helper.getAmountOut(amountIn, reserveA, reserveB);\n            reserveA += amountIn;\n            reserveB -= amountOut;\n        } else {\n            uint256 amountOut = Helper.getAmountOut(amountIn, reserveB, reserveA);\n            reserveB += amountIn;\n            reserveA -= amountOut;\n        }\n    }\n\n    // computes liquidity value given all the parameters of the pair\n    function computeLiquidityValue(\n        uint256 reservesA,\n        uint256 reservesB,\n        uint256 totalSupply,\n        uint256 liquidityAmount,\n        uint8 feeBasePoint,\n        uint256 kLast\n    ) internal pure returns (uint256 tokenAAmount, uint256 tokenBAmount) {\n        if (feeBasePoint > 0 && kLast > 0) {\n            uint256 rootK = Math.sqrt(reservesA * reservesB);\n            uint256 rootKLast = Math.sqrt(kLast);\n            if (rootK > rootKLast) {\n                uint256 numerator1 = totalSupply;\n                uint256 numerator2 = rootK - rootKLast;\n                uint256 denominator = (rootK * (30 - feeBasePoint)) / feeBasePoint + rootKLast;\n                uint256 feeLiquidity = Math.mulDiv(numerator1, numerator2, denominator);\n                totalSupply = totalSupply + feeLiquidity;\n            }\n        }\n        return (reservesA * liquidityAmount / totalSupply, reservesB * liquidityAmount / totalSupply);\n    }\n\n    // get all current parameters from the pair and compute value of a liquidity amount\n    // **note this is subject to manipulation, e.g. sandwich attacks**. prefer passing a manipulation resistant price to\n    // #getLiquidityValueAfterArbitrageToPrice\n    function getLiquidityValue(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint256 liquidityAmount\n    ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\n        (uint256 reservesA, uint256 reservesB) = Helper.getReserves(factory, tokenA, tokenB);\n        IPair pair = IPair(Helper.pairFor(factory, tokenA, tokenB));\n        uint8 feeBasePoint = IFactory(factory).feeBasePoint();\n        uint256 kLast = feeBasePoint > 0 ? pair.kLast() : 0;\n        uint256 totalSupply = IERC20(address(pair)).totalSupply();\n        return computeLiquidityValue(reservesA, reservesB, totalSupply, liquidityAmount, feeBasePoint, kLast);\n    }\n\n    // given two tokens, tokenA and tokenB, and their \"true price\", i.e. the observed ratio of value of token A to token B,\n    // and a liquidity amount, returns the value of the liquidity in terms of tokenA and tokenB\n    function getLiquidityValueAfterArbitrageToPrice(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB,\n        uint256 liquidityAmount\n    ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\n        uint8 feeBasePoint = IFactory(factory).feeBasePoint();\n        IPair pair = IPair(Helper.pairFor(factory, tokenA, tokenB));\n        uint256 kLast = feeBasePoint > 0 ? pair.kLast() : 0;\n        uint256 totalSupply = IERC20(address(pair)).totalSupply();\n\n        // this also checks that totalSupply > 0\n        if (totalSupply < liquidityAmount || liquidityAmount == 0) revert InvalidLiquidityAmount();\n\n        (uint256 reservesA, uint256 reservesB) = getReservesAfterArbitrage(factory, tokenA, tokenB, truePriceTokenA, truePriceTokenB);\n\n        return computeLiquidityValue(reservesA, reservesB, totalSupply, liquidityAmount, feeBasePoint, kLast);\n    }\n}\n"
    },
    "contracts/examples/ExampleComputeLiquidityValue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport { LiquidityMathLibrary } from '../libraries/LiquidityMathLibrary.sol';\n\ncontract ExampleComputeLiquidityValue {\n    address public immutable factory;\n\n    constructor(address factory_) {\n        factory = factory_; \n    }\n\n    function getReservesAfterArbitrage(\n        address tokenA,\n        address tokenB,\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB\n    ) external view returns (uint256 reserveA, uint256 reserveB) {\n        return LiquidityMathLibrary.getReservesAfterArbitrage(\n            factory,\n            tokenA,\n            tokenB,\n            truePriceTokenA,\n            truePriceTokenB\n        );\n    }\n\n    function getLiquidityValue(\n        address tokenA,\n        address tokenB,\n        uint256 liquidityAmount\n    ) external view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\n        return LiquidityMathLibrary.getLiquidityValue(\n            factory,\n            tokenA,\n            tokenB,\n            liquidityAmount\n        );\n    }\n\n    function getLiquidityValueAfterArbitrageToPrice(\n        address tokenA,\n        address tokenB,\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB,\n        uint256 liquidityAmount\n    ) external view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\n        return LiquidityMathLibrary.getLiquidityValueAfterArbitrageToPrice(\n            factory,\n            tokenA,\n            tokenB,\n            truePriceTokenA,\n            truePriceTokenB,\n            liquidityAmount\n        );\n    }\n\n    function getGasCostOfGetLiquidityValueAfterArbitrageToPrice(\n        address tokenA,\n        address tokenB,\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB,\n        uint256 liquidityAmount\n    ) external view returns (uint256) {\n        uint gasBefore = gasleft();\n        LiquidityMathLibrary.getLiquidityValueAfterArbitrageToPrice(\n            factory,\n            tokenA,\n            tokenB,\n            truePriceTokenA,\n            truePriceTokenB,\n            liquidityAmount\n        );\n        uint gasAfter = gasleft();\n        return gasBefore - gasAfter;\n    }\n}\n"
    },
    "contracts/test/MockZenlinkERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport '../core/ZenlinkERC20.sol';\n\ncontract MockZenlinkERC20 is ZenlinkERC20 {\n    constructor(uint256 _totalSupply) {\n        _mint(msg.sender, _totalSupply);\n    }\n}\n"
    },
    "contracts/periphery/Farming.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"../libraries/Math.sol\";\nimport \"../libraries/Helper.sol\";\nimport \"../libraries/AdminUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Farming is AdminUpgradeable {\n    using Math for uint256;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many farming tokens that user has provided.\n        uint256[] rewardDebt; // Reward debt. See explanation below.\n        // pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\n        // Whenever a user stakes or redeems farming tokens to a pool. Here's what happens:\n        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User add pending reward to his/her info.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n        uint256[] pending; // Pending rewards.\n        uint256 nextClaimableBlock; // Next Block user can claim rewards.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        address farmingToken; // Address of farming token contract.\n        address[] rewardTokens; // Reward tokens.\n        uint256[] rewardPerBlock; // Reward tokens created per block.\n        uint256[] accRewardPerShare; // Accumulated rewards per share, times 1e12.\n        uint256[] remainingRewards; // remaining rewards in the pool.\n        uint256 amount; // amount of farming token.\n        uint256 lastRewardBlock; // Last block number that pools updated.\n        uint256 startBlock; // Start block of pools.\n        uint256 claimableInterval; // How many blocks of rewards can be claimed.\n    }\n    // Info of each pool.\n    PoolInfo[] private poolInfo;\n    // Info of each user that stakes farming tokens.\n    mapping(uint256 => mapping(address => UserInfo)) private userInfo;\n\n    event PoolAdded(address indexed farmingToken);\n    event ClaimableBlockUpdated(uint256 indexed pid, uint256 interval);\n    event Charged(uint256 indexed pid, address[] rewards, uint256[] amounts);\n    event WithdrawRewards(uint256 indexed pid, address[] rewards, uint256[] amounts);\n    event Stake(address indexed user, uint256 indexed pid, uint256 amount);\n    event Redeem(address indexed user, uint256 indexed pid, uint256 amount);\n    event Claim(\n        address indexed user, \n        uint256 indexed pid, \n        address[] rewards,\n        uint256[] amounts\n    );\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    constructor() {\n        _initializeAdmin(msg.sender);\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new farming token to the pool. Can only be called by the admin.\n    // XXX DO NOT add the same farming token more than once. Rewards will be messed up if you do.\n    function add(\n        address _farmingToken,\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardPerBlock,\n        uint256 _startBlock,\n        uint256 _claimableInterval\n    ) external onlyAdmin {\n        require(_rewardTokens.length == _rewardPerBlock.length, 'INVALID_REWARDS');\n        uint256 lastRewardBlock =\n            block.number > _startBlock ? block.number : _startBlock;\n        uint256[] memory accRewardPerShare = new uint256[](_rewardTokens.length);\n        uint256[] memory remainingRewards = new uint256[](_rewardTokens.length);\n        poolInfo.push(\n            PoolInfo({\n                farmingToken: _farmingToken,\n                rewardTokens: _rewardTokens,\n                rewardPerBlock: _rewardPerBlock,\n                accRewardPerShare: accRewardPerShare,\n                remainingRewards: remainingRewards,\n                amount: 0,\n                lastRewardBlock: lastRewardBlock,\n                startBlock: _startBlock,\n                claimableInterval: _claimableInterval\n            })\n        );\n        emit PoolAdded(_farmingToken);\n    }\n\n    // Update the given pool's rewardPerBlock. Can only be called by the admin.\n    function set(\n        uint256 _pid,\n        uint256[] memory _rewardPerBlock,\n        bool _withUpdate\n    ) external onlyAdmin {\n        if (_withUpdate) {\n            updatePool(_pid);\n        }\n        PoolInfo storage pool = poolInfo[_pid];\n        require(_rewardPerBlock.length == pool.rewardPerBlock.length, 'INVALID_REWARDS');\n        pool.rewardPerBlock = _rewardPerBlock;\n    }\n\n    function setClaimableBlock(\n        uint256 _pid,\n        uint256 _interval\n    ) external onlyAdmin {\n        PoolInfo storage pool = poolInfo[_pid];\n        pool.claimableInterval = _interval;\n        emit ClaimableBlockUpdated(_pid, _interval);\n    }\n\n    // Charge the given pool's rewards. Can only be called by the admin.\n    function charge(\n        uint256 _pid,\n        uint256[] memory _amounts\n    ) external onlyAdmin {\n        PoolInfo storage pool = poolInfo[_pid];\n        require(_amounts.length == pool.rewardTokens.length, 'INVALID_AMOUNTS');\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            if (_amounts[i] > 0) {\n                Helper.safeTransferFrom(\n                    pool.rewardTokens[i], \n                    msg.sender, \n                    address(this), \n                    _amounts[i]\n                );\n                pool.remainingRewards[i] = pool.remainingRewards[i].add(_amounts[i]);\n            }\n        }\n        emit Charged(_pid, pool.rewardTokens, _amounts);\n    }\n\n    // Withdraw the given pool's rewards. Can only be called by the admin.\n    function withdrawRewards(\n        uint256 _pid,\n        uint256[] memory _amounts\n    ) external onlyAdmin {\n        PoolInfo storage pool = poolInfo[_pid];\n        require(_amounts.length == pool.rewardTokens.length, 'INVALID_AMOUNTS');\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            require(_amounts[i] <= pool.remainingRewards[i], 'INVALID_AMOUNT');\n            if (_amounts[i] > 0) {\n                Helper.safeTransfer(\n                    pool.rewardTokens[i], \n                    msg.sender, \n                    _amounts[i]\n                );\n                pool.remainingRewards[i] = pool.remainingRewards[i].sub(_amounts[i]);\n            }\n        }\n        emit WithdrawRewards(_pid, pool.rewardTokens, _amounts);\n    }\n\n    // View function to see the given pool's info.\n    function getPoolInfo(uint256 _pid) \n        external \n        view\n        returns(\n            address farmingToken,\n            uint256 amount,\n            address[] memory rewardTokens,\n            uint256[] memory rewardPerBlock,\n            uint256[] memory accRewardPerShare,\n            uint256 lastRewardBlock,\n            uint256 startBlock,\n            uint256 claimableInterval\n        )\n    {\n        PoolInfo memory pool = poolInfo[_pid];\n        farmingToken = pool.farmingToken;\n        amount = pool.amount;\n        rewardTokens = pool.rewardTokens;\n        rewardPerBlock = pool.rewardPerBlock;\n        accRewardPerShare = pool.accRewardPerShare;\n        lastRewardBlock = pool.lastRewardBlock;\n        startBlock = pool.startBlock;\n        claimableInterval = pool.claimableInterval;\n    }\n\n    // View function to see the remaing rewards of the given pool.\n    function getRemaingRewards(uint256 _pid) \n        external\n        view\n        returns(uint256[] memory remainingRewards)\n    {\n        PoolInfo memory pool = poolInfo[_pid];\n        remainingRewards = pool.remainingRewards;\n    }\n\n    // View function to see the given pool's info of user.\n    function getUserInfo(uint256 _pid, address _user)\n        external \n        view\n        returns(\n            uint256 amount,\n            uint256[] memory pending,\n            uint256[] memory rewardDebt,\n            uint256 nextClaimableBlock\n        )\n    {\n        UserInfo memory user = userInfo[_pid][_user];\n        amount = user.amount;\n        pending = user.pending;\n        rewardDebt= user.rewardDebt;\n        nextClaimableBlock = user.nextClaimableBlock;\n    }\n\n    // View function to see pending rewards.\n    function pendingRewards(uint256 _pid, address _user) \n        public \n        view \n        returns(uint256[] memory rewards, uint256 nextClaimableBlock)\n    {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo memory user = userInfo[_pid][_user];\n        uint256 farmingTokenSupply = pool.amount;\n        rewards = user.pending;\n        if (block.number >= pool.lastRewardBlock && user.pending.length > 0 && farmingTokenSupply != 0) {\n            for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\n                uint256 reward = pool.rewardPerBlock[i].mul(\n                    block.number.sub(pool.lastRewardBlock)\n                );\n                uint256 accRewardPerShare = pool.accRewardPerShare[i].add(\n                    reward.mul(1e12) / farmingTokenSupply\n                );\n                rewards[i] = user.pending[i].add(\n                    (user.amount.mul(accRewardPerShare) / 1e12).sub(user.rewardDebt[i])\n                );\n            }\n        }\n        nextClaimableBlock = user.nextClaimableBlock;\n    }\n\n    // View function to see current periods.\n    function getPeriodsSinceStart(uint256 _pid) \n        public \n        view \n        returns(uint256 periods) \n    {\n        PoolInfo memory pool = poolInfo[_pid];\n        if (block.number <= pool.startBlock || pool.claimableInterval == 0) return 0;\n        uint256 blocksSinceStart = block.number.sub(pool.startBlock);\n        periods = (blocksSinceStart / pool.claimableInterval).add(1);\n        if (blocksSinceStart % pool.claimableInterval == 0) {\n            periods = periods - 1;\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 farmingTokenSupply = pool.amount;\n        if (farmingTokenSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\n            uint256 reward = pool.rewardPerBlock[i].mul(\n                block.number.sub(pool.lastRewardBlock)\n            );\n            if (pool.remainingRewards[i] >= reward) {\n                pool.remainingRewards[i] = pool.remainingRewards[i].sub(reward);\n            } else {\n                pool.remainingRewards[i] = 0;\n            }\n            pool.accRewardPerShare[i] = pool.accRewardPerShare[i].add(\n                reward.mul(1e12) / farmingTokenSupply\n            );\n        }\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Stake farming tokens to the given pool.\n    function stake(\n        uint256 _pid,\n        address _farmingToken, \n        uint256 _amount\n    ) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(pool.farmingToken == _farmingToken, 'FARMING_TOKEN_SAFETY_CHECK');\n        updatePool(_pid);\n        if (user.amount > 0) {\n            for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\n                uint256 pending = (\n                    user.amount.mul(pool.accRewardPerShare[i]) / 1e12\n                ).sub(user.rewardDebt[i]);\n                user.pending[i] = user.pending[i].add(pending);\n            }\n        }\n        if (user.nextClaimableBlock == 0 && user.amount == 0) {\n            if (block.number <= pool.startBlock) {\n                user.nextClaimableBlock = pool.startBlock.add(pool.claimableInterval);\n            } else {\n                uint256 periods = getPeriodsSinceStart(_pid);\n                user.nextClaimableBlock = pool.startBlock.add(\n                    periods.mul(pool.claimableInterval)\n                );\n            }\n            user.rewardDebt = new uint256[](pool.rewardTokens.length);\n            user.pending = new uint256[](pool.rewardTokens.length);\n        }\n        Helper.safeTransferFrom(\n            pool.farmingToken, \n            msg.sender, \n            address(this), \n            _amount\n        );\n        user.amount = user.amount.add(_amount);\n        pool.amount = pool.amount.add(_amount);\n        for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\n            user.rewardDebt[i] = user.amount.mul(pool.accRewardPerShare[i]) / 1e12;\n        }\n        emit Stake(msg.sender, _pid, _amount);\n    }\n\n    // Redeem farming tokens from the given pool.\n    function redeem(\n        uint256 _pid, \n        address _farmingToken, \n        uint256 _amount\n    ) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(pool.farmingToken == _farmingToken, 'FARMING_TOKEN_SAFETY_CHECK');\n        require(user.amount >= _amount, 'INSUFFICIENT_AMOUNT');\n        updatePool(_pid);\n        for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\n            uint256 pending = (\n                user.amount.mul(pool.accRewardPerShare[i]) / 1e12\n            ).sub(user.rewardDebt[i]);\n            user.pending[i] = user.pending[i].add(pending);\n            user.rewardDebt[i] = user.amount.sub(_amount).mul(pool.accRewardPerShare[i]) / 1e12;\n        }\n        Helper.safeTransfer(pool.farmingToken, msg.sender, _amount);\n        user.amount = user.amount.sub(_amount);\n        pool.amount = pool.amount.sub(_amount);\n        emit Redeem(msg.sender, _pid, _amount);\n    }\n\n    // Claim rewards when block number larger than user's nextClaimableBlock.\n    function claim(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(block.number > user.nextClaimableBlock, 'NOT_CLAIMABLE');\n        (uint256[] memory rewards, ) = pendingRewards(_pid, msg.sender);\n        updatePool(_pid);\n        for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\n            user.pending[i] = 0;\n            user.rewardDebt[i] = user.amount.mul(pool.accRewardPerShare[i]) / 1e12;\n            if (rewards[i] > 0) {\n                Helper.safeTransfer(pool.rewardTokens[i], msg.sender, rewards[i]);\n            }\n        }\n        uint256 periods = getPeriodsSinceStart(_pid);\n        user.nextClaimableBlock = pool.startBlock.add(\n            periods.mul(pool.claimableInterval)\n        );\n        emit Claim(msg.sender, _pid, pool.rewardTokens, rewards);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        pool.amount = pool.amount.sub(amount);\n        user.amount = 0;\n        user.pending = new uint256[](pool.accRewardPerShare.length);\n        user.rewardDebt = new uint256[](pool.accRewardPerShare.length);\n        user.nextClaimableBlock = 0;\n        Helper.safeTransfer(pool.farmingToken, msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n}\n"
    },
    "contracts/governance/Gauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AdminUpgradeable} from \"../libraries/AdminUpgradeable.sol\";\nimport {Farming} from \"../periphery/Farming.sol\";\n\ncontract Gauge is AdminUpgradeable {\n    using SafeERC20 for IERC20;\n\n    /// @notice The address of framing contract\n    address public farming;\n\n    /// @notice The address of the token used to vote.\n    address public voteToken;\n\n    /// @notice The duration between tow vote period.\n    uint256 public voteSetWindow;\n\n    /// @notice The duration of a vote period.\n    uint256 public voteDuration;\n\n    /// @notice The next vote period id.\n    uint256 public nextVotePeriodID;\n\n    struct PoolPeriodState {\n        /// @notice Flag marking whether the pool inherit the last period token.\n        bool inherit;\n        /// @notice Flag marking whether the pool votalbe has been reset by admin.\n        bool resetVotable;\n        /// @notice Flag marking whether the pool is votalbe in this period.\n        bool votable;\n        /// @notice score this pool get in this period.\n        uint256 score;\n        /// @notice The Amount of token this pool get in this period.\n        uint256 totalAmount;\n    }\n\n    struct VotePeriod {\n        /// @notice The start timestmap of this vote period\n        uint256 start;\n        /// @notice The end timestmap of this vote period\n        uint256 end;\n    }\n\n    /// @notice (periodId => VotePeriod)\n    mapping(uint256 => VotePeriod) public votePeriods;\n\n    /// @notice (userAddress => pooId => amount)\n    mapping(address => mapping(uint256 => uint256)) public userInfos;\n\n    /// @notice periodId => (poolId => PoolPeriodState)\n    mapping(uint256 => mapping(uint256 => PoolPeriodState)) public allPoolState;\n\n    /// @notice pool last update period\n    mapping(uint256 => uint256) public poolLastUpdatePeriod;\n\n    ///@notice poolId => bool, flag mark whether the trading pool is consist of stablecoins\n    mapping(uint256 => bool) public stablePools;\n\n    event UpdatePoolHistory(\n        uint256 indexed poolId,\n        uint256 curPeriod,\n        uint256 lastPeriod,\n        uint256 needUpdatePool,\n        uint256 lastPeriodAmount\n    );\n\n    event Vote(\n        address indexed voter,\n        uint256 indexed period,\n        uint256 poolId,\n        uint256 amount\n    );\n\n    event CancelVote(\n        address indexed voter,\n        uint256 indexed period,\n        uint256 poolId,\n        uint256 amount\n    );\n\n    event InheritPool(\n        uint256 poolId,\n        uint256 curPeriod,\n        uint256 lastPeriod,\n        uint256 amount,\n        bool votable\n    );\n\n    event BatchVote(\n        address indexed voter,\n        uint256 indexed periodId,\n        uint256[] poolIds,\n        uint256[] amounts\n    );\n\n    event BatchCancelVote(\n        address indexed voter,\n        uint256 indexed periodId,\n        uint256[] poolIds,\n        uint256[] amounts\n    );\n\n    event UpdateVotePeriod(uint256 curPeriod, uint256 start, uint256 end);\n\n    event SetNonVotablePools(uint256 period, uint256[] pools);\n\n    event SetVotablePools(uint256 period, uint256[] pools);\n\n    event UpdateVoteSetWindow(uint256 curPeriod, uint256 voteSetWindow);\n\n    event UpdateVoteDuration(uint256 curPeriod, uint256 voteDuration);\n\n    event UpdateStablePools(uint256[] pids);\n\n    event MigrateVote(\n        address indexed voter,\n        uint256 indexed period,\n        uint256[] fromPoolIds,\n        uint256[] fromAmounts,\n        uint256[] toPoolIds,\n        uint256[] toAmounts\n    );\n\n    error InvalidBlock(uint256 block);\n    error PoolNotAllowedToVote(uint256 poolId);\n    error InsuffientAmount(uint256 amount);\n    error ArrayMismatch();\n    error AmountNotEqual(uint256 amount0, uint256 amount1);\n    error NoNeedToUpdate(uint256 curPeriod, uint256 period);\n\n    constructor(\n        address _farming,\n        address _voteToken,\n        uint256 _voteDuration,\n        uint256 _voteSetWindow,\n        uint256 _firstPeriodStart\n    ) {\n        if (block.timestamp >= _firstPeriodStart)\n            revert InvalidBlock(_firstPeriodStart);\n\n        nextVotePeriodID = 1;\n        voteToken = _voteToken;\n        farming = _farming;\n        voteSetWindow = _voteSetWindow;\n        voteDuration = _voteDuration;\n\n        votePeriods[0] = VotePeriod(\n            _firstPeriodStart,\n            _firstPeriodStart + voteDuration\n        );\n\n        _initializeAdmin(msg.sender);\n    }\n\n    function updateVoteSetWindow(uint256 _voteSetWindow) external onlyAdmin {\n        uint256 curPeriodId = getCurrentPeriodId();\n        voteSetWindow = _voteSetWindow;\n        emit UpdateVoteSetWindow(curPeriodId, voteSetWindow);\n    }\n\n    function updateVoteDuration(uint256 _voteDuration) external onlyAdmin {\n        uint256 curPeriodId = getCurrentPeriodId();\n        voteDuration = _voteDuration;\n        emit UpdateVoteDuration(curPeriodId, voteDuration);\n    }\n\n    function updateVotePeriod() public {\n        uint256 curTimestamp = block.timestamp;\n        uint256 curPeriodId = getCurrentPeriodId();\n\n        VotePeriod storage curPeriod = votePeriods[curPeriodId];\n\n        if (curPeriod.end > curTimestamp) {\n            return;\n        }\n\n        VotePeriod storage nextPeriod = votePeriods[nextVotePeriodID];\n        if (curPeriod.end + voteSetWindow >= curTimestamp) {\n            nextPeriod.start = curPeriod.end + voteSetWindow;\n            nextPeriod.end = nextPeriod.start + voteDuration;\n        } else {\n            nextPeriod.start = curTimestamp;\n            nextPeriod.end = curTimestamp + voteDuration;\n        }\n\n        emit UpdateVotePeriod(\n            nextVotePeriodID,\n            nextPeriod.start,\n            nextPeriod.end\n        );\n\n        nextVotePeriodID++;\n    }\n\n    function setVotablePools(uint256[] memory poolIds) external onlyAdmin {\n        uint256 periodId = getCurrentPeriodId();\n        VotePeriod memory curPeriod = votePeriods[periodId];\n\n        if (curPeriod.end < block.timestamp) {\n            periodId = nextVotePeriodID;\n        }\n\n        for (uint256 i; i < poolIds.length; i++) {\n            PoolPeriodState storage poolPeriodState = allPoolState[periodId][poolIds[i]];\n            poolPeriodState.votable = true;\n            poolPeriodState.resetVotable = true;\n        }\n        emit SetVotablePools(periodId, poolIds);\n    }\n\n    function setNonVotablePools(uint256[] memory poolIds) external onlyAdmin {\n        uint256 periodId = getCurrentPeriodId();\n\n        VotePeriod memory curPeriod = votePeriods[periodId];\n\n        if (curPeriod.end < block.timestamp) {\n            periodId = nextVotePeriodID;\n        }\n\n        for (uint256 i; i < poolIds.length; i++) {\n            PoolPeriodState storage poolPeriodState = allPoolState[periodId][poolIds[i]];\n            poolPeriodState.votable = false;\n            poolPeriodState.resetVotable = true;\n        }\n        emit SetNonVotablePools(periodId, poolIds);\n    }\n\n    function vote(uint256 poolId, uint256 amount) external {\n        updateVotePeriod();\n\n        uint256 curPeriodId = getCurrentPeriodId();\n        VotePeriod memory currentPeriod = votePeriods[curPeriodId];\n\n        if (block.timestamp >= currentPeriod.end)\n            revert InvalidBlock(currentPeriod.end);\n\n        PoolPeriodState storage curPoolState = _inheritExpiredPool(poolId);\n        _vote(poolId, amount, curPoolState, currentPeriod);\n\n        emit Vote(msg.sender, curPeriodId, poolId, amount);\n    }\n\n    function _vote(\n        uint256 poolId,\n        uint256 amount,\n        PoolPeriodState storage curPoolState,\n        VotePeriod memory currentPeriod\n    ) internal {\n        uint256 curTimestamp = block.timestamp;\n\n        if (!curPoolState.votable) revert PoolNotAllowedToVote(poolId);\n\n        IERC20(voteToken).safeTransferFrom(msg.sender, address(this), amount);\n\n        if (curTimestamp < currentPeriod.start) {\n            curTimestamp = currentPeriod.start;\n        }\n\n        uint256 score = ((currentPeriod.end - curTimestamp) * amount) /\n            (currentPeriod.end - currentPeriod.start);\n\n        curPoolState.score += score;\n        curPoolState.totalAmount += amount;\n\n        userInfos[msg.sender][poolId] += amount;\n    }\n\n    function cancelVote(uint256 poolId, uint256 amount) external {\n        updateVotePeriod();\n        PoolPeriodState storage poolState = _inheritExpiredPool(poolId);\n\n        uint256 curPeriodId = getCurrentPeriodId();\n        _cancelVote(poolId, curPeriodId, poolState, amount);\n\n        emit CancelVote(msg.sender, curPeriodId, poolId, amount);\n    }\n\n    function _cancelVote(\n        uint256 poolId,\n        uint256 curPeriodId,\n        PoolPeriodState storage poolState,\n        uint256 amount\n    ) internal {\n        uint256 userBalance = userInfos[msg.sender][poolId];\n        if (userBalance < amount) revert InsuffientAmount(userBalance);\n\n        userInfos[msg.sender][poolId] -= amount;\n\n        IERC20(voteToken).safeTransfer(msg.sender, amount);\n\n        VotePeriod memory curPeriod = votePeriods[curPeriodId];\n\n        uint256 curTimestamp = block.timestamp;\n\n        if (curTimestamp < curPeriod.start) {\n            poolState.score -= amount;\n        } else if (curTimestamp <= curPeriod.end) {\n            poolState.score -=\n                (amount * (curPeriod.end - curTimestamp)) /\n                (curPeriod.end - curPeriod.start);\n        }\n\n        poolState.totalAmount -= amount;\n    }\n\n    function batchVote(uint256[] memory poolIds, uint256[] memory amounts)\n        public\n    {\n        if (poolIds.length != amounts.length) revert ArrayMismatch();\n        updateVotePeriod();\n\n        uint256 curPeriodId = getCurrentPeriodId();\n        VotePeriod memory currentPeriod = votePeriods[curPeriodId];\n        if (block.timestamp >= currentPeriod.end)\n            revert InvalidBlock(currentPeriod.end);\n\n        for (uint256 i = 0; i < poolIds.length; i++) {\n            PoolPeriodState storage poolState = _inheritExpiredPool(poolIds[i]);\n            _vote(poolIds[i], amounts[i], poolState, currentPeriod);\n        }\n\n        emit BatchVote(msg.sender, curPeriodId, poolIds, amounts);\n    }\n\n    function batchCancelVote(uint256[] memory poolIds, uint256[] memory amounts)\n        public\n    {\n        if (poolIds.length != amounts.length) revert ArrayMismatch();\n        updateVotePeriod();\n\n        uint256 curPeriodId = getCurrentPeriodId();\n\n        for (uint256 i = 0; i < poolIds.length; i++) {\n            PoolPeriodState storage poolState = _inheritExpiredPool(poolIds[i]);\n            _cancelVote(poolIds[i], curPeriodId, poolState, amounts[i]);\n        }\n\n        emit BatchCancelVote(msg.sender, curPeriodId, poolIds, amounts);\n    }\n\n    function migrateVote(\n        uint256[] memory fromPoolIds,\n        uint256[] memory fromAmounts,\n        uint256[] memory toPoolIds,\n        uint256[] memory toAmounts\n    ) external {\n        if (\n            fromPoolIds.length != fromAmounts.length ||\n            toPoolIds.length != toAmounts.length\n        ) revert ArrayMismatch();\n\n        uint256 fromTotalAmount;\n        uint256 toTotalAmount;\n\n        for (uint256 i = 0; i < fromPoolIds.length; i++) {\n            fromTotalAmount += fromAmounts[i];\n        }\n\n        for (uint256 i = 0; i < toPoolIds.length; i++) {\n            toTotalAmount += toAmounts[i];\n        }\n\n        if (fromTotalAmount != toTotalAmount)\n            revert AmountNotEqual(fromTotalAmount, toTotalAmount);\n\n        batchCancelVote(fromPoolIds, fromAmounts);\n        batchVote(toPoolIds, toAmounts);\n\n        emit MigrateVote(\n            msg.sender,\n            getCurrentPeriodId(),\n            fromPoolIds,\n            fromAmounts,\n            toPoolIds,\n            toAmounts\n        );\n    }\n\n    function _inheritExpiredPool(uint256 poolId)\n        internal\n        returns (PoolPeriodState storage curPoolState)\n    {\n        uint256 curPeriodId = getCurrentPeriodId();\n        curPoolState = allPoolState[curPeriodId][poolId];\n\n        if (curPeriodId == 0 || curPoolState.inherit) {\n            return curPoolState;\n        }\n\n        uint256 lastUpdatePeriod = poolLastUpdatePeriod[poolId];\n        PoolPeriodState memory lastPoolState = allPoolState[lastUpdatePeriod][poolId];\n\n        curPoolState.inherit = true;\n        curPoolState.score = lastPoolState.totalAmount;\n\n        // Reset votable by admin, can't inherit last pool votable.\n        if (!curPoolState.resetVotable) {\n            curPoolState.votable = lastPoolState.votable;\n        }\n        curPoolState.totalAmount = lastPoolState.totalAmount;\n\n        poolLastUpdatePeriod[poolId] = curPeriodId;\n\n        emit InheritPool(\n            poolId,\n            curPeriodId,\n            lastUpdatePeriod,\n            lastPoolState.totalAmount,\n            lastPoolState.votable\n        );\n    }\n\n    function updatePoolHistory(uint256 poolId, uint256 needUpdatePeriodId)\n        public\n    {\n        uint256 curPeriodId = getCurrentPeriodId();\n        if (needUpdatePeriodId == 0 || needUpdatePeriodId > curPeriodId)\n            revert NoNeedToUpdate(curPeriodId, needUpdatePeriodId);\n\n        uint256 findedPeriodId = needUpdatePeriodId - 1;\n        PoolPeriodState memory findedPeriodState;\n\n        for (; findedPeriodId >= 0; findedPeriodId--) {\n            findedPeriodState = allPoolState[findedPeriodId][poolId];\n            if (findedPeriodState.inherit || findedPeriodId == 0) {\n                break;\n            }\n        }\n\n        for (uint256 i = needUpdatePeriodId; i > findedPeriodId; i--) {\n            PoolPeriodState storage poolState = allPoolState[i][poolId];\n            if (poolState.inherit) {\n                continue;\n            }\n\n            poolState.inherit = true;\n            poolState.score = findedPeriodState.totalAmount;\n            poolState.totalAmount = findedPeriodState.totalAmount;\n            if (!poolState.resetVotable) {\n                poolState.votable = findedPeriodState.votable;\n            }\n        }\n\n        uint256 lastUpdatePeriodId = poolLastUpdatePeriod[poolId];\n        if (needUpdatePeriodId > lastUpdatePeriodId) {\n            poolLastUpdatePeriod[poolId] = needUpdatePeriodId;\n        }\n\n        emit UpdatePoolHistory(\n            poolId,\n            curPeriodId,\n            findedPeriodId,\n            needUpdatePeriodId,\n            findedPeriodState.totalAmount\n        );\n    }\n\n    function setStablePools(uint256[] memory poolIds) external {\n        for (uint256 i = 0; i < poolIds.length; i++) {\n            stablePools[poolIds[i]] = true;\n        }\n        emit UpdateStablePools(poolIds);\n    }\n\n    function setNonStablePools(uint256[] memory poolIds) external {\n        for (uint256 i = 0; i < poolIds.length; i++) {\n            stablePools[poolIds[i]] = false;\n        }\n        emit UpdateStablePools(poolIds);\n    }\n\n    function getPoolInfo(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 score,\n            bool stable,\n            address farmingToken,\n            uint256 amount,\n            address[] memory rewardTokens,\n            uint256[] memory rewardPerBlock,\n            uint256[] memory accRewardPerShare,\n            uint256 lastRewardBlock,\n            uint256 startBlock,\n            uint256 claimableInterval\n        )\n    {\n        (\n            farmingToken,\n            amount,\n            rewardTokens,\n            rewardPerBlock,\n            accRewardPerShare,\n            lastRewardBlock,\n            startBlock,\n            claimableInterval\n        ) = Farming(farming).getPoolInfo(poolId);\n\n        stable = stablePools[poolId];\n\n        uint256 lastUpdatePeriod = poolLastUpdatePeriod[poolId];\n        uint256 curPeriodId = getCurrentPeriodId();\n        if (lastUpdatePeriod == curPeriodId) {\n            score = allPoolState[curPeriodId][poolId].score;\n        } else {\n            score = allPoolState[lastUpdatePeriod][poolId].totalAmount;\n        }\n    }\n\n    function getCurrentPeriodId() public view returns (uint256) {\n        return nextVotePeriodID - 1;\n    }\n}\n"
    },
    "contracts/test/BasicToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// Example class - a mock class using delivering from ERC20\ncontract BasicToken is ERC20 {\n    uint8 private _decimals;\n\n    constructor(\n        string memory setName,\n        string memory setSymbol,\n        uint8 setDecimals,\n        uint256 initialBalance\n    ) ERC20(setName, setSymbol) {\n        _decimals = setDecimals;\n        _mint(msg.sender, initialBalance);\n    }\n\n    // sets the balance of the address\n    // this mints/burns the amount depending on the current balance\n    function setBalance(address to, uint256 amount) public {\n        uint256 old = balanceOf(to);\n        if (old < amount) {\n            _mint(to, amount - old);\n        } else if (old > amount) {\n            _burn(to, old - amount);\n        }\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/test/MockStableSwapBorrower.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IStableSwapCallee} from \"../stableswap/interfaces/IStableSwapCallee.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MockStableSwapBorrower {\n    using SafeERC20 for IERC20;\n\n    function zenlinkStableSwapCall(\n        address sender, \n        IERC20[] memory tokens,\n        uint256[] memory amounts, \n        uint256[] memory fees, \n        bytes calldata data\n    ) external {\n        require(data.length > 0);\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            if (amounts[i] > 0) {\n                tokens[i].safeTransferFrom(sender, address(this), fees[i]);\n                tokens[i].safeIncreaseAllowance(msg.sender, amounts[i] + fees[i]);\n            }\n        }\n    }\n}\n"
    },
    "contracts/stableswap/interfaces/IMetaSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IStableSwap} from \"./IStableSwap.sol\";\n\ninterface IMetaSwap {\n    /// EVENTS\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event FlashLoan(\n        address indexed caller,\n        address indexed receiver,\n        uint256[] amounts_out\n    );\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 soldId,\n        uint256 tokensSold,\n        uint256 boughtId,\n        uint256 tokensBought\n    );\n\n    event TokenSwapUnderlying(\n        address indexed buyer,\n        uint256 tokensSold,\n        uint256 tokensBought,\n        uint128 soldId,\n        uint128 boughtId\n    );\n\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\n\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\n\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\n\n    event StopRampA(uint256 A, uint256 timestamp);\n\n    event NewFee(uint256 fee, uint256 adminFee);\n\n    event CollectProtocolFee(address token, uint256 amount);\n\n    event FeeControllerChanged(address newController);\n\n    event FeeDistributorChanged(address newController);\n\n    // pool data view functions\n    function getLpToken() external view returns (IERC20 lpToken);\n\n    function getA() external view returns (uint256);\n\n    function getAPrecise() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokens() external view returns (IERC20[] memory);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getTokenBalances() external view returns (uint256[] memory);\n\n    function getNumberOfTokens() external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function metaSwapStorage()\n        external\n        view\n        returns (\n            address baseSwap,\n            uint256 baseVirtualPrice,\n            uint256 baseCacheLastUpdated\n        );\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateSwapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\n        external\n        view\n        returns (uint256 availableTokenAmount);\n\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\n\n    function getAdminBalance(uint8 index) external view returns (uint256);\n\n    function initialize(\n        IERC20[] memory _pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        address _feeDistributor\n    ) external;\n\n    function initializeMetaSwap(\n        IERC20[] memory _pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        address _feeDistributor,\n        IStableSwap baseSwap\n    ) external;\n\n    // state modifying functions\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function swapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function flashLoan(\n        uint256[] memory amountsOut,\n        address to,\n        bytes calldata data,\n        uint256 deadline\n    ) external;\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function withdrawAdminFee() external;\n}\n"
    },
    "contracts/periphery/StableSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"../stableswap/interfaces/IStableSwap.sol\";\nimport \"./interfaces/IStableSwapRouter.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract StableSwapRouter is IStableSwapRouter {\n    using SafeERC20 for IERC20;\n\n    function convert(\n        IStableSwap fromPool,\n        IStableSwap toPool,\n        uint256 amount,\n        uint256 minToMint,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256) {\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\n        uint256 toPoolLength = toPool.getNumberOfTokens();\n        require(address(fromPool) != address(toPool), \"fromPool = toPool\");\n        require(fromPoolLength == toPoolLength, \"poolTokensLengthMissmatch\");\n        IERC20 fromToken = fromPool.getLpToken();\n        IERC20 toToken = toPool.getLpToken();\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\n        // validate token\n        for (uint8 i = 0; i < fromPoolLength; i++) {\n            IERC20 coin = fromPool.getToken(i);\n            toPool.getTokenIndex(address(coin));\n        }\n        fromToken.safeTransferFrom(msg.sender, address(this), amount);\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\n\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\n\n        for (uint8 i = 0; i < toPoolLength; i++) {\n            IERC20 coin = toPool.getToken(i);\n            uint256 addBalance = coin.balanceOf(address(this));\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\n            meta_amounts[i] = addBalance;\n        }\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\n\n        uint256 lpAmount = toToken.balanceOf(address(this));\n        toToken.safeTransfer(to, lpAmount);\n        return lpAmount;\n    }\n\n    function addPoolLiquidity(\n        IStableSwap pool,\n        uint256[] memory amounts,\n        uint256 minMintAmount,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256) {\n        IERC20 token = IERC20(pool.getLpToken());\n        for (uint8 i = 0; i < amounts.length; i++) {\n            IERC20 coin = pool.getToken(i);\n            uint256 transferred;\n            if (amounts[i] > 0) {\n                transferred = transferIn(coin, msg.sender, amounts[i]);\n            }\n            amounts[i] = transferred;\n            if (transferred > 0) {\n                coin.safeIncreaseAllowance(address(pool), transferred);\n            }\n        }\n        pool.addLiquidity(amounts, minMintAmount, deadline);\n        uint256 lpAmount = token.balanceOf(address(this));\n        token.safeTransfer(to, lpAmount);\n        return lpAmount;\n    }\n\n    function addPoolAndBaseLiquidity(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256[] memory meta_amounts,\n        uint256[] memory base_amounts,\n        uint256 minToMint,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256) {\n        IERC20 token = IERC20(pool.getLpToken());\n        IERC20 base_lp = IERC20(basePool.getLpToken());\n        require(base_amounts.length == basePool.getNumberOfTokens(), \"invalidBaseAmountsLength\");\n        require(meta_amounts.length == pool.getNumberOfTokens(), \"invalidMetaAmountsLength\");\n        bool deposit_base = false;\n        for (uint8 i = 0; i < base_amounts.length; i++) {\n            uint256 amount = base_amounts[i];\n            if (amount > 0) {\n                deposit_base = true;\n                IERC20 coin = basePool.getToken(i);\n                uint256 transferred = transferIn(coin, msg.sender, amount);\n                coin.safeIncreaseAllowance(address(basePool), transferred);\n                base_amounts[i] = transferred;\n            }\n        }\n\n        uint256 base_lp_received;\n        if (deposit_base) {\n            base_lp_received = basePool.addLiquidity(base_amounts, 0, deadline);\n        }\n\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\n            IERC20 coin = pool.getToken(i);\n\n            uint256 transferred;\n            if (address(coin) == address(base_lp)) {\n                transferred = base_lp_received;\n            } else if (meta_amounts[i] > 0) {\n                transferred = transferIn(coin, msg.sender, meta_amounts[i]);\n            }\n\n            meta_amounts[i] = transferred;\n            if (transferred > 0) {\n                coin.safeIncreaseAllowance(address(pool), transferred);\n            }\n        }\n\n        uint256 base_lp_prior = base_lp.balanceOf(address(this));\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\n        if (deposit_base) {\n            require((base_lp.balanceOf(address(this)) + base_lp_received) == base_lp_prior, \"invalidBasePool\");\n        }\n\n        uint256 lpAmount = token.balanceOf(address(this));\n        token.safeTransfer(to, lpAmount);\n        return lpAmount;\n    }\n\n    function removePoolLiquidity(\n        IStableSwap pool,\n        uint256 lpAmount,\n        uint256[] memory minAmounts,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256[] memory amounts) {\n        IERC20 token = pool.getLpToken();\n        token.safeTransferFrom(msg.sender, address(this), lpAmount);\n        token.safeIncreaseAllowance(address(pool), lpAmount);\n        pool.removeLiquidity(lpAmount, minAmounts, deadline);\n        amounts = new uint256[](pool.getNumberOfTokens());\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\n            IERC20 coin = pool.getToken(i);\n            amounts[i] = coin.balanceOf(address(this));\n            if (amounts[i] > 0) {\n                coin.safeTransfer(to, amounts[i]);\n            }\n        }\n    }\n\n    function removePoolLiquidityOneToken(\n        IStableSwap pool,\n        uint256 lpAmount,\n        uint8 index,\n        uint256 minAmount,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256) {\n        IERC20 token = pool.getLpToken();\n        token.safeTransferFrom(msg.sender, address(this), lpAmount);\n        token.safeIncreaseAllowance(address(pool), lpAmount);\n        pool.removeLiquidityOneToken(lpAmount, index, minAmount, deadline);\n        IERC20 coin = pool.getToken(index);\n        uint256 coin_amount = coin.balanceOf(address(this));\n        coin.safeTransfer(to, coin_amount);\n        return coin_amount;\n    }\n\n    function removePoolAndBaseLiquidity(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256 _amount,\n        uint256[] calldata min_amounts_meta,\n        uint256[] calldata min_amounts_base,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256[] memory amounts, uint256[] memory base_amounts) {\n        IERC20 token = pool.getLpToken();\n        IERC20 baseToken = basePool.getLpToken();\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        token.safeIncreaseAllowance(address(pool), _amount);\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\n        uint256 _base_amount = baseToken.balanceOf(address(this));\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\n\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\n        // Transfer all coins out\n        amounts = new uint256[](pool.getNumberOfTokens());\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\n            IERC20 coin = pool.getToken(i);\n            amounts[i] = coin.balanceOf(address(this));\n            if (amounts[i] > 0) {\n                coin.safeTransfer(to, amounts[i]);\n            }\n        }\n\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\n            IERC20 coin = basePool.getToken(i);\n            base_amounts[i] = coin.balanceOf(address(this));\n            if (base_amounts[i] > 0) {\n                coin.safeTransfer(to, base_amounts[i]);\n            }\n        }\n    }\n\n    function removePoolAndBaseLiquidityOneToken(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256 _token_amount,\n        uint8 i,\n        uint256 _min_amount,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256) {\n        IERC20 token = pool.getLpToken();\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        token.safeTransferFrom(msg.sender, address(this), _token_amount);\n        token.safeIncreaseAllowance(address(pool), _token_amount);\n        pool.removeLiquidityOneToken(_token_amount, baseTokenIndex, 0, deadline);\n        uint256 _base_amount = baseToken.balanceOf(address(this));\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\n        basePool.removeLiquidityOneToken(_base_amount, i, _min_amount, deadline);\n        IERC20 coin = basePool.getToken(i);\n        uint256 coin_amount = coin.balanceOf(address(this));\n        coin.safeTransfer(to, coin_amount);\n        return coin_amount;\n    }\n\n    function swapPool(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount,\n        uint256 minOutAmount,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256) {\n        IERC20 coin = pool.getToken(fromIndex);\n        coin.safeTransferFrom(msg.sender, address(this), inAmount);\n        coin.safeIncreaseAllowance(address(pool), inAmount);\n        pool.swap(fromIndex, toIndex, inAmount, minOutAmount, deadline);\n        IERC20 coinTo = pool.getToken(toIndex);\n        uint256 amountOut = coinTo.balanceOf(address(this));\n        coinTo.safeTransfer(to, amountOut);\n        return amountOut;\n    }\n\n    function swapPoolFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\n        base_amounts[tokenIndexFrom] = dx;\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\n        coin.safeTransferFrom(msg.sender, address(this), dx);\n        coin.safeIncreaseAllowance(address(basePool), dx);\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\n        if (baseTokenIndex != tokenIndexTo) {\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, deadline);\n        }\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\n        uint256 amountOut = coinTo.balanceOf(address(this));\n        coinTo.safeTransfer(to, amountOut);\n        return amountOut;\n    }\n\n    function swapPoolToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        address to,\n        uint256 deadline\n    ) external override returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        IERC20 coin = pool.getToken(tokenIndexFrom);\n        coin.safeTransferFrom(msg.sender, address(this), dx);\n        uint256 tokenLPAmount = dx;\n        if (baseTokenIndex != tokenIndexFrom) {\n            coin.safeIncreaseAllowance(address(pool), dx);\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0, deadline);\n        }\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\n        uint256 amountOut = coinTo.balanceOf(address(this));\n        coinTo.safeTransfer(to, amountOut);\n        return amountOut;\n    }\n\n    // =========== VIEW ===========\n\n    function calculateConvert(\n        IStableSwap fromPool,\n        IStableSwap toPool,\n        uint256 amount\n    ) external override view returns (uint256) {\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(amount);\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\n        for (uint8 i = 0; i < fromPoolLength; i++) {\n            IERC20 fromCoin = fromPool.getToken(i);\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\n            meta_amounts[toCoinIndex] = amounts[i];\n        }\n        return toPool.calculateTokenAmount(meta_amounts, true);\n    }\n\n    function calculateTokenAmount(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256[] memory meta_amounts,\n        uint256[] memory base_amounts,\n        bool is_deposit\n    ) external override view returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\n    }\n\n    function calculateRemoveLiquidity(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256 amount\n    ) external override view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        meta_amounts = pool.calculateRemoveLiquidity(amount);\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\n        meta_amounts[baseTokenIndex] = 0;\n        base_amounts = basePool.calculateRemoveLiquidity(lpAmount);\n    }\n\n    function calculateRemoveBaseLiquidityOneToken(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256 _token_amount,\n        uint8 iBase\n    ) external override view returns (uint256 availableTokenAmount) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256 _base_tokens = pool.calculateRemoveLiquidityOneToken(_token_amount, baseTokenIndex);\n        availableTokenAmount = basePool.calculateRemoveLiquidityOneToken(_base_tokens, iBase);\n    }\n\n    function calculateSwap(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount\n    ) external override view returns (uint256) {\n        return pool.calculateSwap(fromIndex, toIndex, inAmount);\n    }\n\n    function calculateSwapFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external override view returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\n        base_amounts[tokenIndexFrom] = dx;\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\n        if (baseTokenIndex == tokenIndexTo) {\n            return baseLpAmount;\n        }\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\n    }\n\n    function calculateSwapToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external override view returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256 tokenLPAmount = dx;\n        if (baseTokenIndex != tokenIndexFrom) {\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\n        }\n        return basePool.calculateRemoveLiquidityOneToken(tokenLPAmount, tokenIndexTo);\n    }\n\n    function transferIn(\n        IERC20 token,\n        address from,\n        uint256 amount\n    ) internal returns (uint256 transferred) {\n        uint256 prior_balance = token.balanceOf(address(this));\n        token.safeTransferFrom(from, address(this), amount);\n        transferred = token.balanceOf(address(this)) - prior_balance;\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IStableSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../../stableswap/interfaces/IStableSwap.sol\";\n\ninterface IStableSwapRouter {\n    function convert(\n        IStableSwap fromPool,\n        IStableSwap toPool,\n        uint256 amount,\n        uint256 minToMint,\n        address to,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function addPoolLiquidity(\n        IStableSwap pool,\n        uint256[] memory amounts,\n        uint256 minMintAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function addPoolAndBaseLiquidity(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256[] memory meta_amounts,\n        uint256[] memory base_amounts,\n        uint256 minToMint,\n        address to,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removePoolLiquidity(\n        IStableSwap pool,\n        uint256 lpAmount,\n        uint256[] memory minAmounts,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function removePoolLiquidityOneToken(\n        IStableSwap pool,\n        uint256 lpAmount,\n        uint8 index,\n        uint256 minAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removePoolAndBaseLiquidity(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256 _amount,\n        uint256[] calldata min_amounts_meta,\n        uint256[] calldata min_amounts_base,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts);\n\n    function removePoolAndBaseLiquidityOneToken(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256 _token_amount,\n        uint8 i,\n        uint256 _min_amount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function swapPool(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount,\n        uint256 minOutAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function swapPoolFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        address to,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function swapPoolToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        address to,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function calculateConvert(\n        IStableSwap fromPool,\n        IStableSwap toPool,\n        uint256 amount\n    ) external view returns (uint256);\n\n    function calculateTokenAmount(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256[] memory meta_amounts,\n        uint256[] memory base_amounts,\n        bool is_deposit\n    ) external view returns (uint256);\n\n    function calculateRemoveLiquidity(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256 amount\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts);\n\n    function calculateRemoveBaseLiquidityOneToken(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint256 _token_amount,\n        uint8 iBase\n    ) external view returns (uint256 availableTokenAmount);\n\n    function calculateSwap(\n        IStableSwap pool,\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount\n    ) external view returns (uint256);\n\n    function calculateSwapFromBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateSwapToBase(\n        IStableSwap pool,\n        IStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}"
    },
    "contracts/tokens/vxZenlinkToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {ERC4626, IERC20Metadata, ERC20, Math} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport {AdminUpgradeable} from \"../libraries/AdminUpgradeable.sol\";\nimport {IZenlinkTokenLoyaltyCalculator} from \"../libraries/interfaces/IZenlinkTokenLoyaltyCalculator.sol\";\n\ncontract vxZenlinkToken is ERC4626, AdminUpgradeable {\n    address public loyaltyCalculator;\n\n    event WithdrawVXZLK(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 fee,\n        uint256 shares\n    );\n\n    constructor(\n        IERC20Metadata _zlk,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) ERC4626(_zlk) {\n        _initializeAdmin(msg.sender);\n    }\n\n    function updateLoyaltyCaculator(address calculator) external onlyAdmin {\n        loyaltyCalculator = calculator;\n    }\n\n    function getZenlinkTokenWithdrawFeeRatio() public view returns (uint256) {\n        return IZenlinkTokenLoyaltyCalculator(loyaltyCalculator).getZenlinkTokenWithdrawFeeRatio();\n    }\n\n    function getWithdrawResult(uint256 assets) \n        public \n        view \n        returns (uint256 zlkReceive, uint256 withdrawFeeAmount) \n    {\n        uint256 feeRatio = getZenlinkTokenWithdrawFeeRatio();\n        withdrawFeeAmount = Math.mulDiv(assets, feeRatio, 1e18);\n        zlkReceive = assets - withdrawFeeAmount;\n    }\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual override returns (uint256) {\n        require(assets <= maxWithdraw(owner), \"ERC4626: withdraw more than max\");\n\n        uint256 shares = previewWithdraw(assets);\n        (uint256 zlkReceive, uint256 withdrawFeeAmount) = getWithdrawResult(assets);\n        _withdraw(_msgSender(), receiver, owner, zlkReceive, shares);\n\n        emit WithdrawVXZLK(_msgSender(), receiver, owner, zlkReceive, withdrawFeeAmount, shares);\n        return shares;\n    }\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual override returns (uint256) {\n        require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n\n        uint256 assets = previewRedeem(shares);\n        (uint256 zlkReceive, uint256 withdrawFeeAmount) = getWithdrawResult(assets);\n        _withdraw(_msgSender(), receiver, owner, zlkReceive, shares);\n\n        emit WithdrawVXZLK(_msgSender(), receiver, owner, zlkReceive, withdrawFeeAmount, shares);\n        return assets;\n    }\n}\n"
    },
    "contracts/libraries/interfaces/IZenlinkTokenLoyaltyCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IZenlinkTokenLoyaltyCalculator {\n  function getCirculation() external view returns (uint256);\n\n  function getZenlinkTokenWithdrawFeeRatio() external view returns (uint256);\n}\n"
    },
    "contracts/test/vxZenlinkTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {vxZenlinkToken, IERC20Metadata} from \"../tokens/vxZenlinkToken.sol\";\n\n// mock class using ERC20\ncontract vxZenlinkTokenMock is vxZenlinkToken {\n    constructor(\n        IERC20Metadata asset,\n        string memory name,\n        string memory symbol\n    ) vxZenlinkToken(asset, name, symbol) {}\n\n    function mockMint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function mockBurn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/stableswap/MetaSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {StableSwap, StableSwapStorage, SafeERC20, IERC20, IStableSwap, LPToken} from \"./StableSwap.sol\";\nimport {MetaSwapStorage} from \"./MetaSwapStorage.sol\";\n\ncontract MetaSwap is StableSwap {\n    using MetaSwapStorage for StableSwapStorage.SwapStorage;\n    using SafeERC20 for IERC20;\n\n    MetaSwapStorage.MetaSwap public metaSwapStorage;\n\n    // events replicated from SwapStorage to make the ABI easier for dumb\n    // clients\n    event TokenSwapUnderlying(\n        address indexed buyer,\n        uint256 tokensSold,\n        uint256 tokensBought,\n        uint128 soldId,\n        uint128 boughtId\n    );\n\n    /**\n     * @notice Get the virtual price, to help calculate profit\n     * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS\n     */\n    function getVirtualPrice()\n        external\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return MetaSwapStorage.getVirtualPrice(swapStorage, metaSwapStorage);\n    }\n\n    /**\n     * @notice Calculate amount of tokens you receive on swap\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell. If the token charges\n     * a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) virtual external view override returns (uint256) {\n        return MetaSwapStorage.calculateSwap(\n            swapStorage,\n            metaSwapStorage,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx\n        );\n    }\n\n    /**\n     * @notice Calculate amount of tokens you receive on swap. For this function,\n     * the token indices are flattened out so that underlying tokens are represented.\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell. If the token charges\n     * a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view virtual returns (uint256) {\n        return MetaSwapStorage.calculateSwapUnderlying(\n            swapStorage,\n            metaSwapStorage,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx\n        );\n    }\n\n    /**\n     * @notice A simple method to calculate prices from deposits or\n     * withdrawals, excluding fees but including slippage. This is\n     * helpful as an input into the various \"min\" parameters on calls\n     * to fight front-running\n     *\n     * @dev This shouldn't be used outside frontends for user estimates.\n     *\n     * @param amounts an array of token amounts to deposit or withdrawal,\n     * corresponding to pooledTokens. The amount should be in each\n     * pooled token's native precision. If a token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @param deposit whether this is a deposit or a withdrawal\n     * @return token amount the user will receive\n     */\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\n        virtual\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return MetaSwapStorage.calculateTokenAmount(\n            swapStorage,\n            metaSwapStorage,\n            amounts,\n            deposit\n        );\n    }\n\n    function calculateRemoveLiquidity(uint256 amount) virtual external view override returns (uint256[] memory) {\n        return MetaSwapStorage.calculateRemoveLiquidity(swapStorage, amount);\n    }\n\n    /**\n     * @notice Calculate the amount of underlying token available to withdraw\n     * when withdrawing via only single token\n     * @param tokenAmount the amount of LP token to burn\n     * @param tokenIndex index of which token will be withdrawn\n     * @return availableTokenAmount calculated amount of underlying token\n     * available to withdraw\n     */\n    function calculateRemoveLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) virtual external view override returns (uint256) {\n        return MetaSwapStorage.calculateRemoveLiquidityOneToken(\n            swapStorage,\n            metaSwapStorage,\n            tokenAmount,\n            tokenIndex\n        );\n    }\n\n    function initialize(\n        address[] memory,\n        uint8[] memory,\n        string memory,\n        string memory,\n        uint256,\n        uint256,\n        uint256,\n        address\n    ) public virtual override onlyAdmin {\n        revert(\"use initializeMetaSwap() instead\");\n    }\n\n    /**\n     * @notice Initializes this MetaSwap contract with the given parameters.\n     * MetaSwap uses an existing Swap pool to expand the available liquidity.\n     * _pooledTokens array should contain the base Swap pool's LP token as\n     * the last element. For example, if there is a Swap pool consisting of\n     * [DAI, USDC, USDT]. Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken]\n     * as _pooledTokens.\n     *\n     * This will also deploy the LPToken that represents users'\n     * LP position. The owner of LPToken will be this contract - which means\n     * only this contract is allowed to mint new tokens.\n     *\n     * @param _pooledTokens an array of ERC20s this pool will accept. The last\n     * element must be an existing Swap pool's LP token's address.\n     * @param decimals the decimals to use for each pooled token,\n     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS\n     * @param lpTokenName the long-form name of the token to be deployed\n     * @param lpTokenSymbol the short symbol for the token to be deployed\n     * @param _a the amplification coefficient * n * (n - 1). See the\n     * StableSwap paper for details\n     * @param _fee default swap fee to be initialized with\n     * @param _adminFee default adminFee to be initialized with\n     */\n    function initializeMetaSwap(\n        address[] memory _pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        address _feeDistributor,\n        IStableSwap baseSwap\n    ) public virtual onlyAdmin {\n        StableSwap.initialize(\n            _pooledTokens, \n            decimals, \n            lpTokenName, \n            lpTokenSymbol, \n            _a, \n            _fee, \n            _adminFee, \n            _feeDistributor\n        );\n\n        metaSwapStorage.baseSwap = baseSwap;\n        metaSwapStorage.baseVirtualPrice = baseSwap.getVirtualPrice();\n        metaSwapStorage.baseCacheLastUpdated = block.timestamp;\n\n        // Read all tokens that belong to baseSwap\n        {\n            uint8 i;\n            for (; i < 32; i++) {\n                try baseSwap.getToken(i) returns (IERC20 token) {\n                    metaSwapStorage.baseTokens.push(token);\n                    token.safeApprove(address(baseSwap), type(uint256).max);\n                } catch {\n                    break;\n                }\n            }\n            require(i > 1, \"baseSwap must pool at least 2 tokens\");\n        }\n\n        // Check the last element of _pooledTokens is owned by baseSwap\n        IERC20 baseLPToken = IERC20(_pooledTokens[_pooledTokens.length - 1]);\n        require(\n            LPToken(address(baseLPToken)).owner() == address(baseSwap),\n            \"baseLPToken is not owned by baseSwap\"\n        );\n\n        // Pre-approve the baseLPToken to be used by baseSwap\n        baseLPToken.safeApprove(address(baseSwap), type(uint256).max);\n    }\n\n    /**\n     * @notice Swap two tokens using this pool\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param dx the amount of tokens the user wants to swap from\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @param deadline latest timestamp to accept this transaction\n     */\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\n        return MetaSwapStorage.swap(\n            swapStorage,\n            metaSwapStorage,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            minDy\n        );\n    }\n\n    /**\n     * @notice Swap two tokens using this pool and the base pool.\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param dx the amount of tokens the user wants to swap from\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @param deadline latest timestamp to accept this transaction\n     */\n    function swapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external virtual nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\n        return MetaSwapStorage.swapUnderlying(\n            swapStorage,\n            metaSwapStorage,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            minDy\n        );\n    }\n\n    function flashLoan(\n        uint256[] memory amountsOut,\n        address to,\n        bytes calldata data,\n        uint256 deadline\n    ) external virtual override whenNotPaused nonReentrant deadlineCheck(deadline) {\n        MetaSwapStorage.flashLoan(swapStorage, amountsOut, to, data);\n    }\n\n    function addLiquidity(\n        uint256[] memory amounts,\n        uint256 minMintAmount,\n        uint256 deadline\n    ) external virtual override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\n        return MetaSwapStorage.addLiquidity(\n            swapStorage,\n            metaSwapStorage,\n            amounts, \n            minMintAmount\n        );\n    }\n\n    function removeLiquidity(\n        uint256 lpAmount,\n        uint256[] memory minAmounts,\n        uint256 deadline\n    ) external  virtual override nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\n        return MetaSwapStorage.removeLiquidity(swapStorage, lpAmount, minAmounts);\n    }\n\n    function removeLiquidityOneToken(\n        uint256 lpAmount,\n        uint8 index,\n        uint256 minAmount,\n        uint256 deadline\n    ) external virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\n        return MetaSwapStorage.removeLiquidityOneToken(\n            swapStorage, \n            metaSwapStorage, \n            lpAmount, \n            index, \n            minAmount\n        );\n    }\n\n    function removeLiquidityImbalance(\n        uint256[] memory amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\n        return MetaSwapStorage.removeLiquidityImbalance(\n            swapStorage, \n            metaSwapStorage, \n            amounts, \n            maxBurnAmount\n        );\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}