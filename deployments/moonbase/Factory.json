{
  "address": "0x6ED3E6551Bb396091C15a9621aACa6DdB1C01992",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bootstrap",
          "type": "address"
        }
      ],
      "name": "BootstrapSetted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "Candidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "basePoint",
          "type": "uint8"
        }
      ],
      "name": "FeeBasePointUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeto",
          "type": "address"
        }
      ],
      "name": "FeetoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "PairCreateLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "PairCreateUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminCandidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidateConfirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBasePoint",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeto",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getBootstrap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockForPairCreate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPairCreate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "setAdminCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bootstrap",
          "type": "address"
        }
      ],
      "name": "setBootstrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_basePoint",
          "type": "uint8"
        }
      ],
      "name": "setFeeBasePoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeto",
          "type": "address"
        }
      ],
      "name": "setFeeto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockPairCreate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbee4183303fe6de7a62ec41b02f0fda0320685306b0017ac7fa638fb0d477147",
  "receipt": {
    "to": null,
    "from": "0x0597EB296eFbb84CA64C843a7F80d7F8Bff7d17d",
    "contractAddress": "0x6ED3E6551Bb396091C15a9621aACa6DdB1C01992",
    "transactionIndex": 2,
    "gasUsed": "3241676",
    "logsBloom": "0x
    "blockHash": "0x68823dccbfd6e7eb072d1b33c32aa33c7d8066e34cf1be3480b0a9e71b7baec3",
    "transactionHash": "0xbee4183303fe6de7a62ec41b02f0fda0320685306b0017ac7fa638fb0d477147",
    "logs": [],
    "blockNumber": 2782045,
    "cumulativeGasUsed": "3485628",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0597EB296eFbb84CA64C843a7F80d7F8Bff7d17d"
  ],
  "numDeployments": 1,
  "solcInputHash": "007aa94c81b3bc67ae48537a63ee475f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bootstrap\",\"type\":\"address\"}],\"name\":\"BootstrapSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"Candidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"basePoint\",\"type\":\"uint8\"}],\"name\":\"FeeBasePointUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeto\",\"type\":\"address\"}],\"name\":\"FeetoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PairCreateLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PairCreateUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBasePoint\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getBootstrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockForPairCreate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPairCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setAdminCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bootstrap\",\"type\":\"address\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_basePoint\",\"type\":\"uint8\"}],\"name\":\"setFeeBasePoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeto\",\"type\":\"address\"}],\"name\":\"setFeeto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockPairCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Factory.sol\":\"Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./Pair.sol\\\";\\nimport \\\"../libraries/AdminUpgradeable.sol\\\";\\n\\ncontract Factory is AdminUpgradeable, IFactory {\\n    address public override feeto;\\n    uint8 public override feeBasePoint;\\n    bool public override lockForPairCreate;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    mapping(address => mapping(address => address)) public override getBootstrap;\\n    address[] public override allPairs;\\n\\n    constructor(address _admin) {\\n        _initializeAdmin(_admin);\\n        feeto = _admin;\\n    }\\n\\n    function allPairsLength() external view override returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function pairCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(Pair).creationCode);\\n    }\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        override\\n        returns (address pair)\\n    {\\n        require(\\n            !lockForPairCreate || (lockForPairCreate && msg.sender == admin), \\n            \\\"CREATE_PAIR_LOCKED\\\"\\n        );\\n        require(tokenA != tokenB, \\\"IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"Factory: PAIR_EXISTS\\\");\\n        if (getBootstrap[token0][token1] != address(0)) {\\n            require(getBootstrap[token0][token1] == msg.sender, 'NOT_BOOTSTRAP_OWNER');\\n        }\\n        bytes memory bytecode = type(Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair;\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setBootstrap(address tokenA, address tokenB, address bootstrap) external onlyAdmin {\\n        require(getPair[tokenA][tokenB] == address(0), \\\"Factory: PAIR_EXISTS\\\");\\n        getBootstrap[tokenA][tokenB] = bootstrap;\\n        getBootstrap[tokenB][tokenA] = bootstrap;\\n        emit BootstrapSetted(tokenA, tokenB, bootstrap);\\n    }\\n\\n    function lockPairCreate() external onlyAdmin {\\n        lockForPairCreate = true;\\n        emit PairCreateLocked(msg.sender);\\n    }\\n\\n    function unlockPairCreate() external onlyAdmin {\\n        lockForPairCreate = false;\\n        emit PairCreateUnlocked(msg.sender);\\n    }\\n\\n    function setFeeto(address _feeto) external onlyAdmin {\\n        feeto = _feeto;\\n        emit FeetoUpdated(_feeto);\\n    }\\n\\n    function setFeeBasePoint(uint8 _basePoint) external onlyAdmin {\\n        require(_basePoint <= 30, \\\"FORBIDDEN\\\");\\n        feeBasePoint = _basePoint;\\n        emit FeeBasePointUpdated(_basePoint);\\n    }\\n}\\n\",\"keccak256\":\"0xfdb8b180fea9994dc5d0fd9be050686aa3fc2fb00beb571714b46cab7c1a4681\",\"license\":\"MIT\"},\"contracts/core/Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ZenlinkERC20.sol\\\";\\nimport \\\"./interfaces/IPair.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport './interfaces/IZenlinkCallee.sol';\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"../libraries/UQ112x112.sol\\\";\\n\\ncontract Pair is IPair, ZenlinkERC20 {\\n    using Math for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant override MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public override factory;\\n    address public override token0;\\n    address public override token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public override price0CumulativeLast;\\n    uint256 public override price1CumulativeLast;\\n    uint256 public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint8 private unlocked = 1;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(SELECTOR, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        override\\n        returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast)\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    function initialize(address _token0, address _token1) external override {\\n        require(msg.sender == factory, \\\"Only called by factory\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\\n        private\\n        returns (uint8 feeBasePoint)\\n    {\\n        address feeTo = IFactory(factory).feeto();\\n        feeBasePoint = IFactory(factory).feeBasePoint();\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeBasePoint > 0) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(\\n                    uint256(_reserve0).mul(uint256(_reserve1))\\n                );\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply().mul(rootK.sub(rootKLast));\\n                    uint256 denominator = (rootK.mul(30 - feeBasePoint) /\\n                        feeBasePoint).add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    function mint(address to)\\n        external\\n        override\\n        lock\\n        returns (uint256 liquidity)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        uint8 feeBasePoint = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            address feeTo = IFactory(factory).feeto();\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(feeTo, MINIMUM_LIQUIDITY);\\n        } else {\\n            liquidity = Math.min(\\n                amount0.mul(_totalSupply) / _reserve0,\\n                amount1.mul(_totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeBasePoint > 0) kLast = uint256(reserve0).mul(reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    function burn(address to)\\n        external\\n        override\\n        lock\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf(address(this));\\n\\n        uint8 feeBasePoint = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply();\\n        amount0 = liquidity.mul(balance0) / _totalSupply;\\n        amount1 = liquidity.mul(balance1) / _totalSupply;\\n        require(amount0 > 0 && amount1 > 0, \\\"INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeBasePoint > 0) kLast = uint256(reserve0).mul(reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external override lock {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\n            if (data.length > 0) IZenlinkCallee(to).zenlinkCall(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\\n            ? balance0 - (_reserve0 - amount0Out)\\n            : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\\n            ? balance1 - (_reserve1 - amount1Out)\\n            : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\" INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(\\n                balance0Adjusted.mul(balance1Adjusted) >=\\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\\n                \\\"Pair: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    function _update(uint256 balance0, uint256 balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(\\n            balance0 <= type(uint112).max && balance1 <= type(uint112).max,\\n            \\\"OVERFLOW\\\"\\n        );\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external override lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external override lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0x5c98653b627339a6110766b3a3fe5d35c6b33060472c62e228e067788b5bf876\",\"license\":\"MIT\"},\"contracts/core/ZenlinkERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IZenlinkERC20.sol\\\";\\n\\ncontract ZenlinkERC20 is IZenlinkERC20, ERC20 {\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public override nonces;\\n\\n    constructor() ERC20('Zenlink LP Token', 'ZLK-LP') {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name())),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(deadline >= block.timestamp, 'EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xe54fa3d0b694bfe613c9397808f01522662c779758012319e4e73036d3b38b99\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n    event PairCreateLocked(\\n        address indexed caller\\n    );\\n    event PairCreateUnlocked(\\n        address indexed caller\\n    );\\n    event BootstrapSetted(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address indexed bootstrap\\n    );\\n    event FeetoUpdated(\\n        address indexed feeto\\n    );\\n    event FeeBasePointUpdated(\\n        uint8 basePoint\\n    );\\n\\n    function feeto() external view returns (address);\\n\\n    function feeBasePoint() external view returns (uint8);\\n\\n    function lockForPairCreate() external view returns (bool);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n    \\n    function getBootstrap(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address bootstrap);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0x211140634ad85da83e50e8623d7fd7aeff89fb1fd472e2a8bec7927c416b3bf9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPair {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x384acf5ee76958b02b75d074934d79e0e6d0b5fcdb8a5f63752996cb4de7bffa\",\"license\":\"MIT\"},\"contracts/core/interfaces/IZenlinkCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IZenlinkCallee {\\n    function zenlinkCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xf4d5fc0637d94abc5bb5d82b6d2bb7df63c4369f98cf0b8049d14307403a9587\",\"license\":\"MIT\"},\"contracts/core/interfaces/IZenlinkERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZenlinkERC20 is IERC20 {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xbb063ea67d939dd31dab9c3fe2b0d3fcaceac3d98f4f3e5a1aa8fa1ade862a91\",\"license\":\"MIT\"},\"contracts/libraries/AdminUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract AdminUpgradeable {\\n    address public admin;\\n    address public adminCandidate;\\n\\n    function _initializeAdmin(address _admin) internal {\\n        require(admin == address(0), \\\"admin already set\\\");\\n\\n        admin = _admin;\\n    }\\n\\n    function candidateConfirm() external {\\n        require(msg.sender == adminCandidate, \\\"not Candidate\\\");\\n        emit AdminChanged(admin, adminCandidate);\\n\\n        admin = adminCandidate;\\n        adminCandidate = address(0);\\n    }\\n\\n    function setAdminCandidate(address _candidate) external onlyAdmin {\\n        adminCandidate = _candidate;\\n        emit Candidate(_candidate);\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    event Candidate(address indexed newAdmin);\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n}\",\"keccak256\":\"0x1f6a33fd54009078e00c3b586e2b9bb359ff99d9c5cb87e3e32ec109480f99ae\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdaf217d097cd3962ad38fdeaab113dc3dddf1f65bc45ecf3a5b0a0487c0a2092\",\"license\":\"MIT\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xb46a04961267d6b7f14b543e98632879ba52db038e611cc4ab471cd6c7d6d6ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516139e23803806139e283398101604081905261002f916100d0565b6100388161005d565b600280546001600160a01b0319166001600160a01b0392909216919091179055610100565b6000546001600160a01b0316156100ae5760405162461bcd60e51b815260206004820152601160248201527018591b5a5b88185b1c9958591e481cd95d607a1b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156100e257600080fd5b81516001600160a01b03811681146100f957600080fd5b9392505050565b6138d38061010f6000396000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c8063574f2ba311620000af578063ae3f1f2c116200007a578063ae3f1f2c1462000281578063c9c653961462000295578063e316227414620002ac578063e6a4390514620002c3578063f851a44014620002fa57600080fd5b8063574f2ba31462000243578063798ad169146200025657806396de7aa014620002605780639aab9248146200027757600080fd5b806325095b1811620000fc57806325095b1814620001b15780633accfa6c14620001e85780633f02323014620001fc578063405d31e014620002065780634812d2cf146200022c57600080fd5b80630406bd3f14620001325780631e3dd18b146200013e5780631ef414f7146200017257806324f0b189146200019a575b600080fd5b6200013c6200030e565b005b620001556200014f36600462000ca4565b6200037e565b6040516001600160a01b0390911681526020015b60405180910390f35b6002546200018790600160a01b900460ff1681565b60405160ff909116815260200162000169565b6200013c620001ab36600462000cbe565b620003a9565b62000155620001c236600462000c22565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b60015462000155906001600160a01b031681565b6200013c6200046c565b6002546200021b90600160a81b900460ff1681565b604051901515815260200162000169565b6200013c6200023d36600462000c5a565b6200051c565b6005545b60405190815260200162000169565b6200013c6200063c565b6200013c6200027136600462000bfd565b620006a9565b6200024762000720565b60025462000155906001600160a01b031681565b62000155620002a636600462000c22565b62000754565b6200013c620002bd36600462000bfd565b62000b5b565b62000155620002d436600462000c22565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b60005462000155906001600160a01b031681565b6000546001600160a01b03163314620003445760405162461bcd60e51b81526004016200033b9062000ce3565b60405180910390fd5b6002805460ff60a81b1916905560405133907fac45e0df4d004774ac0f710c9a0c240c354961a2f45e65cdd916c3974168c66090600090a2565b600581815481106200038f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314620003d65760405162461bcd60e51b81526004016200033b9062000ce3565b601e8160ff161115620004185760405162461bcd60e51b81526020600482015260096024820152682327a92124a22222a760b91b60448201526064016200033b565b6002805460ff60a01b1916600160a01b60ff8416908102919091179091556040519081527fcea85db5939aa6fa66ddd5c784e7284a46f4fba4e44f1e3d690f32d9acec167d9060200160405180910390a150565b6001546001600160a01b03163314620004b85760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b60448201526064016200033b565b600154600080546040516001600160a01b0393841693909116917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b03163314620005495760405162461bcd60e51b81526004016200033b9062000ce3565b6001600160a01b03838116600090815260036020908152604080832086851684529091529020541615620005b75760405162461bcd60e51b8152602060048201526014602482015273466163746f72793a20504149525f45584953545360601b60448201526064016200033b565b6001600160a01b03808416600081815260046020818152604080842088871680865290835281852080549789166001600160a01b03199889168117909155938352818520868652909252808420805490961683179095559351909392917f8fbdc74091620b8104c8c6e08d389b29cefbb460df289e035349571f5a18781491a4505050565b6000546001600160a01b03163314620006695760405162461bcd60e51b81526004016200033b9062000ce3565b6002805460ff60a81b1916600160a81b17905560405133907fc1524b448adbef1e113beb21fe1c291939668b9561ac836d3555e8c95963d4b090600090a2565b6000546001600160a01b03163314620006d65760405162461bcd60e51b81526004016200033b9062000ce3565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b600060405180602001620007349062000bd2565b6020820181038252601f19601f8201166040525080519060200120905090565b600254600090600160a81b900460ff161580620007905750600254600160a81b900460ff1680156200079057506000546001600160a01b031633145b620007d35760405162461bcd60e51b815260206004820152601260248201527110d49150551157d410525497d313d0d2d15160721b60448201526064016200033b565b816001600160a01b0316836001600160a01b031614156200082d5760405162461bcd60e51b81526020600482015260136024820152724944454e544943414c5f41444452455353455360681b60448201526064016200033b565b600080836001600160a01b0316856001600160a01b0316106200085257838562000855565b84845b90925090506001600160a01b038216620008a15760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064016200033b565b6001600160a01b038281166000908152600360209081526040808320858516845290915290205416156200090f5760405162461bcd60e51b8152602060048201526014602482015273466163746f72793a20504149525f45584953545360601b60448201526064016200033b565b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615620009ab576001600160a01b0382811660009081526004602090815260408083208585168452909152902054163314620009ab5760405162461bcd60e51b81526020600482015260136024820152722727aa2fa127a7aa29aa2920a82fa7aba722a960691b60448201526064016200033b565b600060405180602001620009bf9062000bd2565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b15801562000a7257600080fd5b505af115801562000a87573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db09095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6000546001600160a01b0316331462000b885760405162461bcd60e51b81526004016200033b9062000ce3565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f4d7837711202d0d7574a0e818fc3ab5ad3bcb1bf388b35ce649fefcb1f46a47c90600090a250565b612b978062000d0783390190565b80356001600160a01b038116811462000bf857600080fd5b919050565b60006020828403121562000c1057600080fd5b62000c1b8262000be0565b9392505050565b6000806040838503121562000c3657600080fd5b62000c418362000be0565b915062000c516020840162000be0565b90509250929050565b60008060006060848603121562000c7057600080fd5b62000c7b8462000be0565b925062000c8b6020850162000be0565b915062000c9b6040850162000be0565b90509250925092565b60006020828403121562000cb757600080fd5b5035919050565b60006020828403121562000cd157600080fd5b813560ff8116811462000c1b57600080fd5b6020808252600990820152683737ba1030b236b4b760b91b60408201526060019056fe6080604052600e805460ff191660011790553480156200001e57600080fd5b50604080518082018252601081526f2d32b73634b735902628102a37b5b2b760811b60208083019182528351808501909452600684526505a4c4b2d4c560d41b9084015281519192916200007591600391620001ee565b5080516200008b906004906020840190620001ee565b504691507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9050620000bc62000154565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c00160408051601f19818403018152919052805160209091012060055550600780546001600160a01b03191633179055620002d1565b606060038054620001659062000294565b80601f0160208091040260200160405190810160405280929190818152602001828054620001939062000294565b8015620001e45780601f10620001b857610100808354040283529160200191620001e4565b820191906000526020600020905b815481529060010190602001808311620001c657829003601f168201915b5050505050905090565b828054620001fc9062000294565b90600052602060002090601f0160209004810192826200022057600085556200026b565b82601f106200023b57805160ff19168380011785556200026b565b828001600101855582156200026b579182015b828111156200026b5782518255916020019190600101906200024e565b50620002799291506200027d565b5090565b5b808211156200027957600081556001016200027e565b600181811c90821680620002a957607f821691505b60208210811415620002cb57634e487b7160e01b600052602260045260246000fd5b50919050565b6128b680620002e16000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636a62784211610104578063a9059cbb116100a2578063d21220a711610071578063d21220a71461040f578063d505accf14610422578063dd62ed3e14610435578063fff6cae91461044857600080fd5b8063a9059cbb146103cd578063ba9a7a56146103e0578063bc25cf77146103e9578063c45a0155146103fc57600080fd5b80637ecebe00116100de5780637ecebe001461036a57806389afcb441461038a57806395d89b41146103b2578063a457c2d7146103ba57600080fd5b80636a6278421461032557806370a08231146103385780637464fc3d1461036157600080fd5b806330adf81f11610171578063395093511161014b57806339509351146102ed578063485cc955146103005780635909c0d5146103135780635a3d54931461031c57600080fd5b806330adf81f146102ae578063313ce567146102d55780633644e515146102e457600080fd5b8063095ea7b3116101ad578063095ea7b31461023b5780630dfe16811461025e57806318160ddd1461028957806323b872dd1461029b57600080fd5b8063022c0d9f146101d457806306fdde03146101e95780630902f1ac14610207575b600080fd5b6101e76101e2366004612530565b610450565b005b6101f1610949565b6040516101fe919061264b565b60405180910390f35b61020f6109db565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101fe565b61024e6102493660046124c9565b610a05565b60405190151581526020016101fe565b600854610271906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b6002545b6040519081526020016101fe565b61024e6102a9366004612417565b610a1f565b61028d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b604051601281526020016101fe565b61028d60055481565b61024e6102fb3660046124c9565b610a43565b6101e761030e3660046123de565b610a65565b61028d600b5481565b61028d600c5481565b61028d6103333660046123a4565b610ae6565b61028d6103463660046123a4565b6001600160a01b031660009081526020819052604090205490565b61028d600d5481565b61028d6103783660046123a4565b60066020526000908152604090205481565b61039d6103983660046123a4565b610e54565b604080519283526020830191909152016101fe565b6101f1611204565b61024e6103c83660046124c9565b611213565b61024e6103db3660046124c9565b61128e565b61028d6103e881565b6101e76103f73660046123a4565b61129c565b600754610271906001600160a01b031681565b600954610271906001600160a01b031681565b6101e7610430366004612458565b6113cf565b61028d6104433660046123de565b6115cc565b6101e76115f7565b600e5460ff1660011461047e5760405162461bcd60e51b81526004016104759061267e565b60405180910390fd5b600e805460ff19169055841515806104965750600084115b6104e25760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606401610475565b6000806104ed6109db565b5091509150816001600160701b0316871080156105125750806001600160701b031686105b6105575760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b6044820152606401610475565b60085460095460009182916001600160a01b039182169190811690891682148015906105955750806001600160a01b0316896001600160a01b031614155b6105ce5760405162461bcd60e51b815260206004820152600a602482015269494e56414c49445f544f60b01b6044820152606401610475565b8a156105df576105df828a8d611749565b89156105f0576105f0818a8c611749565b861561065d57604051630c919dcf60e41b81526001600160a01b038a169063c919dcf09061062a9033908f908f908e908e906004016125ff565b600060405180830381600087803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561069c57600080fd5b505afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190612517565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a082319060240160206040518083038186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074e9190612517565b92505050600089856001600160701b0316610769919061273e565b8311610776576000610793565b6107898a6001600160701b03871661273e565b610793908461273e565b905060006107aa8a6001600160701b03871661273e565b83116107b75760006107d4565b6107ca8a6001600160701b03871661273e565b6107d4908461273e565b905060008211806107e55750600081115b6108315760405162461bcd60e51b815260206004820152601a60248201527f20494e53554646494349454e545f494e5055545f414d4f554e540000000000006044820152606401610475565b6000610853610841846003611886565b61084d876103e8611886565b906118ed565b90506000610865610841846003611886565b905061088a620f42406108846001600160701b038b8116908b16611886565b90611886565b6108948383611886565b10156108cc5760405162461bcd60e51b8152602060048201526007602482015266506169723a204b60c81b6044820152606401610475565b50506108da84848888611943565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a35050600e805460ff19166001179055505050505050505050565b606060038054610958906127c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610984906127c9565b80156109d15780601f106109a6576101008083540402835291602001916109d1565b820191906000526020600020905b8154815290600101906020018083116109b457829003601f168201915b5050505050905090565b600a546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600033610a13818585611b24565b60019150505b92915050565b600033610a2d858285611c49565b610a38858585611cc3565b506001949350505050565b600033610a13818585610a5683836115cc565b610a60919061269e565b611b24565b6007546001600160a01b03163314610ab85760405162461bcd60e51b81526020600482015260166024820152754f6e6c792063616c6c656420627920666163746f727960501b6044820152606401610475565b600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055565b600e5460009060ff16600114610b0e5760405162461bcd60e51b81526004016104759061267e565b600e805460ff19169055600080610b236109db565b506008546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610b7057600080fd5b505afa158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba89190612517565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bf157600080fd5b505afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190612517565b90506000610c40836001600160701b0387166118ed565b90506000610c57836001600160701b0387166118ed565b90506000610c658787611e91565b90506000610c7260025490565b905080610d245760075460408051632b8fc7cb60e21b815290516000926001600160a01b03169163ae3f1f2c916004808301926020929190829003018186803b158015610cbe57600080fd5b505afa158015610cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf691906123c1565b9050610d106103e861084d610d0b8888611886565b612074565b9950610d1e816103e86120e4565b50610d6b565b610d686001600160701b038916610d3b8684611886565b610d4591906126dc565b6001600160701b038916610d598685611886565b610d6391906126dc565b6121c3565b98505b60008911610dbb5760405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606401610475565b610dc58a8a6120e4565b610dd186868a8a611943565b60ff821615610dfe57600a54610dfa906001600160701b0380821691600160701b900416611886565b600d555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a25050600e805460ff1916600117905550949695505050505050565b600e54600090819060ff16600114610e7e5760405162461bcd60e51b81526004016104759061267e565b600e805460ff19169055600080610e936109db565b506008546009546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a082319060240160206040518083038186803b158015610ee857600080fd5b505afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f209190612517565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b158015610f6557600080fd5b505afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d9190612517565b30600090815260208190526040812054919250610fba8888611e91565b90506000610fc760025490565b905080610fd48487611886565b610fde91906126dc565b9a5080610feb8486611886565b610ff591906126dc565b995060008b118015611007575060008a115b6110535760405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4255524e45440000006044820152606401610475565b61105d30846121db565b611068878d8d611749565b611073868d8c611749565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a082319060240160206040518083038186803b1580156110b257600080fd5b505afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190612517565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a082319060240160206040518083038186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190612517565b935061117285858b8b611943565b60ff82161561119f57600a5461119b906001600160701b0380821691600160701b900416611886565b600d555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050600e805460ff191660011790555096989597509495505050505050565b606060048054610958906127c9565b6000338161122182866115cc565b9050838110156112815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610475565b610a388286868403611b24565b600033610a13818585611cc3565b600e5460ff166001146112c15760405162461bcd60e51b81526004016104759061267e565b600e805460ff19169055600854600954600a546040516370a0823160e01b81523060048201526001600160a01b039384169390921691611370918491869161136b916001600160701b039091169084906370a08231906024015b60206040518083038186803b15801561133357600080fd5b505afa158015611347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190612517565b611749565b600a546040516370a0823160e01b81523060048201526113bd918391869161136b91600160701b9091046001600160701b0316906001600160a01b038516906370a082319060240161131b565b5050600e805460ff1916600117905550565b428410156114095760405162461bcd60e51b81526020600482015260076024820152661156141254915160ca1b6044820152606401610475565b6005546001600160a01b038816600090815260066020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761145c836127fe565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016114d592919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611540573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906115765750886001600160a01b0316816001600160a01b0316145b6115b65760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b6044820152606401610475565b6115c1898989611b24565b505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600e5460ff1660011461161c5760405162461bcd60e51b81526004016104759061267e565b600e805460ff191690556008546040516370a0823160e01b815230600482015261173a916001600160a01b0316906370a082319060240160206040518083038186803b15801561166b57600080fd5b505afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a39190612517565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156116e657600080fd5b505afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e9190612517565b600a546001600160701b0380821691600160701b900416611943565b600e805460ff19166001179055565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916117d591906125e3565b6000604051808303816000865af19150503d8060008114611812576040519150601f19603f3d011682016040523d82523d6000602084013e611817565b606091505b509150915081801561184157508051158061184157508080602001905181019061184191906124f5565b61187f5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610475565b5050505050565b60008115806118aa5750828261189c818361271f565b92506118a890836126dc565b145b610a195760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610475565b6000826118fa838261273e565b9150811115610a195760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610475565b6001600160701b03841180159061196157506001600160701b038311155b6119985760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606401610475565b60006119a964010000000042612819565b600a549091506000906119c990600160e01b900463ffffffff1683612755565b905060008163ffffffff161180156119e957506001600160701b03841615155b80156119fd57506001600160701b03831615155b15611a8c578063ffffffff16611a2585611a1686612321565b6001600160e01b03169061233a565b6001600160e01b0316611a38919061271f565b600b6000828254611a49919061269e565b909155505063ffffffff8116611a6284611a1687612321565b6001600160e01b0316611a75919061271f565b600c6000828254611a86919061269e565b90915550505b600a805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b038316611b865760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610475565b6001600160a01b038216611be75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610475565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611c5584846115cc565b90506000198114611cbd5781811015611cb05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610475565b611cbd8484848403611b24565b50505050565b6001600160a01b038316611d275760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610475565b6001600160a01b038216611d895760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610475565b6001600160a01b03831660009081526020819052604090205481811015611e015760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610475565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611e3890849061269e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e8491815260200190565b60405180910390a3611cbd565b600080600760009054906101000a90046001600160a01b03166001600160a01b031663ae3f1f2c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee257600080fd5b505afa158015611ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1a91906123c1565b9050600760009054906101000a90046001600160a01b03166001600160a01b0316631ef414f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6a57600080fd5b505afa158015611f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa291906125c6565b600d5490925060ff83161561206057801561205b576000611fd2610d0b6001600160701b03888116908816611886565b90506000611fdf83612074565b905080821115612058576000612000611ff884846118ed565b600254610884565b905060006120348360ff891661202461201a8b601e61277a565b889060ff16611886565b61202e91906126dc565b9061234f565b9050600061204282846126dc565b905080156120545761205487826120e4565b5050505b50505b61206c565b801561206c576000600d555b505092915050565b600060038211156120d5575080600061208e6002836126dc565b61209990600161269e565b90505b818110156120cf579050806002816120b481866126dc565b6120be919061269e565b6120c891906126dc565b905061209c565b50919050565b81156120df575060015b919050565b6001600160a01b03821661213a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610475565b806002600082825461214c919061269e565b90915550506001600160a01b0382166000908152602081905260408120805483929061217990849061269e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008183106121d257816121d4565b825b9392505050565b6001600160a01b03821661223b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610475565b6001600160a01b038216600090815260208190526040902054818110156122af5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610475565b6001600160a01b03831660009081526020819052604081208383039055600280548492906122de90849061273e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611c3c565b6000610a19600160701b6001600160701b0384166126f0565b60006121d46001600160701b038316846126b6565b60008261235c838261269e565b9150811015610a195760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610475565b6000602082840312156123b657600080fd5b81356121d481612859565b6000602082840312156123d357600080fd5b81516121d481612859565b600080604083850312156123f157600080fd5b82356123fc81612859565b9150602083013561240c81612859565b809150509250929050565b60008060006060848603121561242c57600080fd5b833561243781612859565b9250602084013561244781612859565b929592945050506040919091013590565b600080600080600080600060e0888a03121561247357600080fd5b873561247e81612859565b9650602088013561248e81612859565b9550604088013594506060880135935060808801356124ac81612871565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156124dc57600080fd5b82356124e781612859565b946020939093013593505050565b60006020828403121561250757600080fd5b815180151581146121d457600080fd5b60006020828403121561252957600080fd5b5051919050565b60008060008060006080868803121561254857600080fd5b8535945060208601359350604086013561256181612859565b9250606086013567ffffffffffffffff8082111561257e57600080fd5b818801915088601f83011261259257600080fd5b8135818111156125a157600080fd5b8960208285010111156125b357600080fd5b9699959850939650602001949392505050565b6000602082840312156125d857600080fd5b81516121d481612871565b600082516125f581846020870161279d565b9190910192915050565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b602081526000825180602084015261266a81604085016020870161279d565b601f01601f19169190910160400192915050565b6020808252600690820152651313d0d2d15160d21b604082015260600190565b600082198211156126b1576126b161282d565b500190565b60006001600160e01b03838116806126d0576126d0612843565b92169190910492915050565b6000826126eb576126eb612843565b500490565b60006001600160e01b03828116848216811515828404821116156127165761271661282d565b02949350505050565b60008160001904831182151516156127395761273961282d565b500290565b6000828210156127505761275061282d565b500390565b600063ffffffff838116908316818110156127725761277261282d565b039392505050565b600060ff821660ff8416808210156127945761279461282d565b90039392505050565b60005b838110156127b85781810151838201526020016127a0565b83811115611cbd5750506000910152565b600181811c908216806127dd57607f821691505b602082108114156120cf57634e487b7160e01b600052602260045260246000fd5b60006000198214156128125761281261282d565b5060010190565b60008261282857612828612843565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461286e57600080fd5b50565b60ff8116811461286e57600080fdfea26469706673582212204e264fc9783fe50e23220066108668d5ea2af2ea15910939991f73d1dc42cbb964736f6c63430008070033a2646970667358221220c3f8660612ba92e69babd70c79d2703cc36203b78bee7fdc53fb1827474da1e864736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200012d5760003560e01c8063574f2ba311620000af578063ae3f1f2c116200007a578063ae3f1f2c1462000281578063c9c653961462000295578063e316227414620002ac578063e6a4390514620002c3578063f851a44014620002fa57600080fd5b8063574f2ba31462000243578063798ad169146200025657806396de7aa014620002605780639aab9248146200027757600080fd5b806325095b1811620000fc57806325095b1814620001b15780633accfa6c14620001e85780633f02323014620001fc578063405d31e014620002065780634812d2cf146200022c57600080fd5b80630406bd3f14620001325780631e3dd18b146200013e5780631ef414f7146200017257806324f0b189146200019a575b600080fd5b6200013c6200030e565b005b620001556200014f36600462000ca4565b6200037e565b6040516001600160a01b0390911681526020015b60405180910390f35b6002546200018790600160a01b900460ff1681565b60405160ff909116815260200162000169565b6200013c620001ab36600462000cbe565b620003a9565b62000155620001c236600462000c22565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b60015462000155906001600160a01b031681565b6200013c6200046c565b6002546200021b90600160a81b900460ff1681565b604051901515815260200162000169565b6200013c6200023d36600462000c5a565b6200051c565b6005545b60405190815260200162000169565b6200013c6200063c565b6200013c6200027136600462000bfd565b620006a9565b6200024762000720565b60025462000155906001600160a01b031681565b62000155620002a636600462000c22565b62000754565b6200013c620002bd36600462000bfd565b62000b5b565b62000155620002d436600462000c22565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b60005462000155906001600160a01b031681565b6000546001600160a01b03163314620003445760405162461bcd60e51b81526004016200033b9062000ce3565b60405180910390fd5b6002805460ff60a81b1916905560405133907fac45e0df4d004774ac0f710c9a0c240c354961a2f45e65cdd916c3974168c66090600090a2565b600581815481106200038f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314620003d65760405162461bcd60e51b81526004016200033b9062000ce3565b601e8160ff161115620004185760405162461bcd60e51b81526020600482015260096024820152682327a92124a22222a760b91b60448201526064016200033b565b6002805460ff60a01b1916600160a01b60ff8416908102919091179091556040519081527fcea85db5939aa6fa66ddd5c784e7284a46f4fba4e44f1e3d690f32d9acec167d9060200160405180910390a150565b6001546001600160a01b03163314620004b85760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b60448201526064016200033b565b600154600080546040516001600160a01b0393841693909116917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b03163314620005495760405162461bcd60e51b81526004016200033b9062000ce3565b6001600160a01b03838116600090815260036020908152604080832086851684529091529020541615620005b75760405162461bcd60e51b8152602060048201526014602482015273466163746f72793a20504149525f45584953545360601b60448201526064016200033b565b6001600160a01b03808416600081815260046020818152604080842088871680865290835281852080549789166001600160a01b03199889168117909155938352818520868652909252808420805490961683179095559351909392917f8fbdc74091620b8104c8c6e08d389b29cefbb460df289e035349571f5a18781491a4505050565b6000546001600160a01b03163314620006695760405162461bcd60e51b81526004016200033b9062000ce3565b6002805460ff60a81b1916600160a81b17905560405133907fc1524b448adbef1e113beb21fe1c291939668b9561ac836d3555e8c95963d4b090600090a2565b6000546001600160a01b03163314620006d65760405162461bcd60e51b81526004016200033b9062000ce3565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b600060405180602001620007349062000bd2565b6020820181038252601f19601f8201166040525080519060200120905090565b600254600090600160a81b900460ff161580620007905750600254600160a81b900460ff1680156200079057506000546001600160a01b031633145b620007d35760405162461bcd60e51b815260206004820152601260248201527110d49150551157d410525497d313d0d2d15160721b60448201526064016200033b565b816001600160a01b0316836001600160a01b031614156200082d5760405162461bcd60e51b81526020600482015260136024820152724944454e544943414c5f41444452455353455360681b60448201526064016200033b565b600080836001600160a01b0316856001600160a01b0316106200085257838562000855565b84845b90925090506001600160a01b038216620008a15760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064016200033b565b6001600160a01b038281166000908152600360209081526040808320858516845290915290205416156200090f5760405162461bcd60e51b8152602060048201526014602482015273466163746f72793a20504149525f45584953545360601b60448201526064016200033b565b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615620009ab576001600160a01b0382811660009081526004602090815260408083208585168452909152902054163314620009ab5760405162461bcd60e51b81526020600482015260136024820152722727aa2fa127a7aa29aa2920a82fa7aba722a960691b60448201526064016200033b565b600060405180602001620009bf9062000bd2565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b15801562000a7257600080fd5b505af115801562000a87573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db09095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6000546001600160a01b0316331462000b885760405162461bcd60e51b81526004016200033b9062000ce3565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f4d7837711202d0d7574a0e818fc3ab5ad3bcb1bf388b35ce649fefcb1f46a47c90600090a250565b612b978062000d0783390190565b80356001600160a01b038116811462000bf857600080fd5b919050565b60006020828403121562000c1057600080fd5b62000c1b8262000be0565b9392505050565b6000806040838503121562000c3657600080fd5b62000c418362000be0565b915062000c516020840162000be0565b90509250929050565b60008060006060848603121562000c7057600080fd5b62000c7b8462000be0565b925062000c8b6020850162000be0565b915062000c9b6040850162000be0565b90509250925092565b60006020828403121562000cb757600080fd5b5035919050565b60006020828403121562000cd157600080fd5b813560ff8116811462000c1b57600080fd5b6020808252600990820152683737ba1030b236b4b760b91b60408201526060019056fe6080604052600e805460ff191660011790553480156200001e57600080fd5b50604080518082018252601081526f2d32b73634b735902628102a37b5b2b760811b60208083019182528351808501909452600684526505a4c4b2d4c560d41b9084015281519192916200007591600391620001ee565b5080516200008b906004906020840190620001ee565b504691507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9050620000bc62000154565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c00160408051601f19818403018152919052805160209091012060055550600780546001600160a01b03191633179055620002d1565b606060038054620001659062000294565b80601f0160208091040260200160405190810160405280929190818152602001828054620001939062000294565b8015620001e45780601f10620001b857610100808354040283529160200191620001e4565b820191906000526020600020905b815481529060010190602001808311620001c657829003601f168201915b5050505050905090565b828054620001fc9062000294565b90600052602060002090601f0160209004810192826200022057600085556200026b565b82601f106200023b57805160ff19168380011785556200026b565b828001600101855582156200026b579182015b828111156200026b5782518255916020019190600101906200024e565b50620002799291506200027d565b5090565b5b808211156200027957600081556001016200027e565b600181811c90821680620002a957607f821691505b60208210811415620002cb57634e487b7160e01b600052602260045260246000fd5b50919050565b6128b680620002e16000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636a62784211610104578063a9059cbb116100a2578063d21220a711610071578063d21220a71461040f578063d505accf14610422578063dd62ed3e14610435578063fff6cae91461044857600080fd5b8063a9059cbb146103cd578063ba9a7a56146103e0578063bc25cf77146103e9578063c45a0155146103fc57600080fd5b80637ecebe00116100de5780637ecebe001461036a57806389afcb441461038a57806395d89b41146103b2578063a457c2d7146103ba57600080fd5b80636a6278421461032557806370a08231146103385780637464fc3d1461036157600080fd5b806330adf81f11610171578063395093511161014b57806339509351146102ed578063485cc955146103005780635909c0d5146103135780635a3d54931461031c57600080fd5b806330adf81f146102ae578063313ce567146102d55780633644e515146102e457600080fd5b8063095ea7b3116101ad578063095ea7b31461023b5780630dfe16811461025e57806318160ddd1461028957806323b872dd1461029b57600080fd5b8063022c0d9f146101d457806306fdde03146101e95780630902f1ac14610207575b600080fd5b6101e76101e2366004612530565b610450565b005b6101f1610949565b6040516101fe919061264b565b60405180910390f35b61020f6109db565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101fe565b61024e6102493660046124c9565b610a05565b60405190151581526020016101fe565b600854610271906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b6002545b6040519081526020016101fe565b61024e6102a9366004612417565b610a1f565b61028d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b604051601281526020016101fe565b61028d60055481565b61024e6102fb3660046124c9565b610a43565b6101e761030e3660046123de565b610a65565b61028d600b5481565b61028d600c5481565b61028d6103333660046123a4565b610ae6565b61028d6103463660046123a4565b6001600160a01b031660009081526020819052604090205490565b61028d600d5481565b61028d6103783660046123a4565b60066020526000908152604090205481565b61039d6103983660046123a4565b610e54565b604080519283526020830191909152016101fe565b6101f1611204565b61024e6103c83660046124c9565b611213565b61024e6103db3660046124c9565b61128e565b61028d6103e881565b6101e76103f73660046123a4565b61129c565b600754610271906001600160a01b031681565b600954610271906001600160a01b031681565b6101e7610430366004612458565b6113cf565b61028d6104433660046123de565b6115cc565b6101e76115f7565b600e5460ff1660011461047e5760405162461bcd60e51b81526004016104759061267e565b60405180910390fd5b600e805460ff19169055841515806104965750600084115b6104e25760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606401610475565b6000806104ed6109db565b5091509150816001600160701b0316871080156105125750806001600160701b031686105b6105575760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b6044820152606401610475565b60085460095460009182916001600160a01b039182169190811690891682148015906105955750806001600160a01b0316896001600160a01b031614155b6105ce5760405162461bcd60e51b815260206004820152600a602482015269494e56414c49445f544f60b01b6044820152606401610475565b8a156105df576105df828a8d611749565b89156105f0576105f0818a8c611749565b861561065d57604051630c919dcf60e41b81526001600160a01b038a169063c919dcf09061062a9033908f908f908e908e906004016125ff565b600060405180830381600087803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561069c57600080fd5b505afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190612517565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a082319060240160206040518083038186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074e9190612517565b92505050600089856001600160701b0316610769919061273e565b8311610776576000610793565b6107898a6001600160701b03871661273e565b610793908461273e565b905060006107aa8a6001600160701b03871661273e565b83116107b75760006107d4565b6107ca8a6001600160701b03871661273e565b6107d4908461273e565b905060008211806107e55750600081115b6108315760405162461bcd60e51b815260206004820152601a60248201527f20494e53554646494349454e545f494e5055545f414d4f554e540000000000006044820152606401610475565b6000610853610841846003611886565b61084d876103e8611886565b906118ed565b90506000610865610841846003611886565b905061088a620f42406108846001600160701b038b8116908b16611886565b90611886565b6108948383611886565b10156108cc5760405162461bcd60e51b8152602060048201526007602482015266506169723a204b60c81b6044820152606401610475565b50506108da84848888611943565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a35050600e805460ff19166001179055505050505050505050565b606060038054610958906127c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610984906127c9565b80156109d15780601f106109a6576101008083540402835291602001916109d1565b820191906000526020600020905b8154815290600101906020018083116109b457829003601f168201915b5050505050905090565b600a546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600033610a13818585611b24565b60019150505b92915050565b600033610a2d858285611c49565b610a38858585611cc3565b506001949350505050565b600033610a13818585610a5683836115cc565b610a60919061269e565b611b24565b6007546001600160a01b03163314610ab85760405162461bcd60e51b81526020600482015260166024820152754f6e6c792063616c6c656420627920666163746f727960501b6044820152606401610475565b600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055565b600e5460009060ff16600114610b0e5760405162461bcd60e51b81526004016104759061267e565b600e805460ff19169055600080610b236109db565b506008546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610b7057600080fd5b505afa158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba89190612517565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bf157600080fd5b505afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190612517565b90506000610c40836001600160701b0387166118ed565b90506000610c57836001600160701b0387166118ed565b90506000610c658787611e91565b90506000610c7260025490565b905080610d245760075460408051632b8fc7cb60e21b815290516000926001600160a01b03169163ae3f1f2c916004808301926020929190829003018186803b158015610cbe57600080fd5b505afa158015610cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf691906123c1565b9050610d106103e861084d610d0b8888611886565b612074565b9950610d1e816103e86120e4565b50610d6b565b610d686001600160701b038916610d3b8684611886565b610d4591906126dc565b6001600160701b038916610d598685611886565b610d6391906126dc565b6121c3565b98505b60008911610dbb5760405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606401610475565b610dc58a8a6120e4565b610dd186868a8a611943565b60ff821615610dfe57600a54610dfa906001600160701b0380821691600160701b900416611886565b600d555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a25050600e805460ff1916600117905550949695505050505050565b600e54600090819060ff16600114610e7e5760405162461bcd60e51b81526004016104759061267e565b600e805460ff19169055600080610e936109db565b506008546009546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a082319060240160206040518083038186803b158015610ee857600080fd5b505afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f209190612517565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b158015610f6557600080fd5b505afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d9190612517565b30600090815260208190526040812054919250610fba8888611e91565b90506000610fc760025490565b905080610fd48487611886565b610fde91906126dc565b9a5080610feb8486611886565b610ff591906126dc565b995060008b118015611007575060008a115b6110535760405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4255524e45440000006044820152606401610475565b61105d30846121db565b611068878d8d611749565b611073868d8c611749565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a082319060240160206040518083038186803b1580156110b257600080fd5b505afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190612517565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a082319060240160206040518083038186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190612517565b935061117285858b8b611943565b60ff82161561119f57600a5461119b906001600160701b0380821691600160701b900416611886565b600d555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050600e805460ff191660011790555096989597509495505050505050565b606060048054610958906127c9565b6000338161122182866115cc565b9050838110156112815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610475565b610a388286868403611b24565b600033610a13818585611cc3565b600e5460ff166001146112c15760405162461bcd60e51b81526004016104759061267e565b600e805460ff19169055600854600954600a546040516370a0823160e01b81523060048201526001600160a01b039384169390921691611370918491869161136b916001600160701b039091169084906370a08231906024015b60206040518083038186803b15801561133357600080fd5b505afa158015611347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190612517565b611749565b600a546040516370a0823160e01b81523060048201526113bd918391869161136b91600160701b9091046001600160701b0316906001600160a01b038516906370a082319060240161131b565b5050600e805460ff1916600117905550565b428410156114095760405162461bcd60e51b81526020600482015260076024820152661156141254915160ca1b6044820152606401610475565b6005546001600160a01b038816600090815260066020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761145c836127fe565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016114d592919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611540573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906115765750886001600160a01b0316816001600160a01b0316145b6115b65760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b6044820152606401610475565b6115c1898989611b24565b505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600e5460ff1660011461161c5760405162461bcd60e51b81526004016104759061267e565b600e805460ff191690556008546040516370a0823160e01b815230600482015261173a916001600160a01b0316906370a082319060240160206040518083038186803b15801561166b57600080fd5b505afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a39190612517565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156116e657600080fd5b505afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e9190612517565b600a546001600160701b0380821691600160701b900416611943565b600e805460ff19166001179055565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916117d591906125e3565b6000604051808303816000865af19150503d8060008114611812576040519150601f19603f3d011682016040523d82523d6000602084013e611817565b606091505b509150915081801561184157508051158061184157508080602001905181019061184191906124f5565b61187f5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610475565b5050505050565b60008115806118aa5750828261189c818361271f565b92506118a890836126dc565b145b610a195760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610475565b6000826118fa838261273e565b9150811115610a195760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610475565b6001600160701b03841180159061196157506001600160701b038311155b6119985760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606401610475565b60006119a964010000000042612819565b600a549091506000906119c990600160e01b900463ffffffff1683612755565b905060008163ffffffff161180156119e957506001600160701b03841615155b80156119fd57506001600160701b03831615155b15611a8c578063ffffffff16611a2585611a1686612321565b6001600160e01b03169061233a565b6001600160e01b0316611a38919061271f565b600b6000828254611a49919061269e565b909155505063ffffffff8116611a6284611a1687612321565b6001600160e01b0316611a75919061271f565b600c6000828254611a86919061269e565b90915550505b600a805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b038316611b865760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610475565b6001600160a01b038216611be75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610475565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611c5584846115cc565b90506000198114611cbd5781811015611cb05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610475565b611cbd8484848403611b24565b50505050565b6001600160a01b038316611d275760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610475565b6001600160a01b038216611d895760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610475565b6001600160a01b03831660009081526020819052604090205481811015611e015760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610475565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611e3890849061269e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e8491815260200190565b60405180910390a3611cbd565b600080600760009054906101000a90046001600160a01b03166001600160a01b031663ae3f1f2c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee257600080fd5b505afa158015611ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1a91906123c1565b9050600760009054906101000a90046001600160a01b03166001600160a01b0316631ef414f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6a57600080fd5b505afa158015611f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa291906125c6565b600d5490925060ff83161561206057801561205b576000611fd2610d0b6001600160701b03888116908816611886565b90506000611fdf83612074565b905080821115612058576000612000611ff884846118ed565b600254610884565b905060006120348360ff891661202461201a8b601e61277a565b889060ff16611886565b61202e91906126dc565b9061234f565b9050600061204282846126dc565b905080156120545761205487826120e4565b5050505b50505b61206c565b801561206c576000600d555b505092915050565b600060038211156120d5575080600061208e6002836126dc565b61209990600161269e565b90505b818110156120cf579050806002816120b481866126dc565b6120be919061269e565b6120c891906126dc565b905061209c565b50919050565b81156120df575060015b919050565b6001600160a01b03821661213a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610475565b806002600082825461214c919061269e565b90915550506001600160a01b0382166000908152602081905260408120805483929061217990849061269e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008183106121d257816121d4565b825b9392505050565b6001600160a01b03821661223b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610475565b6001600160a01b038216600090815260208190526040902054818110156122af5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610475565b6001600160a01b03831660009081526020819052604081208383039055600280548492906122de90849061273e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611c3c565b6000610a19600160701b6001600160701b0384166126f0565b60006121d46001600160701b038316846126b6565b60008261235c838261269e565b9150811015610a195760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610475565b6000602082840312156123b657600080fd5b81356121d481612859565b6000602082840312156123d357600080fd5b81516121d481612859565b600080604083850312156123f157600080fd5b82356123fc81612859565b9150602083013561240c81612859565b809150509250929050565b60008060006060848603121561242c57600080fd5b833561243781612859565b9250602084013561244781612859565b929592945050506040919091013590565b600080600080600080600060e0888a03121561247357600080fd5b873561247e81612859565b9650602088013561248e81612859565b9550604088013594506060880135935060808801356124ac81612871565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156124dc57600080fd5b82356124e781612859565b946020939093013593505050565b60006020828403121561250757600080fd5b815180151581146121d457600080fd5b60006020828403121561252957600080fd5b5051919050565b60008060008060006080868803121561254857600080fd5b8535945060208601359350604086013561256181612859565b9250606086013567ffffffffffffffff8082111561257e57600080fd5b818801915088601f83011261259257600080fd5b8135818111156125a157600080fd5b8960208285010111156125b357600080fd5b9699959850939650602001949392505050565b6000602082840312156125d857600080fd5b81516121d481612871565b600082516125f581846020870161279d565b9190910192915050565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b602081526000825180602084015261266a81604085016020870161279d565b601f01601f19169190910160400192915050565b6020808252600690820152651313d0d2d15160d21b604082015260600190565b600082198211156126b1576126b161282d565b500190565b60006001600160e01b03838116806126d0576126d0612843565b92169190910492915050565b6000826126eb576126eb612843565b500490565b60006001600160e01b03828116848216811515828404821116156127165761271661282d565b02949350505050565b60008160001904831182151516156127395761273961282d565b500290565b6000828210156127505761275061282d565b500390565b600063ffffffff838116908316818110156127725761277261282d565b039392505050565b600060ff821660ff8416808210156127945761279461282d565b90039392505050565b60005b838110156127b85781810151838201526020016127a0565b83811115611cbd5750506000910152565b600181811c908216806127dd57607f821691505b602082108114156120cf57634e487b7160e01b600052602260045260246000fd5b60006000198214156128125761281261282d565b5060010190565b60008261282857612828612843565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461286e57600080fd5b50565b60ff8116811461286e57600080fdfea26469706673582212204e264fc9783fe50e23220066108668d5ea2af2ea15910939991f73d1dc42cbb964736f6c63430008070033a2646970667358221220c3f8660612ba92e69babd70c79d2703cc36203b78bee7fdc53fb1827474da1e864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7604,
        "contract": "contracts/core/Factory.sol:Factory",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7606,
        "contract": "contracts/core/Factory.sol:Factory",
        "label": "adminCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4137,
        "contract": "contracts/core/Factory.sol:Factory",
        "label": "feeto",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4140,
        "contract": "contracts/core/Factory.sol:Factory",
        "label": "feeBasePoint",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 4143,
        "contract": "contracts/core/Factory.sol:Factory",
        "label": "lockForPairCreate",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4150,
        "contract": "contracts/core/Factory.sol:Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 4157,
        "contract": "contracts/core/Factory.sol:Factory",
        "label": "getBootstrap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 4161,
        "contract": "contracts/core/Factory.sol:Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}