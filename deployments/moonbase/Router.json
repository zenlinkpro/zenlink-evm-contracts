{
  "address": "0x7401014B15847ac7A92e9838DfB7790033B9A823",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WNativeCurrency",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WNativeCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0Desired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Desired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount0Min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Min",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountNativeCurrencyMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityNativeCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountNativeCurrency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountSwapOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nativeCurrencySwapInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nativeCurrencyReserveMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquiditySingleNativeCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountNativeCurrency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountSwapOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountSwapInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInReserveMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquiditySingleToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount0Min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Min",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountNativeCurrencyMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityNativeCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountNativeCurrency",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeCurrencyForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNativeCurrency",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapNativeCurrencyForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactNativeCurrency",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xddfde1081d2cfe8c24a7ac8e871b6ee709d0bc5a07f124cf76a74505c2f44fe2",
  "receipt": {
    "to": null,
    "from": "0x0597EB296eFbb84CA64C843a7F80d7F8Bff7d17d",
    "contractAddress": "0x7401014B15847ac7A92e9838DfB7790033B9A823",
    "transactionIndex": 5,
    "gasUsed": "3031617",
    "logsBloom": "0x
    "blockHash": "0x4b0512cdfb16877fbe141eb52d41af637c2af626b4638c01f20056caff908cb9",
    "transactionHash": "0xddfde1081d2cfe8c24a7ac8e871b6ee709d0bc5a07f124cf76a74505c2f44fe2",
    "logs": [],
    "blockNumber": 2782130,
    "cumulativeGasUsed": "3393545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6ED3E6551Bb396091C15a9621aACa6DdB1C01992",
    "0x674421E9567653EE76e96fEEA3B2B2966d000Dbd"
  ],
  "numDeployments": 1,
  "solcInputHash": "007aa94c81b3bc67ae48537a63ee475f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WNativeCurrency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WNativeCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNativeCurrencyMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityNativeCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNativeCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountSwapOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeCurrencySwapInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeCurrencyReserveMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquiditySingleNativeCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNativeCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSwapOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSwapInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInReserveMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquiditySingleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNativeCurrencyMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityNativeCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNativeCurrency\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeCurrencyForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNativeCurrency\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapNativeCurrencyForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactNativeCurrency\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/Router.sol\":\"Router\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n    event PairCreateLocked(\\n        address indexed caller\\n    );\\n    event PairCreateUnlocked(\\n        address indexed caller\\n    );\\n    event BootstrapSetted(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address indexed bootstrap\\n    );\\n    event FeetoUpdated(\\n        address indexed feeto\\n    );\\n    event FeeBasePointUpdated(\\n        uint8 basePoint\\n    );\\n\\n    function feeto() external view returns (address);\\n\\n    function feeBasePoint() external view returns (uint8);\\n\\n    function lockForPairCreate() external view returns (bool);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n    \\n    function getBootstrap(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address bootstrap);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0x211140634ad85da83e50e8623d7fd7aeff89fb1fd472e2a8bec7927c416b3bf9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPair {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x384acf5ee76958b02b75d074934d79e0e6d0b5fcdb8a5f63752996cb4de7bffa\",\"license\":\"MIT\"},\"contracts/libraries/Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"../core/interfaces/IPair.sol\\\";\\nimport \\\"../core/interfaces/IFactory.sol\\\";\\n\\nlibrary Helper {\\n    using Math for uint256;\\n\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Helper: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Helper: ZERO_ADDRESS\\\");\\n    }\\n\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        return IFactory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPair(\\n            pairFor(factory, tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferNativeCurrency(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferNativeCurrency: NativeCurrency transfer failed\\\"\\n        );\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"Helper: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"Helper: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"Helper: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"Helper: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"Helper: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"Helper: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48c51fc09136856361337a0edc7295ab91b9c5a61c45aa1e4c44c63762dff3c5\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdaf217d097cd3962ad38fdeaab113dc3dddf1f65bc45ecf3a5b0a0487c0a2092\",\"license\":\"MIT\"},\"contracts/periphery/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IWNativeCurrency.sol\\\";\\nimport \\\"../libraries/Helper.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\n\\ncontract Router is IRouter {\\n    using Math for uint256;\\n\\n    address public override factory;\\n    address public override WNativeCurrency;\\n\\n    constructor(address _factory, address _WNativeCurrency) {\\n        factory = _factory;\\n        WNativeCurrency = _WNativeCurrency;\\n    }\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == WNativeCurrency); // only accept Native Currency via fallback from the WNativeCurrency contract\\n    }\\n\\n    function addLiquidity(\\n        address token0,\\n        address token1,\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        uint256 amount0Min,\\n        uint256 amount1Min,\\n        address to,\\n        uint256 deadline\\n    )\\n        public\\n        override\\n        ensure(deadline)\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 liquidity\\n        )\\n    {\\n        (amount0, amount1) = _addLiquidity(\\n            token0,\\n            token1,\\n            amount0Desired,\\n            amount1Desired,\\n            amount0Min,\\n            amount1Min\\n        );\\n        address pair = Helper.pairFor(factory, token0, token1);\\n        Helper.safeTransferFrom(token0, msg.sender, pair, amount0);\\n        Helper.safeTransferFrom(token1, msg.sender, pair, amount1);\\n        liquidity = IPair(pair).mint(to);\\n    }\\n\\n    function addLiquiditySingleToken(\\n        address[] calldata path,\\n        uint256 amountIn,\\n        uint256 amountSwapOut,\\n        uint256 amountSwapInMax,\\n        uint256 amountInReserveMin,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256 liquidity) {\\n        address token0 = path[0];\\n        address token1 = path[path.length - 1];\\n\\n        uint256[] memory amounts = swapTokensForExactTokens(\\n            amountSwapOut,\\n            amountSwapInMax,\\n            path,\\n            to,\\n            deadline\\n        );\\n\\n        uint256 amountInReserve = amountIn - amounts[0];\\n        (, , liquidity) = addLiquidity(\\n            token1,\\n            token0,\\n            amounts[amounts.length - 1],\\n            amountInReserve,\\n            amounts[amounts.length - 1],\\n            amountInReserveMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function addLiquidityNativeCurrency(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountNativeCurrencyMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        override\\n        ensure(deadline)\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountNativeCurrency,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountToken, amountNativeCurrency) = _addLiquidity(\\n            token,\\n            WNativeCurrency,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountNativeCurrencyMin\\n        );\\n        address pair = Helper.pairFor(factory, token, WNativeCurrency);\\n        Helper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n        IWNativeCurrency(WNativeCurrency).deposit{\\n            value: amountNativeCurrency\\n        }();\\n        require(IERC20(WNativeCurrency).transfer(pair, amountNativeCurrency));\\n        liquidity = IPair(pair).mint(to);\\n        if (msg.value > amountNativeCurrency)\\n            Helper.safeTransferNativeCurrency(\\n                msg.sender,\\n                msg.value - amountNativeCurrency\\n            ); // refund dust native currency, if any\\n    }\\n\\n    function addLiquiditySingleNativeCurrency(\\n        address[] memory path,\\n        uint256 amountSwapOut,\\n        uint256 nativeCurrencySwapInMax,\\n        uint256 nativeCurrencyReserveMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        override\\n        ensure(deadline)\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountNativeCurrency,\\n            uint256 liquidity\\n        )\\n    {\\n        // Swap\\n        require(path[0] == WNativeCurrency, \\\"Router: INVALID_PATH\\\");\\n        uint256[] memory amounts = Helper.getAmountsIn(\\n            factory,\\n            amountSwapOut,\\n            path\\n        );\\n\\n        require(amounts[0] <= msg.value, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\\n\\n        require(\\n            IERC20(WNativeCurrency).transfer(\\n                Helper.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            )\\n        );\\n\\n        _swap(amounts, path, to);\\n\\n        require(\\n            amounts[0] <= nativeCurrencySwapInMax,\\n            \\\"not allow bigger than nativeCurrencySwapInMax\\\"\\n        );\\n\\n        // Addliquidity\\n        address token = path[path.length - 1];\\n        uint256 nativeCurrencyReserve = msg.value - amounts[0];\\n        (amountToken, amountNativeCurrency) = _addLiquidity(\\n            token,\\n            WNativeCurrency,\\n            amounts[amounts.length - 1],\\n            nativeCurrencyReserve,\\n            amounts[amounts.length - 1],\\n            nativeCurrencyReserveMin\\n        );\\n\\n        address pair = Helper.pairFor(factory, token, WNativeCurrency);\\n\\n        Helper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n\\n        IWNativeCurrency(WNativeCurrency).deposit{\\n            value: amountNativeCurrency\\n        }();\\n\\n        require(IERC20(WNativeCurrency).transfer(pair, amountNativeCurrency));\\n\\n        liquidity = IPair(pair).mint(to);\\n\\n        if (msg.value > (amountNativeCurrency + amounts[0]))\\n            Helper.safeTransferNativeCurrency(\\n                msg.sender,\\n                msg.value - (amountNativeCurrency + amounts[0])\\n            ); // refund dust native currency, if any\\n    }\\n\\n    function _addLiquidity(\\n        address token0,\\n        address token1,\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        uint256 amount0Min,\\n        uint256 amount1Min\\n    ) private returns (uint256 amount0, uint256 amount1) {\\n        if (IFactory(factory).getPair(token0, token1) == address(0)) {\\n            IFactory(factory).createPair(token0, token1);\\n        }\\n        (uint256 reserve0, uint256 reserve1) = Helper.getReserves(\\n            factory,\\n            token0,\\n            token1\\n        );\\n        if (reserve0 == 0 && reserve1 == 0) {\\n            (amount0, amount1) = (amount0Desired, amount1Desired);\\n        } else {\\n            uint256 amount1Optimal = Helper.quote(\\n                amount0Desired,\\n                reserve0,\\n                reserve1\\n            );\\n            if (amount1Optimal <= amount1Desired) {\\n                require(\\n                    amount1Optimal >= amount1Min,\\n                    \\\"Router: INSUFFICIENT_1_AMOUNT\\\"\\n                );\\n                (amount0, amount1) = (amount0Desired, amount1Optimal);\\n            } else {\\n                uint256 amount0Optimal = Helper.quote(\\n                    amount1Desired,\\n                    reserve1,\\n                    reserve0\\n                );\\n                require(amount0Optimal <= amount0Desired);\\n                require(\\n                    amount0Optimal >= amount0Min,\\n                    \\\"Router: INSUFFICIENT_0_AMOUNT\\\"\\n                );\\n                (amount0, amount1) = (amount0Optimal, amount1Desired);\\n            }\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        address token0,\\n        address token1,\\n        uint256 liquidity,\\n        uint256 amount0Min,\\n        uint256 amount1Min,\\n        address to,\\n        uint256 deadline\\n    )\\n        public\\n        override\\n        ensure(deadline)\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        address pair = Helper.pairFor(factory, token0, token1);\\n        IERC20(pair).transferFrom(msg.sender, pair, liquidity);\\n        (uint256 amountA, uint256 amountB) = IPair(pair).burn(to);\\n        (address tokenA, ) = Helper.sortTokens(token0, token1);\\n        (amount0, amount1) = tokenA == token0\\n            ? (amountA, amountB)\\n            : (amountB, amountA);\\n        require(amount0 >= amount0Min, \\\"Router: INSUFFICIENT_0_AMOUNT\\\");\\n        require(amount1 >= amount1Min, \\\"Router: INSUFFICIENT_1_AMOUNT\\\");\\n    }\\n\\n    function removeLiquidityNativeCurrency(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountNativeCurrencyMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        public\\n        override\\n        ensure(deadline)\\n        returns (uint256 amountToken, uint256 amountNativeCurrency)\\n    {\\n        (amountToken, amountNativeCurrency) = removeLiquidity(\\n            token,\\n            WNativeCurrency,\\n            liquidity,\\n            amountTokenMin,\\n            amountNativeCurrencyMin,\\n            address(this),\\n            deadline\\n        );\\n        Helper.safeTransfer(token, to, amountToken);\\n        IWNativeCurrency(WNativeCurrency).withdraw(amountNativeCurrency);\\n        Helper.safeTransferNativeCurrency(to, amountNativeCurrency);\\n    }\\n\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) private {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = Helper.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? Helper.pairFor(factory, output, path[i + 2])\\n                : _to;\\n            IPair(Helper.pairFor(factory, input, output)).swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) public override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = Helper.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Helper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            Helper.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) public override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        Helper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            Helper.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapExactNativeCurrencyForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        override\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[0] == WNativeCurrency, \\\"Router: INVALID_PATH\\\");\\n        amounts = Helper.getAmountsOut(factory, msg.value, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\\n        require(\\n            IERC20(WNativeCurrency).transfer(\\n                Helper.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapTokensForExactNativeCurrency(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\\n        require(\\n            path[path.length - 1] == WNativeCurrency,\\n            \\\"Router: INVALID_PATH\\\"\\n        );\\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        Helper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            Helper.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWNativeCurrency(WNativeCurrency).withdraw(amounts[amounts.length - 1]);\\n        Helper.safeTransferNativeCurrency(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForNativeCurrency(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\\n        require(\\n            path[path.length - 1] == WNativeCurrency,\\n            \\\"Router: INVALID_PATH\\\"\\n        );\\n        amounts = Helper.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Helper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            Helper.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWNativeCurrency(WNativeCurrency).withdraw(amounts[amounts.length - 1]);\\n        Helper.safeTransferNativeCurrency(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapNativeCurrencyForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        override\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[0] == WNativeCurrency, \\\"Router: INVALID_PATH\\\");\\n        amounts = Helper.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= msg.value, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWNativeCurrency(WNativeCurrency).deposit{value: amounts[0]}();\\n        require(\\n            IERC20(WNativeCurrency).transfer(\\n                Helper.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, path, to);\\n        if (msg.value > amounts[0])\\n            Helper.safeTransferNativeCurrency(\\n                msg.sender,\\n                msg.value - amounts[0]\\n            ); // refund dust eth, if any\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public pure override returns (uint256 amountOut) {\\n        return Helper.getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public pure override returns (uint256 amountIn) {\\n        return Helper.getAmountOut(amountOut, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory amounts)\\n    {\\n        return Helper.getAmountsOut(factory, amountIn, path);\\n    }\\n\\n    function getAmountsIn(uint256 amountOut, address[] memory path)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory amounts)\\n    {\\n        return Helper.getAmountsIn(factory, amountOut, path);\\n    }\\n}\\n\",\"keccak256\":\"0xcbe57c877a3fd07772b913709648f3de36571e54ee9feb444eea0f7254f01c85\",\"license\":\"MIT\"},\"contracts/periphery/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRouter {\\n    function factory() external view returns (address);\\n\\n    function WNativeCurrency() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquiditySingleToken(\\n        address[] calldata path,\\n        uint256 amountIn,\\n        uint256 amountSwapIn,\\n        uint256 amountSwapOutMin,\\n        uint256 amountInReserveMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityNativeCurrency(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountNativeCurrencyMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountNativeCurrency,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquiditySingleNativeCurrency(\\n        address[] calldata path,\\n        uint256 amountSwapOut,\\n        uint256 nativeCurrencySwapInMax,\\n        uint256 nativeCurrencyReserveMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountNativeCurrency,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityNativeCurrency(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountNativeCurrencyMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountNativeCurrency);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactNativeCurrencyForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactNativeCurrency(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForNativeCurrency(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapNativeCurrencyForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xc2fb15c1c3b021a81f531a8024636f9579087c7e72308868f507bbea0e6e69f0\",\"license\":\"MIT\"},\"contracts/periphery/interfaces/IWNativeCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWNativeCurrency {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xd2a854910e56d44598e03b476281c055bcd0a3bcb19977f414889d8137a04f00\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620035d1380380620035d1833981016040819052620000349162000083565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055620000bb565b80516001600160a01b03811681146200007e57600080fd5b919050565b600080604083850312156200009757600080fd5b620000a28362000066565b9150620000b26020840162000066565b90509250929050565b61350680620000cb6000396000f3fe60806040526004361061010d5760003560e01c80639be7614d11610095578063cd1bd0d911610064578063cd1bd0d9146102f1578063d06ca61f14610304578063dcff1b9414610324578063e8e3370014610344578063f85b7c8b1461036457600080fd5b80639be7614d1461027e578063b1ea829214610291578063baa2abde146102b1578063c45a0155146102d157600080fd5b8063419591ed116100dc578063419591ed146101e5578063686589671461021d57806385f8c259146101305780638803dbee1461024b578063937ca0da1461026b57600080fd5b8063054d50d4146101305780631f00ca741461016357806338ed173914610190578063403bf1f2146101b057600080fd5b3661012b576001546001600160a01b0316331461012957600080fd5b005b600080fd5b34801561013c57600080fd5b5061015061014b3660046131fc565b610384565b6040519081526020015b60405180910390f35b34801561016f57600080fd5b5061018361017e36600461311e565b610399565b60405161015a9190613244565b34801561019c57600080fd5b506101836101ab366004613189565b6103bc565b3480156101bc57600080fd5b506101d06101cb366004612ee5565b610576565b6040805192835260208301919091520161015a565b3480156101f157600080fd5b50600154610205906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b61023061022b366004612fca565b61063a565b6040805193845260208401929092529082015260600161015a565b34801561025757600080fd5b50610183610266366004613189565b610c05565b610230610279366004612ee5565b610cae565b61018361028c3660046130b7565b610ebd565b34801561029d57600080fd5b506101506102ac366004612f43565b6111c8565b3480156102bd57600080fd5b506101d06102cc366004612df7565b6112fe565b3480156102dd57600080fd5b50600054610205906001600160a01b031681565b6101836102ff3660046130b7565b61152f565b34801561031057600080fd5b5061018361031f36600461311e565b6117c8565b34801561033057600080fd5b5061018361033f366004613189565b6117e2565b34801561035057600080fd5b5061023061035f366004612e69565b611a0d565b34801561037057600080fd5b5061018361037f366004613189565b611b07565b6000610391848484611c16565b949350505050565b6000546060906103b3906001600160a01b03168484611d1a565b90505b92915050565b606081428110156103e85760405162461bcd60e51b81526004016103df906132ed565b60405180910390fd5b6000546040805160208089028281018201909352888252610432936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611ea792505050565b91508682600184516104449190613401565b815181106104545761045461348c565b6020026020010151101561047a5760405162461bcd60e51b81526004016103df90613316565b61052c868660008181106104905761049061348c565b90506020020160208101906104a59190612db6565b60008054339161050c916001600160a01b0316908b908b90816104ca576104ca61348c565b90506020020160208101906104df9190612db6565b8b8b60018181106104f2576104f261348c565b90506020020160208101906105079190612db6565b612014565b8560008151811061051f5761051f61348c565b6020026020010151612099565b61056b828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506121d7915050565b509695505050505050565b600080824281101561059a5760405162461bcd60e51b81526004016103df906132ed565b6001546105b6908a906001600160a01b03168a8a8a308a6112fe565b90935091506105c68986856123ab565b600154604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b5050505061062e85836124dc565b50965096945050505050565b600080600083428110156106605760405162461bcd60e51b81526004016103df906132ed565b6001548a516001600160a01b03909116908b906000906106825761068261348c565b60200260200101516001600160a01b0316146106b05760405162461bcd60e51b81526004016103df90613288565b600080546106c8906001600160a01b03168b8d611d1a565b905034816000815181106106de576106de61348c565b602002602001015111156107045760405162461bcd60e51b81526004016103df906132b6565b60015481516001600160a01b039091169063d0e30db090839060009061072c5761072c61348c565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561075f57600080fd5b505af1158015610773573d6000803e3d6000fd5b5050505050600160009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb6107ee60008054906101000a90046001600160a01b03168e6000815181106107c6576107c661348c565b60200260200101518f6001815181106107e1576107e161348c565b6020026020010151612014565b836000815181106108015761080161348c565b60200260200101516040518363ffffffff1660e01b815260040161083a9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561085457600080fd5b505af1158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c919061302c565b61089557600080fd5b6108a0818c896121d7565b88816000815181106108b4576108b461348c565b602002602001015111156109205760405162461bcd60e51b815260206004820152602d60248201527f6e6f7420616c6c6f7720626967676572207468616e206e61746976654375727260448201526c0cadcc6f2a6eec2e092dc9ac2f609b1b60648201526084016103df565b60008b60018d516109319190613401565b815181106109415761094161348c565b602002602001015190506000826000815181106109605761096061348c565b6020026020010151346109739190613401565b90506109e482600160009054906101000a90046001600160a01b0316856001875161099e9190613401565b815181106109ae576109ae61348c565b60200260200101518487600189516109c69190613401565b815181106109d6576109d661348c565b60200260200101518f6125d7565b60008054600154939a5091985091610a0a916001600160a01b0390811691869116612014565b9050610a188333838b612099565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505060015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018d9052909116935063a9059cbb92506044019050602060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b08919061302c565b610b1157600080fd5b6040516335313c2160e11b81526001600160a01b038b81166004830152821690636a62784290602401602060405180830381600087803b158015610b5457600080fd5b505af1158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c919061309e565b955083600081518110610ba157610ba161348c565b602002602001015187610bb491906133a8565b341115610bf457610bf43385600081518110610bd257610bd261348c565b602002602001015189610be591906133a8565b610bef9034613401565b6124dc565b505050505096509650969350505050565b60608142811015610c285760405162461bcd60e51b81526004016103df906132ed565b6000546040805160208089028281018201909352888252610c72936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611d1a92505050565b91508682600081518110610c8857610c8861348c565b6020026020010151111561047a5760405162461bcd60e51b81526004016103df906132b6565b60008060008342811015610cd45760405162461bcd60e51b81526004016103df906132ed565b600154610cef908b906001600160a01b03168b348c8c6125d7565b6000805460015493975091955091610d15916001600160a01b03908116918e9116612014565b9050610d238b338388612099565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b505060015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018a9052909116935063a9059cbb92506044019050602060405180830381600087803b158015610ddb57600080fd5b505af1158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e13919061302c565b610e1c57600080fd5b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a62784290602401602060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e97919061309e565b925083341115610eaf57610eaf33610bef8634613401565b505096509650969350505050565b60608142811015610ee05760405162461bcd60e51b81526004016103df906132ed565b6001546001600160a01b03168686600081610efd57610efd61348c565b9050602002016020810190610f129190612db6565b6001600160a01b031614610f385760405162461bcd60e51b81526004016103df90613288565b6000546040805160208089028281018201909352888252610f82936001600160a01b0316928b92918b918b91829190850190849080828437600092019190915250611d1a92505050565b91503482600081518110610f9857610f9861348c565b60200260200101511115610fbe5760405162461bcd60e51b81526004016103df906132b6565b60015482516001600160a01b039091169063d0e30db0908490600090610fe657610fe661348c565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561101957600080fd5b505af115801561102d573d6000803e3d6000fd5b5050600154600080546001600160a01b03928316955063a9059cbb945061108c9350909116908a908a90816110645761106461348c565b90506020020160208101906110799190612db6565b8a8a60018181106104f2576104f261348c565b8460008151811061109f5761109f61348c565b60200260200101516040518363ffffffff1660e01b81526004016110d89291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a919061302c565b61113357600080fd5b611172828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506121d7915050565b816000815181106111855761118561348c565b60200260200101513411156111be576111be33836000815181106111ab576111ab61348c565b602002602001015134610bef9190613401565b5095945050505050565b600081428110156111eb5760405162461bcd60e51b81526004016103df906132ed565b60008a8a60008181106112005761120061348c565b90506020020160208101906112159190612db6565b905060008b8b611226600182613401565b8181106112355761123561348c565b905060200201602081019061124a9190612db6565b9050600061125c8a8a8f8f8b8b610c05565b90506000816000815181106112735761127361348c565b60200260200101518c6112869190613401565b90506112e48385846001865161129c9190613401565b815181106112ac576112ac61348c565b60200260200101518486600188516112c49190613401565b815181106112d4576112d461348c565b60200260200101518e8e8e611a0d565b909150905080965050505050505098975050505050505050565b60008082428110156113225760405162461bcd60e51b81526004016103df906132ed565b6000805461133a906001600160a01b03168c8c612014565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd90606401602060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c3919061302c565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb44906024016040805180830381600087803b15801561140b57600080fd5b505af115801561141f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114439190613165565b9150915060006114538e8e612826565b5090508d6001600160a01b0316816001600160a01b031614611476578183611479565b82825b90975095508a8710156114ce5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f305f414d4f554e5400000060448201526064016103df565b8986101561151e5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f315f414d4f554e5400000060448201526064016103df565b505050505097509795505050505050565b606081428110156115525760405162461bcd60e51b81526004016103df906132ed565b6001546001600160a01b0316868660008161156f5761156f61348c565b90506020020160208101906115849190612db6565b6001600160a01b0316146115aa5760405162461bcd60e51b81526004016103df90613288565b60005460408051602080890282810182019093528882526115f4936001600160a01b0316923492918b918b91829190850190849080828437600092019190915250611ea792505050565b91508682600184516116069190613401565b815181106116165761161661348c565b6020026020010151101561163c5760405162461bcd60e51b81526004016103df90613316565b60015482516001600160a01b039091169063d0e30db09084906000906116645761166461348c565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b5050600154600080546001600160a01b03928316955063a9059cbb94506116e29350909116908a908a90816110645761106461348c565b846000815181106116f5576116f561348c565b60200260200101516040518363ffffffff1660e01b815260040161172e9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561174857600080fd5b505af115801561175c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611780919061302c565b61178957600080fd5b6111be828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506121d7915050565b6000546060906103b3906001600160a01b03168484611ea7565b606081428110156118055760405162461bcd60e51b81526004016103df906132ed565b600180546001600160a01b031690879087906118219082613401565b8181106118305761183061348c565b90506020020160208101906118459190612db6565b6001600160a01b03161461186b5760405162461bcd60e51b81526004016103df90613288565b60005460408051602080890282810182019093528882526118b5936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611ea792505050565b91508682600184516118c79190613401565b815181106118d7576118d761348c565b602002602001015110156118fd5760405162461bcd60e51b81526004016103df90613316565b611913868660008181106104905761049061348c565b611952828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506121d7915050565b6001805483516001600160a01b0390911691632e1a7d4d91859161197591613401565b815181106119855761198561348c565b60200260200101516040518263ffffffff1660e01b81526004016119ab91815260200190565b600060405180830381600087803b1580156119c557600080fd5b505af11580156119d9573d6000803e3d6000fd5b5050505061056b8483600185516119f09190613401565b81518110611a0057611a0061348c565b60200260200101516124dc565b60008060008342811015611a335760405162461bcd60e51b81526004016103df906132ed565b611a418c8c8c8c8c8c6125d7565b6000805492965090945090611a60906001600160a01b03168e8e612014565b9050611a6e8d338388612099565b611a7a8c338387612099565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a62784290602401602060405180830381600087803b158015611abd57600080fd5b505af1158015611ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af5919061309e565b92505050985098509895505050505050565b60608142811015611b2a5760405162461bcd60e51b81526004016103df906132ed565b600180546001600160a01b03169087908790611b469082613401565b818110611b5557611b5561348c565b9050602002016020810190611b6a9190612db6565b6001600160a01b031614611b905760405162461bcd60e51b81526004016103df90613288565b6000546040805160208089028281018201909352888252611bda936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611d1a92505050565b91508682600081518110611bf057611bf061348c565b602002602001015111156118fd5760405162461bcd60e51b81526004016103df906132b6565b6000808411611c715760405162461bcd60e51b815260206004820152602160248201527f48656c7065723a20494e53554646494349454e545f494e5055545f414d4f554e6044820152601560fa1b60648201526084016103df565b600083118015611c815750600082115b611ccd5760405162461bcd60e51b815260206004820152601e60248201527f48656c7065723a20494e53554646494349454e545f4c4951554944495459000060448201526064016103df565b6000611cdb856103e5612907565b90506000611ce98285612907565b90506000611d0383611cfd886103e8612907565b9061296e565b9050611d0f81836133c0565b979650505050505050565b6060600282511015611d655760405162461bcd60e51b8152602060048201526014602482015273090cad8e0cae47440929cac82989288bea082a8960631b60448201526064016103df565b815167ffffffffffffffff811115611d7f57611d7f6134a2565b604051908082528060200260200182016040528015611da8578160200160208202803683370190505b509050828160018351611dbb9190613401565b81518110611dcb57611dcb61348c565b602002602001018181525050600060018351611de79190613401565b90505b8015611e9f57600080611e3a8786611e03600187613401565b81518110611e1357611e1361348c565b6020026020010151878681518110611e2d57611e2d61348c565b60200260200101516129c3565b91509150611e62848481518110611e5357611e5361348c565b60200260200101518383612a9c565b84611e6e600186613401565b81518110611e7e57611e7e61348c565b60200260200101818152505050508080611e9790613444565b915050611dea565b509392505050565b6060600282511015611ef25760405162461bcd60e51b8152602060048201526014602482015273090cad8e0cae47440929cac82989288bea082a8960631b60448201526064016103df565b815167ffffffffffffffff811115611f0c57611f0c6134a2565b604051908082528060200260200182016040528015611f35578160200160208202803683370190505b5090508281600081518110611f4c57611f4c61348c565b60200260200101818152505060005b60018351611f699190613401565b811015611e9f57600080611faf87868581518110611f8957611f8961348c565b602002602001015187866001611f9f91906133a8565b81518110611e2d57611e2d61348c565b91509150611fd7848481518110611fc857611fc861348c565b60200260200101518383611c16565b84611fe38560016133a8565b81518110611ff357611ff361348c565b6020026020010181815250505050808061200c9061345b565b915050611f5b565b60405163e6a4390560e01b81526001600160a01b03838116600483015282811660248301526000919085169063e6a439059060440160206040518083038186803b15801561206157600080fd5b505afa158015612075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103919190612dda565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916120fd9190613228565b6000604051808303816000865af19150503d806000811461213a576040519150601f19603f3d011682016040523d82523d6000602084013e61213f565b606091505b5091509150818015612169575080511580612169575080806020019051810190612169919061302c565b6121cf5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b60648201526084016103df565b505050505050565b60005b600183516121e89190613401565b8110156123a5576000808483815181106122045761220461348c565b60200260200101518584600161221a91906133a8565b8151811061222a5761222a61348c565b60200260200101519150915060006122428383612826565b5090506000876122538660016133a8565b815181106122635761226361348c565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461229157826000612295565b6000835b91509150600060028a516122a99190613401565b88106122b557886122e2565b6000546122e2906001600160a01b0316878c6122d28c60026133a8565b815181106107e1576107e161348c565b6000549091506122fc906001600160a01b03168888612014565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612339576020820181803683370190505b506040518563ffffffff1660e01b81526004016123599493929190613358565b600060405180830381600087803b15801561237357600080fd5b505af1158015612387573d6000803e3d6000fd5b5050505050505050505050808061239d9061345b565b9150506121da565b50505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916124079190613228565b6000604051808303816000865af19150503d8060008114612444576040519150601f19603f3d011682016040523d82523d6000602084013e612449565b606091505b5091509150818015612473575080511580612473575080806020019051810190612473919061302c565b6124d55760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b60648201526084016103df565b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040516125069190613228565b60006040518083038185875af1925050503d8060008114612543576040519150601f19603f3d011682016040523d82523d6000602084013e612548565b606091505b50509050806125d25760405162461bcd60e51b815260206004820152604a60248201527f5472616e7366657248656c7065723a3a736166655472616e736665724e61746960448201527f766543757272656e63793a204e617469766543757272656e6379207472616e7360648201526919995c8819985a5b195960b21b608482015260a4016103df565b505050565b6000805460405163e6a4390560e01b81526001600160a01b03898116600483015288811660248301528392839291169063e6a439059060440160206040518083038186803b15801561262857600080fd5b505afa15801561263c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126609190612dda565b6001600160a01b031614156126f8576000546040516364e329cb60e11b81526001600160a01b038a8116600483015289811660248301529091169063c9c6539690604401602060405180830381600087803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f69190612dda565b505b600080548190612712906001600160a01b03168b8b6129c3565b91509150816000148015612724575080155b1561273457879350869250612819565b6000612741898484612b9b565b90508781116127a5578581101561279a5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f315f414d4f554e5400000060448201526064016103df565b889450925082612817565b60006127b2898486612b9b565b9050898111156127c157600080fd5b878110156128115760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f305f414d4f554e5400000060448201526064016103df565b94508793505b505b5050965096945050505050565b600080826001600160a01b0316846001600160a01b0316141561288b5760405162461bcd60e51b815260206004820152601b60248201527f48656c7065723a204944454e544943414c5f414444524553534553000000000060448201526064016103df565b826001600160a01b0316846001600160a01b0316106128ab5782846128ae565b83835b90925090506001600160a01b0382166129005760405162461bcd60e51b815260206004820152601460248201527348656c7065723a205a45524f5f4144445245535360601b60448201526064016103df565b9250929050565b600081158061292b5750828261291d81836133e2565b925061292990836133c0565b145b6103b65760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b60448201526064016103df565b60008261297b83826133a8565b91508110156103b65760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b60448201526064016103df565b60008060006129d28585612826565b5090506000806129e3888888612014565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612a1b57600080fd5b505afa158015612a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a53919061304e565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614612a8a578082612a8d565b81815b90999098509650505050505050565b6000808411612af85760405162461bcd60e51b815260206004820152602260248201527f48656c7065723a20494e53554646494349454e545f4f55545055545f414d4f55604482015261139560f21b60648201526084016103df565b600083118015612b085750600082115b612b545760405162461bcd60e51b815260206004820152601e60248201527f48656c7065723a20494e53554646494349454e545f4c4951554944495459000060448201526064016103df565b6000612b6c6103e8612b668688612907565b90612907565b90506000612b806103e5612b668689612c4c565b9050612b916001611cfd83856133c0565b9695505050505050565b6000808411612be25760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b60448201526064016103df565b600083118015612bf25750600082115b612c375760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b60448201526064016103df565b82612c428584612907565b61039191906133c0565b600082612c598382613401565b91508111156103b65760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b60448201526064016103df565b8035612cad816134b8565b919050565b60008083601f840112612cc457600080fd5b50813567ffffffffffffffff811115612cdc57600080fd5b6020830191508360208260051b850101111561290057600080fd5b600082601f830112612d0857600080fd5b8135602067ffffffffffffffff80831115612d2557612d256134a2565b8260051b604051601f19603f83011681018181108482111715612d4a57612d4a6134a2565b60405284815283810192508684018288018501891015612d6957600080fd5b600092505b85831015612d9357612d7f81612ca2565b845292840192600192909201918401612d6e565b50979650505050505050565b80516001600160701b0381168114612cad57600080fd5b600060208284031215612dc857600080fd5b8135612dd3816134b8565b9392505050565b600060208284031215612dec57600080fd5b8151612dd3816134b8565b600080600080600080600060e0888a031215612e1257600080fd5b8735612e1d816134b8565b96506020880135612e2d816134b8565b955060408801359450606088013593506080880135925060a0880135612e52816134b8565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215612e8657600080fd5b8835612e91816134b8565b97506020890135612ea1816134b8565b965060408901359550606089013594506080890135935060a0890135925060c0890135612ecd816134b8565b8092505060e089013590509295985092959890939650565b60008060008060008060c08789031215612efe57600080fd5b8635612f09816134b8565b95506020870135945060408701359350606087013592506080870135612f2e816134b8565b8092505060a087013590509295509295509295565b60008060008060008060008060e0898b031215612f5f57600080fd5b883567ffffffffffffffff811115612f7657600080fd5b612f828b828c01612cb2565b9099509750506020890135955060408901359450606089013593506080890135925060a0890135612fb2816134b8565b8092505060c089013590509295985092959890939650565b60008060008060008060c08789031215612fe357600080fd5b863567ffffffffffffffff811115612ffa57600080fd5b61300689828a01612cf7565b9650506020870135945060408701359350606087013592506080870135612f2e816134b8565b60006020828403121561303e57600080fd5b81518015158114612dd357600080fd5b60008060006060848603121561306357600080fd5b61306c84612d9f565b925061307a60208501612d9f565b9150604084015163ffffffff8116811461309357600080fd5b809150509250925092565b6000602082840312156130b057600080fd5b5051919050565b6000806000806000608086880312156130cf57600080fd5b85359450602086013567ffffffffffffffff8111156130ed57600080fd5b6130f988828901612cb2565b909550935050604086013561310d816134b8565b949793965091946060013592915050565b6000806040838503121561313157600080fd5b82359150602083013567ffffffffffffffff81111561314f57600080fd5b61315b85828601612cf7565b9150509250929050565b6000806040838503121561317857600080fd5b505080516020909101519092909150565b60008060008060008060a087890312156131a257600080fd5b8635955060208701359450604087013567ffffffffffffffff8111156131c757600080fd5b6131d389828a01612cb2565b90955093505060608701356131e7816134b8565b80925050608087013590509295509295509295565b60008060006060848603121561321157600080fd5b505081359360208301359350604090920135919050565b6000825161323a818460208701613418565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561327c57835183529284019291840191600101613260565b50909695505050505050565b6020808252601490820152730a4deeae8cae47440929cac82989288bea082a8960631b604082015260600190565b6020808252601e908201527f526f757465723a204558434553534956455f494e5055545f414d4f554e540000604082015260600190565b6020808252600f908201526e149bdd5d195c8e8811561412549151608a1b604082015260600190565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526133918160a0850160208701613418565b601f01601f19169190910160a00195945050505050565b600082198211156133bb576133bb613476565b500190565b6000826133dd57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156133fc576133fc613476565b500290565b60008282101561341357613413613476565b500390565b60005b8381101561343357818101518382015260200161341b565b838111156123a55750506000910152565b60008161345357613453613476565b506000190190565b600060001982141561346f5761346f613476565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146134cd57600080fd5b5056fea2646970667358221220bce3c73cb5f7f3f2d04b4c2cc5aa2cdc7c884373ef771f57c5ec3465f58ab89a64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c80639be7614d11610095578063cd1bd0d911610064578063cd1bd0d9146102f1578063d06ca61f14610304578063dcff1b9414610324578063e8e3370014610344578063f85b7c8b1461036457600080fd5b80639be7614d1461027e578063b1ea829214610291578063baa2abde146102b1578063c45a0155146102d157600080fd5b8063419591ed116100dc578063419591ed146101e5578063686589671461021d57806385f8c259146101305780638803dbee1461024b578063937ca0da1461026b57600080fd5b8063054d50d4146101305780631f00ca741461016357806338ed173914610190578063403bf1f2146101b057600080fd5b3661012b576001546001600160a01b0316331461012957600080fd5b005b600080fd5b34801561013c57600080fd5b5061015061014b3660046131fc565b610384565b6040519081526020015b60405180910390f35b34801561016f57600080fd5b5061018361017e36600461311e565b610399565b60405161015a9190613244565b34801561019c57600080fd5b506101836101ab366004613189565b6103bc565b3480156101bc57600080fd5b506101d06101cb366004612ee5565b610576565b6040805192835260208301919091520161015a565b3480156101f157600080fd5b50600154610205906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b61023061022b366004612fca565b61063a565b6040805193845260208401929092529082015260600161015a565b34801561025757600080fd5b50610183610266366004613189565b610c05565b610230610279366004612ee5565b610cae565b61018361028c3660046130b7565b610ebd565b34801561029d57600080fd5b506101506102ac366004612f43565b6111c8565b3480156102bd57600080fd5b506101d06102cc366004612df7565b6112fe565b3480156102dd57600080fd5b50600054610205906001600160a01b031681565b6101836102ff3660046130b7565b61152f565b34801561031057600080fd5b5061018361031f36600461311e565b6117c8565b34801561033057600080fd5b5061018361033f366004613189565b6117e2565b34801561035057600080fd5b5061023061035f366004612e69565b611a0d565b34801561037057600080fd5b5061018361037f366004613189565b611b07565b6000610391848484611c16565b949350505050565b6000546060906103b3906001600160a01b03168484611d1a565b90505b92915050565b606081428110156103e85760405162461bcd60e51b81526004016103df906132ed565b60405180910390fd5b6000546040805160208089028281018201909352888252610432936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611ea792505050565b91508682600184516104449190613401565b815181106104545761045461348c565b6020026020010151101561047a5760405162461bcd60e51b81526004016103df90613316565b61052c868660008181106104905761049061348c565b90506020020160208101906104a59190612db6565b60008054339161050c916001600160a01b0316908b908b90816104ca576104ca61348c565b90506020020160208101906104df9190612db6565b8b8b60018181106104f2576104f261348c565b90506020020160208101906105079190612db6565b612014565b8560008151811061051f5761051f61348c565b6020026020010151612099565b61056b828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506121d7915050565b509695505050505050565b600080824281101561059a5760405162461bcd60e51b81526004016103df906132ed565b6001546105b6908a906001600160a01b03168a8a8a308a6112fe565b90935091506105c68986856123ab565b600154604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b5050505061062e85836124dc565b50965096945050505050565b600080600083428110156106605760405162461bcd60e51b81526004016103df906132ed565b6001548a516001600160a01b03909116908b906000906106825761068261348c565b60200260200101516001600160a01b0316146106b05760405162461bcd60e51b81526004016103df90613288565b600080546106c8906001600160a01b03168b8d611d1a565b905034816000815181106106de576106de61348c565b602002602001015111156107045760405162461bcd60e51b81526004016103df906132b6565b60015481516001600160a01b039091169063d0e30db090839060009061072c5761072c61348c565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561075f57600080fd5b505af1158015610773573d6000803e3d6000fd5b5050505050600160009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb6107ee60008054906101000a90046001600160a01b03168e6000815181106107c6576107c661348c565b60200260200101518f6001815181106107e1576107e161348c565b6020026020010151612014565b836000815181106108015761080161348c565b60200260200101516040518363ffffffff1660e01b815260040161083a9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561085457600080fd5b505af1158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c919061302c565b61089557600080fd5b6108a0818c896121d7565b88816000815181106108b4576108b461348c565b602002602001015111156109205760405162461bcd60e51b815260206004820152602d60248201527f6e6f7420616c6c6f7720626967676572207468616e206e61746976654375727260448201526c0cadcc6f2a6eec2e092dc9ac2f609b1b60648201526084016103df565b60008b60018d516109319190613401565b815181106109415761094161348c565b602002602001015190506000826000815181106109605761096061348c565b6020026020010151346109739190613401565b90506109e482600160009054906101000a90046001600160a01b0316856001875161099e9190613401565b815181106109ae576109ae61348c565b60200260200101518487600189516109c69190613401565b815181106109d6576109d661348c565b60200260200101518f6125d7565b60008054600154939a5091985091610a0a916001600160a01b0390811691869116612014565b9050610a188333838b612099565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505060015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018d9052909116935063a9059cbb92506044019050602060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b08919061302c565b610b1157600080fd5b6040516335313c2160e11b81526001600160a01b038b81166004830152821690636a62784290602401602060405180830381600087803b158015610b5457600080fd5b505af1158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c919061309e565b955083600081518110610ba157610ba161348c565b602002602001015187610bb491906133a8565b341115610bf457610bf43385600081518110610bd257610bd261348c565b602002602001015189610be591906133a8565b610bef9034613401565b6124dc565b505050505096509650969350505050565b60608142811015610c285760405162461bcd60e51b81526004016103df906132ed565b6000546040805160208089028281018201909352888252610c72936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611d1a92505050565b91508682600081518110610c8857610c8861348c565b6020026020010151111561047a5760405162461bcd60e51b81526004016103df906132b6565b60008060008342811015610cd45760405162461bcd60e51b81526004016103df906132ed565b600154610cef908b906001600160a01b03168b348c8c6125d7565b6000805460015493975091955091610d15916001600160a01b03908116918e9116612014565b9050610d238b338388612099565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b505060015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018a9052909116935063a9059cbb92506044019050602060405180830381600087803b158015610ddb57600080fd5b505af1158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e13919061302c565b610e1c57600080fd5b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a62784290602401602060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e97919061309e565b925083341115610eaf57610eaf33610bef8634613401565b505096509650969350505050565b60608142811015610ee05760405162461bcd60e51b81526004016103df906132ed565b6001546001600160a01b03168686600081610efd57610efd61348c565b9050602002016020810190610f129190612db6565b6001600160a01b031614610f385760405162461bcd60e51b81526004016103df90613288565b6000546040805160208089028281018201909352888252610f82936001600160a01b0316928b92918b918b91829190850190849080828437600092019190915250611d1a92505050565b91503482600081518110610f9857610f9861348c565b60200260200101511115610fbe5760405162461bcd60e51b81526004016103df906132b6565b60015482516001600160a01b039091169063d0e30db0908490600090610fe657610fe661348c565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561101957600080fd5b505af115801561102d573d6000803e3d6000fd5b5050600154600080546001600160a01b03928316955063a9059cbb945061108c9350909116908a908a90816110645761106461348c565b90506020020160208101906110799190612db6565b8a8a60018181106104f2576104f261348c565b8460008151811061109f5761109f61348c565b60200260200101516040518363ffffffff1660e01b81526004016110d89291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a919061302c565b61113357600080fd5b611172828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506121d7915050565b816000815181106111855761118561348c565b60200260200101513411156111be576111be33836000815181106111ab576111ab61348c565b602002602001015134610bef9190613401565b5095945050505050565b600081428110156111eb5760405162461bcd60e51b81526004016103df906132ed565b60008a8a60008181106112005761120061348c565b90506020020160208101906112159190612db6565b905060008b8b611226600182613401565b8181106112355761123561348c565b905060200201602081019061124a9190612db6565b9050600061125c8a8a8f8f8b8b610c05565b90506000816000815181106112735761127361348c565b60200260200101518c6112869190613401565b90506112e48385846001865161129c9190613401565b815181106112ac576112ac61348c565b60200260200101518486600188516112c49190613401565b815181106112d4576112d461348c565b60200260200101518e8e8e611a0d565b909150905080965050505050505098975050505050505050565b60008082428110156113225760405162461bcd60e51b81526004016103df906132ed565b6000805461133a906001600160a01b03168c8c612014565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd90606401602060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c3919061302c565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb44906024016040805180830381600087803b15801561140b57600080fd5b505af115801561141f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114439190613165565b9150915060006114538e8e612826565b5090508d6001600160a01b0316816001600160a01b031614611476578183611479565b82825b90975095508a8710156114ce5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f305f414d4f554e5400000060448201526064016103df565b8986101561151e5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f315f414d4f554e5400000060448201526064016103df565b505050505097509795505050505050565b606081428110156115525760405162461bcd60e51b81526004016103df906132ed565b6001546001600160a01b0316868660008161156f5761156f61348c565b90506020020160208101906115849190612db6565b6001600160a01b0316146115aa5760405162461bcd60e51b81526004016103df90613288565b60005460408051602080890282810182019093528882526115f4936001600160a01b0316923492918b918b91829190850190849080828437600092019190915250611ea792505050565b91508682600184516116069190613401565b815181106116165761161661348c565b6020026020010151101561163c5760405162461bcd60e51b81526004016103df90613316565b60015482516001600160a01b039091169063d0e30db09084906000906116645761166461348c565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b5050600154600080546001600160a01b03928316955063a9059cbb94506116e29350909116908a908a90816110645761106461348c565b846000815181106116f5576116f561348c565b60200260200101516040518363ffffffff1660e01b815260040161172e9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561174857600080fd5b505af115801561175c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611780919061302c565b61178957600080fd5b6111be828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506121d7915050565b6000546060906103b3906001600160a01b03168484611ea7565b606081428110156118055760405162461bcd60e51b81526004016103df906132ed565b600180546001600160a01b031690879087906118219082613401565b8181106118305761183061348c565b90506020020160208101906118459190612db6565b6001600160a01b03161461186b5760405162461bcd60e51b81526004016103df90613288565b60005460408051602080890282810182019093528882526118b5936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611ea792505050565b91508682600184516118c79190613401565b815181106118d7576118d761348c565b602002602001015110156118fd5760405162461bcd60e51b81526004016103df90613316565b611913868660008181106104905761049061348c565b611952828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506121d7915050565b6001805483516001600160a01b0390911691632e1a7d4d91859161197591613401565b815181106119855761198561348c565b60200260200101516040518263ffffffff1660e01b81526004016119ab91815260200190565b600060405180830381600087803b1580156119c557600080fd5b505af11580156119d9573d6000803e3d6000fd5b5050505061056b8483600185516119f09190613401565b81518110611a0057611a0061348c565b60200260200101516124dc565b60008060008342811015611a335760405162461bcd60e51b81526004016103df906132ed565b611a418c8c8c8c8c8c6125d7565b6000805492965090945090611a60906001600160a01b03168e8e612014565b9050611a6e8d338388612099565b611a7a8c338387612099565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a62784290602401602060405180830381600087803b158015611abd57600080fd5b505af1158015611ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af5919061309e565b92505050985098509895505050505050565b60608142811015611b2a5760405162461bcd60e51b81526004016103df906132ed565b600180546001600160a01b03169087908790611b469082613401565b818110611b5557611b5561348c565b9050602002016020810190611b6a9190612db6565b6001600160a01b031614611b905760405162461bcd60e51b81526004016103df90613288565b6000546040805160208089028281018201909352888252611bda936001600160a01b0316928c92918b918b91829190850190849080828437600092019190915250611d1a92505050565b91508682600081518110611bf057611bf061348c565b602002602001015111156118fd5760405162461bcd60e51b81526004016103df906132b6565b6000808411611c715760405162461bcd60e51b815260206004820152602160248201527f48656c7065723a20494e53554646494349454e545f494e5055545f414d4f554e6044820152601560fa1b60648201526084016103df565b600083118015611c815750600082115b611ccd5760405162461bcd60e51b815260206004820152601e60248201527f48656c7065723a20494e53554646494349454e545f4c4951554944495459000060448201526064016103df565b6000611cdb856103e5612907565b90506000611ce98285612907565b90506000611d0383611cfd886103e8612907565b9061296e565b9050611d0f81836133c0565b979650505050505050565b6060600282511015611d655760405162461bcd60e51b8152602060048201526014602482015273090cad8e0cae47440929cac82989288bea082a8960631b60448201526064016103df565b815167ffffffffffffffff811115611d7f57611d7f6134a2565b604051908082528060200260200182016040528015611da8578160200160208202803683370190505b509050828160018351611dbb9190613401565b81518110611dcb57611dcb61348c565b602002602001018181525050600060018351611de79190613401565b90505b8015611e9f57600080611e3a8786611e03600187613401565b81518110611e1357611e1361348c565b6020026020010151878681518110611e2d57611e2d61348c565b60200260200101516129c3565b91509150611e62848481518110611e5357611e5361348c565b60200260200101518383612a9c565b84611e6e600186613401565b81518110611e7e57611e7e61348c565b60200260200101818152505050508080611e9790613444565b915050611dea565b509392505050565b6060600282511015611ef25760405162461bcd60e51b8152602060048201526014602482015273090cad8e0cae47440929cac82989288bea082a8960631b60448201526064016103df565b815167ffffffffffffffff811115611f0c57611f0c6134a2565b604051908082528060200260200182016040528015611f35578160200160208202803683370190505b5090508281600081518110611f4c57611f4c61348c565b60200260200101818152505060005b60018351611f699190613401565b811015611e9f57600080611faf87868581518110611f8957611f8961348c565b602002602001015187866001611f9f91906133a8565b81518110611e2d57611e2d61348c565b91509150611fd7848481518110611fc857611fc861348c565b60200260200101518383611c16565b84611fe38560016133a8565b81518110611ff357611ff361348c565b6020026020010181815250505050808061200c9061345b565b915050611f5b565b60405163e6a4390560e01b81526001600160a01b03838116600483015282811660248301526000919085169063e6a439059060440160206040518083038186803b15801561206157600080fd5b505afa158015612075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103919190612dda565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916120fd9190613228565b6000604051808303816000865af19150503d806000811461213a576040519150601f19603f3d011682016040523d82523d6000602084013e61213f565b606091505b5091509150818015612169575080511580612169575080806020019051810190612169919061302c565b6121cf5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b60648201526084016103df565b505050505050565b60005b600183516121e89190613401565b8110156123a5576000808483815181106122045761220461348c565b60200260200101518584600161221a91906133a8565b8151811061222a5761222a61348c565b60200260200101519150915060006122428383612826565b5090506000876122538660016133a8565b815181106122635761226361348c565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461229157826000612295565b6000835b91509150600060028a516122a99190613401565b88106122b557886122e2565b6000546122e2906001600160a01b0316878c6122d28c60026133a8565b815181106107e1576107e161348c565b6000549091506122fc906001600160a01b03168888612014565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612339576020820181803683370190505b506040518563ffffffff1660e01b81526004016123599493929190613358565b600060405180830381600087803b15801561237357600080fd5b505af1158015612387573d6000803e3d6000fd5b5050505050505050505050808061239d9061345b565b9150506121da565b50505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916124079190613228565b6000604051808303816000865af19150503d8060008114612444576040519150601f19603f3d011682016040523d82523d6000602084013e612449565b606091505b5091509150818015612473575080511580612473575080806020019051810190612473919061302c565b6124d55760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b60648201526084016103df565b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040516125069190613228565b60006040518083038185875af1925050503d8060008114612543576040519150601f19603f3d011682016040523d82523d6000602084013e612548565b606091505b50509050806125d25760405162461bcd60e51b815260206004820152604a60248201527f5472616e7366657248656c7065723a3a736166655472616e736665724e61746960448201527f766543757272656e63793a204e617469766543757272656e6379207472616e7360648201526919995c8819985a5b195960b21b608482015260a4016103df565b505050565b6000805460405163e6a4390560e01b81526001600160a01b03898116600483015288811660248301528392839291169063e6a439059060440160206040518083038186803b15801561262857600080fd5b505afa15801561263c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126609190612dda565b6001600160a01b031614156126f8576000546040516364e329cb60e11b81526001600160a01b038a8116600483015289811660248301529091169063c9c6539690604401602060405180830381600087803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f69190612dda565b505b600080548190612712906001600160a01b03168b8b6129c3565b91509150816000148015612724575080155b1561273457879350869250612819565b6000612741898484612b9b565b90508781116127a5578581101561279a5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f315f414d4f554e5400000060448201526064016103df565b889450925082612817565b60006127b2898486612b9b565b9050898111156127c157600080fd5b878110156128115760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f305f414d4f554e5400000060448201526064016103df565b94508793505b505b5050965096945050505050565b600080826001600160a01b0316846001600160a01b0316141561288b5760405162461bcd60e51b815260206004820152601b60248201527f48656c7065723a204944454e544943414c5f414444524553534553000000000060448201526064016103df565b826001600160a01b0316846001600160a01b0316106128ab5782846128ae565b83835b90925090506001600160a01b0382166129005760405162461bcd60e51b815260206004820152601460248201527348656c7065723a205a45524f5f4144445245535360601b60448201526064016103df565b9250929050565b600081158061292b5750828261291d81836133e2565b925061292990836133c0565b145b6103b65760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b60448201526064016103df565b60008261297b83826133a8565b91508110156103b65760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b60448201526064016103df565b60008060006129d28585612826565b5090506000806129e3888888612014565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612a1b57600080fd5b505afa158015612a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a53919061304e565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614612a8a578082612a8d565b81815b90999098509650505050505050565b6000808411612af85760405162461bcd60e51b815260206004820152602260248201527f48656c7065723a20494e53554646494349454e545f4f55545055545f414d4f55604482015261139560f21b60648201526084016103df565b600083118015612b085750600082115b612b545760405162461bcd60e51b815260206004820152601e60248201527f48656c7065723a20494e53554646494349454e545f4c4951554944495459000060448201526064016103df565b6000612b6c6103e8612b668688612907565b90612907565b90506000612b806103e5612b668689612c4c565b9050612b916001611cfd83856133c0565b9695505050505050565b6000808411612be25760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b60448201526064016103df565b600083118015612bf25750600082115b612c375760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b60448201526064016103df565b82612c428584612907565b61039191906133c0565b600082612c598382613401565b91508111156103b65760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b60448201526064016103df565b8035612cad816134b8565b919050565b60008083601f840112612cc457600080fd5b50813567ffffffffffffffff811115612cdc57600080fd5b6020830191508360208260051b850101111561290057600080fd5b600082601f830112612d0857600080fd5b8135602067ffffffffffffffff80831115612d2557612d256134a2565b8260051b604051601f19603f83011681018181108482111715612d4a57612d4a6134a2565b60405284815283810192508684018288018501891015612d6957600080fd5b600092505b85831015612d9357612d7f81612ca2565b845292840192600192909201918401612d6e565b50979650505050505050565b80516001600160701b0381168114612cad57600080fd5b600060208284031215612dc857600080fd5b8135612dd3816134b8565b9392505050565b600060208284031215612dec57600080fd5b8151612dd3816134b8565b600080600080600080600060e0888a031215612e1257600080fd5b8735612e1d816134b8565b96506020880135612e2d816134b8565b955060408801359450606088013593506080880135925060a0880135612e52816134b8565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215612e8657600080fd5b8835612e91816134b8565b97506020890135612ea1816134b8565b965060408901359550606089013594506080890135935060a0890135925060c0890135612ecd816134b8565b8092505060e089013590509295985092959890939650565b60008060008060008060c08789031215612efe57600080fd5b8635612f09816134b8565b95506020870135945060408701359350606087013592506080870135612f2e816134b8565b8092505060a087013590509295509295509295565b60008060008060008060008060e0898b031215612f5f57600080fd5b883567ffffffffffffffff811115612f7657600080fd5b612f828b828c01612cb2565b9099509750506020890135955060408901359450606089013593506080890135925060a0890135612fb2816134b8565b8092505060c089013590509295985092959890939650565b60008060008060008060c08789031215612fe357600080fd5b863567ffffffffffffffff811115612ffa57600080fd5b61300689828a01612cf7565b9650506020870135945060408701359350606087013592506080870135612f2e816134b8565b60006020828403121561303e57600080fd5b81518015158114612dd357600080fd5b60008060006060848603121561306357600080fd5b61306c84612d9f565b925061307a60208501612d9f565b9150604084015163ffffffff8116811461309357600080fd5b809150509250925092565b6000602082840312156130b057600080fd5b5051919050565b6000806000806000608086880312156130cf57600080fd5b85359450602086013567ffffffffffffffff8111156130ed57600080fd5b6130f988828901612cb2565b909550935050604086013561310d816134b8565b949793965091946060013592915050565b6000806040838503121561313157600080fd5b82359150602083013567ffffffffffffffff81111561314f57600080fd5b61315b85828601612cf7565b9150509250929050565b6000806040838503121561317857600080fd5b505080516020909101519092909150565b60008060008060008060a087890312156131a257600080fd5b8635955060208701359450604087013567ffffffffffffffff8111156131c757600080fd5b6131d389828a01612cb2565b90955093505060608701356131e7816134b8565b80925050608087013590509295509295509295565b60008060006060848603121561321157600080fd5b505081359360208301359350604090920135919050565b6000825161323a818460208701613418565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561327c57835183529284019291840191600101613260565b50909695505050505050565b6020808252601490820152730a4deeae8cae47440929cac82989288bea082a8960631b604082015260600190565b6020808252601e908201527f526f757465723a204558434553534956455f494e5055545f414d4f554e540000604082015260600190565b6020808252600f908201526e149bdd5d195c8e8811561412549151608a1b604082015260600190565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526133918160a0850160208701613418565b601f01601f19169190910160a00195945050505050565b600082198211156133bb576133bb613476565b500190565b6000826133dd57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156133fc576133fc613476565b500290565b60008282101561341357613413613476565b500390565b60005b8381101561343357818101518382015260200161341b565b838111156123a55750506000910152565b60008161345357613453613476565b506000190190565b600060001982141561346f5761346f613476565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146134cd57600080fd5b5056fea2646970667358221220bce3c73cb5f7f3f2d04b4c2cc5aa2cdc7c884373ef771f57c5ec3465f58ab89a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12785,
        "contract": "contracts/periphery/Router.sol:Router",
        "label": "factory",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12788,
        "contract": "contracts/periphery/Router.sol:Router",
        "label": "WNativeCurrency",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}