{
  "language": "Solidity",
  "sources": {
    "contracts/universal-router/modules/FeeSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {SafeTransferLib} from 'lib/solmate/src/utils/SafeTransferLib.sol';\nimport {IWETH} from \"../interfaces/IWETH.sol\";\nimport {IReferralStorage} from \"../../referrals/interfaces/IReferralStorage.sol\";\nimport {AdminUpgradeable} from \"../../libraries/AdminUpgradeable.sol\";\nimport {IFeeSettlement} from \"../interfaces/IFeeSettlement.sol\";\nimport {Constants} from \"../../libraries/Constants.sol\";\n\ncontract FeeSettlement is IFeeSettlement, ReentrancyGuard, AdminUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeTransferLib for address;\n\n    address public immutable weth;\n\n    uint256 public constant BASIS_POINTS = 10000;\n    uint256 public constant MAX_FEE_POINTS = 30; // 0.3%\n\n    IReferralStorage public referralStorage;\n    uint256 public feeShare; // e.g. 10 for 0.1%\n    uint256 public feeDiscount; // e.g. 2000 for 20%\n    uint256 public feeRebate; // e.g. 5000 for 50%/50%, 2500 for 75% fee/25% rebate\n    address public feeTo;\n\n    error InvalidFeeShare();\n    error InvalidFeeDiscount();\n    error InvalidFeeRebate();\n    error InsufficientOutAmount();\n\n    event PayRebates(\n        address trader,\n        address referrer,\n        address tokenOut,\n        uint256 discountAmount,\n        uint256 rebateAmount\n    );\n    event SetReferralStorage(IReferralStorage referralStorage);\n    event SetFeeShare(uint256 feeShare);\n    event SetFeeDiscount(uint256 feeDiscount);\n    event SetFeeRebate(uint256 feeRebate);\n    event SetFeeTo(address feeTo);\n\n    constructor(\n        address _weth, \n        IReferralStorage _referralStorage,\n        uint256 _feeShare,\n        uint256 _feeDiscount,\n        uint256 _feeRebate,\n        address _feeTo\n    ) {\n        weth = _weth;\n        referralStorage = _referralStorage;\n\n        if (_feeShare > MAX_FEE_POINTS) revert InvalidFeeShare();\n        if (_feeDiscount > BASIS_POINTS) revert InvalidFeeDiscount();\n        if (_feeRebate > BASIS_POINTS) revert InvalidFeeRebate();\n        feeShare = _feeShare;\n        feeDiscount = _feeDiscount;\n        feeRebate = _feeRebate;\n        feeTo = _feeTo;\n        _initializeAdmin(msg.sender);\n    }\n\n    /// @notice To receive ETH from router\n    receive() external payable {}\n\n    /// @notice Executes the fee settlement, including pay referrer rebates\n    /// @param tokenOut Address of the output token\n    /// @param amountOutMin Minimum amount of the output token\n    /// @param from Trader address\n    /// @param to Receiver address\n    function processSettlement(\n        address tokenOut,\n        uint256 amountOutMin,\n        address from,\n        address to\n    ) external override nonReentrant {\n        bool isNative = tokenOut == Constants.NATIVE_ADDRESS;\n        uint256 amount = isNative \n            ? address(this).balance \n            : IERC20(tokenOut).balanceOf(address(this));\n        if (amount < amountOutMin) revert InsufficientOutAmount();\n        (, address referrer) = referralStorage.getReferralInfo(from);\n        uint256 basisfee = (amount * feeShare) / BASIS_POINTS;\n        uint256 fee = referrer == address(0) \n            ? basisfee\n            : (basisfee * (BASIS_POINTS - feeDiscount)) / BASIS_POINTS;\n        if (amount - fee < amountOutMin) {\n            // ensure that fee do not cause the transaction to fail \n            fee = amount - amountOutMin;\n        }\n        if (referrer != address(0)) {\n            uint256 rebateAmount = (fee * feeRebate) / BASIS_POINTS;\n            if (isNative) {\n                IWETH(weth).deposit{value: fee}();\n                IERC20(weth).safeTransfer(referrer, rebateAmount);\n                IERC20(weth).safeTransfer(feeTo, IERC20(weth).balanceOf(address(this)));\n            } else {\n                IERC20(tokenOut).safeTransfer(referrer, rebateAmount);\n                IERC20(tokenOut).safeTransfer(feeTo, fee - rebateAmount);\n            }\n            emit PayRebates(from, referrer, tokenOut, basisfee - fee, rebateAmount);\n        } else {\n            if (isNative) {\n                IWETH(weth).deposit{value: fee}();\n                IERC20(weth).safeTransfer(feeTo, IERC20(weth).balanceOf(address(this)));\n            } else {\n                IERC20(tokenOut).safeTransfer(feeTo, fee);\n            }\n        }\n        if (isNative) {\n            to.safeTransferETH(amount - fee);\n        } else {\n            IERC20(tokenOut).safeTransfer(to, amount - fee);\n        }\n    }\n\n    // @notice Set referralStorage by admin\n    /// @param _referralStorage ReferralStorage address\n    function setReferralStorage(IReferralStorage _referralStorage) external onlyAdmin {\n        referralStorage = _referralStorage;\n        emit SetReferralStorage(_referralStorage);\n    }\n\n    /// @notice Set feeShare by admin\n    /// @param _feeShare Percent of fee\n    function setFeeShare(uint256 _feeShare) external onlyAdmin {\n        if (_feeShare > MAX_FEE_POINTS) revert InvalidFeeShare();\n        feeShare = _feeShare;\n        emit SetFeeShare(_feeShare);\n    }\n\n    /// @notice Set feeDicount by admin\n    /// @param _feeDiscount Percent of feeDiscount\n    function setFeeDiscount(uint256 _feeDiscount) external onlyAdmin {\n        if (_feeDiscount > BASIS_POINTS) revert InvalidFeeDiscount();\n        feeDiscount = _feeDiscount;\n        emit SetFeeDiscount(_feeDiscount);\n    }\n\n    /// @notice Set feeRebate by admin\n    /// @param _feeRebate Percent of feeRebate\n    function setFeeRebate(uint256 _feeRebate) external onlyAdmin {\n        if (_feeRebate > BASIS_POINTS) revert InvalidFeeRebate();\n        feeRebate = _feeRebate;\n        emit SetFeeRebate(_feeRebate);\n    }\n\n    /// @notice Set feeTo by admin\n    /// @param _feeTo FeeTo address\n    function setFeeTo(address _feeTo) external onlyAdmin {\n        feeTo = _feeTo;\n        emit SetFeeTo(_feeTo);\n    }\n}\n"
    },
    "contracts/universal-router/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/referrals/interfaces/IReferralStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IReferralStorage {\n    function codeOwners(bytes32 _code) external view returns (address);\n    function getReferralInfo(address _account) external view returns (bytes32, address);\n    function getOwnedCodes(address _account) external view returns (bytes32[] memory);\n    function setReferralCodeByUser(bytes32 _code) external;\n}\n"
    },
    "contracts/libraries/AdminUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nabstract contract AdminUpgradeable {\n    address public admin;\n    address public adminCandidate;\n\n    function _initializeAdmin(address _admin) internal {\n        require(admin == address(0), \"admin already set\");\n\n        admin = _admin;\n    }\n\n    function candidateConfirm() external {\n        require(msg.sender == adminCandidate, \"not Candidate\");\n        emit AdminChanged(admin, adminCandidate);\n\n        admin = adminCandidate;\n        adminCandidate = address(0);\n    }\n\n    function setAdminCandidate(address _candidate) external onlyAdmin {\n        adminCandidate = _candidate;\n        emit Candidate(_candidate);\n    }\n\n    modifier onlyAdmin {\n        require(msg.sender == admin, \"not admin\");\n        _;\n    }\n\n    event Candidate(address indexed newAdmin);\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\n}"
    },
    "contracts/universal-router/interfaces/IFeeSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IFeeSettlement {\n    function processSettlement(address tokenOut, uint256 amountOutMin, address from, address to) external;\n}\n"
    },
    "contracts/libraries/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary Constants {\n    /// @dev Used as a flag for identifying the transfer of ETH instead of a token\n    address internal constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Used as a impossible pool address\n    address internal constant IMPOSSIBLE_POOL_ADDRESS = 0x0000000000000000000000000000000000000001;\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n}\n"
    },
    "lib/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "lib/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/universal-router/UniversalRouter2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {InputStream} from './InputStream.sol';\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {SafeTransferLib} from 'lib/solmate/src/utils/SafeTransferLib.sol';\nimport {IPair} from \"../core/interfaces/IPair.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\nimport {IStableSwapDispatcher} from \"./interfaces/IStableSwapDispatcher.sol\";\nimport {IFeeSettlement} from \"./interfaces/IFeeSettlement.sol\" ;\nimport {AdminUpgradeable} from \"../libraries/AdminUpgradeable.sol\";\nimport {Constants} from \"../libraries/Constants.sol\";\nimport {IUniswapV3Pool} from \"./interfaces/uniswap/v3/IUniswapV3Pool.sol\";\n\ncontract UniversalRouter2 is ReentrancyGuard, AdminUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeTransferLib for address;\n    using InputStream for uint256;\n\n    IStableSwapDispatcher public stableSwapDispatcher;\n    IFeeSettlement public feeSettlement;\n    address private lastCalledPool;\n\n    error UnknownCommandCode(uint8 code);\n    error UnknownPoolType(uint8 poolType);\n    error MinimalInputBalanceViolation();\n    error MinimalOutputBalanceViolation();\n    error InvalidPool(address pool);\n    error UnexpectedUniV3Swap();\n\n    event SetStableSwapDispatcher(IStableSwapDispatcher stableSwapDispatcher);\n    event SetFeeSettlement(IFeeSettlement feeSettlement);\n    \n    constructor(\n        IStableSwapDispatcher _stableSwapDispatcher,\n        IFeeSettlement _feeSettlement\n    ) {\n        stableSwapDispatcher = _stableSwapDispatcher;\n        feeSettlement = _feeSettlement;\n        lastCalledPool = Constants.IMPOSSIBLE_POOL_ADDRESS;\n        _initializeAdmin(msg.sender);\n    }\n\n    /// @notice To receive ETH from WETH\n    receive() external payable {}\n\n    /// @notice Set StableSwapDispatcher by admin\n    /// @param _stableSwapDispatcher StableSwapDispatcher address\n    function setStableSwapDispatcher(IStableSwapDispatcher _stableSwapDispatcher) external onlyAdmin {\n        stableSwapDispatcher = _stableSwapDispatcher;\n        emit SetStableSwapDispatcher(_stableSwapDispatcher);\n    }\n\n    /// @notice Set FeeSettlement by admin\n    /// @param _feeSettlement FeeSettlement address\n    function setFeeSettlement(IFeeSettlement _feeSettlement) external onlyAdmin {\n        feeSettlement = _feeSettlement;\n        emit SetFeeSettlement(_feeSettlement);\n    }\n\n    /// @notice Decodes and executes the given route\n    /// @param tokenIn Address of the input token\n    /// @param amountIn Amount of the input token\n    /// @param tokenOut Address of the output token\n    /// @param amountOutMin Minimum amount of the output token\n    /// @param to Receiver address\n    /// @param route The encoded route to execute with\n    /// @return amountOut Actual amount of the output token\n    function processRoute(\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        uint256 amountOutMin,\n        address to,\n        bytes memory route\n    ) external payable nonReentrant returns (uint256 amountOut) {\n        return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\n    }\n\n    function transferValueAndprocessRoute(\n        address transferValueTo,\n        uint256 amountValueTransfer,\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        uint256 amountOutMin,\n        address to,\n        bytes memory route\n    ) external payable nonReentrant returns (uint256 amountOut) {\n        transferValueTo.safeTransferETH(amountValueTransfer);\n        return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\n    }\n\n    /// @notice Decodes and executes the given route\n    /// @param tokenIn Address of the input token\n    /// @param amountIn Amount of the input token\n    /// @param tokenOut Address of the output token\n    /// @param amountOutMin Minimum amount of the output token\n    /// @param to Receiver address\n    /// @param route The encoded route to execute with\n    /// @return amountOut Actual amount of the output token\n    function processRouteInternal(\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        uint256 amountOutMin,\n        address to,\n        bytes memory route\n    ) private returns (uint256 amountOut) {\n        uint256 balanceInInitial = tokenIn == Constants.NATIVE_ADDRESS \n            ? address(this).balance \n            : IERC20(tokenIn).balanceOf(msg.sender);\n        uint256 balanceOutInitial = tokenOut == Constants.NATIVE_ADDRESS \n            ? address(to).balance \n            : IERC20(tokenOut).balanceOf(to);\n\n        uint256 stream = InputStream.createStream(route);\n        while (stream.isNotEmpty()) {\n            uint8 commandCode = stream.readUint8();\n            if (commandCode == 1) _processMyERC20(stream);\n            else if (commandCode == 2) _processUserERC20(stream, amountIn);\n            else if (commandCode == 3) _processNative(stream);\n            else if (commandCode == 4) _processOnePool(stream);\n            else revert UnknownCommandCode(commandCode);\n        }\n\n        uint256 balanceInFinal = tokenIn == Constants.NATIVE_ADDRESS \n            ? address(this).balance \n            : IERC20(tokenIn).balanceOf(msg.sender);\n        if (balanceInFinal + amountIn < balanceInInitial) revert MinimalInputBalanceViolation();\n\n        feeSettlement.processSettlement(tokenOut, amountOutMin, msg.sender, to);\n\n        uint256 balanceOutFinal = tokenOut == Constants.NATIVE_ADDRESS \n            ? address(to).balance \n            : IERC20(tokenOut).balanceOf(to);\n        if (balanceOutFinal < balanceOutInitial + amountOutMin) revert MinimalOutputBalanceViolation();\n\n        amountOut = balanceOutFinal - balanceOutInitial;\n    }\n\n    /// @notice Processes native coin: call swap for all pools that swap from native coin\n    /// @param stream Streamed process program\n    function _processNative(uint256 stream) private {\n        uint256 amountTotal = address(this).balance;\n        _distributeAndSwap(stream, address(this), Constants.NATIVE_ADDRESS, amountTotal);\n    }\n\n    /// @notice Processes ERC20 token from this contract balance:\n    /// @notice Call swap for all pools that swap from this token\n    /// @param stream Streamed process program\n    function _processMyERC20(uint256 stream) private {\n        address token = stream.readAddress();\n        uint256 amountTotal = IERC20(token).balanceOf(address(this));\n        unchecked {\n            if (amountTotal > 0) amountTotal -= 1;     // slot undrain protection\n        }\n        _distributeAndSwap(stream, address(this), token, amountTotal);\n    }\n\n    /// @notice Processes ERC20 token from msg.sender balance:\n    /// @notice Call swap for all pools that swap from this token\n    /// @param stream Streamed process program\n    /// @param amountTotal Amount of tokens to take from msg.sender\n    function _processUserERC20(uint256 stream, uint256 amountTotal) private {\n        address token = stream.readAddress();\n        _distributeAndSwap(stream, msg.sender, token, amountTotal);\n    }\n\n    /// @notice Distributes amountTotal to several pools according to their shares and calls swap for each pool\n    /// @param stream Streamed process program\n    /// @param from Where to take liquidity for swap\n    /// @param tokenIn Input token\n    /// @param amountTotal Total amount of tokenIn for swaps \n    function _distributeAndSwap(\n        uint256 stream, \n        address from, \n        address tokenIn, \n        uint256 amountTotal\n    ) private {\n        uint8 num = stream.readUint8();\n        for (uint256 i = 0; i < num; ++i) {\n            uint16 share = stream.readUint16();\n            uint256 amount = (amountTotal * share) / 65535;\n            amountTotal -= amount;\n            _swap(stream, from, tokenIn, amount);\n        }\n    }\n\n    /// @notice Processes ERC20 token for cases when the token has only one output pool\n    /// @notice In this case liquidity is already at pool balance. This is an optimization\n    /// @notice Call swap for all pools that swap from this token\n    /// @param stream Streamed process program\n    function _processOnePool(uint256 stream) private {\n        address token = stream.readAddress();\n        _swap(stream, address(this), token, 0);\n    }\n\n    /// @notice Makes swap\n    /// @param stream Streamed process program\n    /// @param from Where to take liquidity for swap\n    /// @param tokenIn Input token\n    /// @param amountIn Amount of tokenIn to take for swap\n    function _swap(uint256 stream, address from, address tokenIn, uint256 amountIn) private {\n        uint8 poolType = stream.readUint8();\n        if (poolType == 0) _swapUniV2(stream, from, tokenIn, amountIn);\n        else if (poolType == 1) _swapUniV3(stream, from, tokenIn, amountIn);\n        else if (poolType == 2) _wrapNative(stream, from, tokenIn, amountIn);\n        else if (poolType == 3) _swapStableSwap(stream, from, tokenIn, amountIn);\n        else revert UnknownPoolType(poolType);\n    }\n\n    /// @notice UniswapV2 pool swap\n    /// @param stream [pool, direction, recipient]\n    /// @param from Where to take liquidity for swap\n    /// @param tokenIn Input token\n    /// @param amountIn Amount of tokenIn to take for swap\n    function _swapUniV2(\n        uint256 stream, \n        address from, \n        address tokenIn, \n        uint256 amountIn\n    ) private returns (uint256 amountOut) {\n        address pool = stream.readAddress();\n        uint8 direction = stream.readUint8();\n        address to = stream.readAddress();\n\n        (uint256 reserve0, uint256 reserve1, ) = IPair(pool).getReserves();\n        if (reserve0 == 0 || reserve1 == 0) revert InvalidPool(pool);\n        (uint256 reserveIn, uint256 reserveOut) = direction == 1 \n            ? (reserve0, reserve1) \n            : (reserve1, reserve0);\n\n        if (amountIn != 0) {\n            if (from == address(this)) {\n                IERC20(tokenIn).safeTransfer(pool, amountIn);\n            } else {\n                IERC20(tokenIn).safeTransferFrom(from, pool, amountIn);\n            }\n        } else {\n            amountIn = IERC20(tokenIn).balanceOf(pool) - reserveIn;  // tokens already were transferred\n        }\n        uint256 amountInWithFee = amountIn * 997;\n        amountOut = (amountInWithFee * reserveOut) / (reserveIn * 1000 + amountInWithFee);\n        (uint256 amount0Out, uint256 amount1Out) = direction == 1 \n            ? (uint256(0), amountOut) \n            : (amountOut, uint256(0));\n\n        IPair(pool).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n\n    /// @notice UniswapV3 pool swap\n    /// @param stream [pool, direction, recipient]\n    /// @param from Where to take liquidity for swap\n    /// @param tokenIn Input token\n    /// @param amountIn Amount of tokenIn to take for swap\n    function _swapUniV3(\n        uint256 stream,\n        address from,\n        address tokenIn,\n        uint256 amountIn\n    ) private {\n        address pool = stream.readAddress();\n        bool zeroForOne = stream.readUint8() > 0;\n        address recipient = stream.readAddress();\n\n        lastCalledPool = pool;\n        IUniswapV3Pool(pool).swap(\n            recipient,\n            zeroForOne,\n            int256(amountIn),\n            zeroForOne ? Constants.MIN_SQRT_RATIO + 1 : Constants.MAX_SQRT_RATIO - 1,\n            abi.encode(tokenIn, from)\n        );\n        if (lastCalledPool != Constants.IMPOSSIBLE_POOL_ADDRESS) revert UnexpectedUniV3Swap();\n    }\n\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n      int256 amount0Delta,\n      int256 amount1Delta,\n      bytes calldata data\n    ) external {\n        if (msg.sender != lastCalledPool) revert UnexpectedUniV3Swap();\n        lastCalledPool = Constants.IMPOSSIBLE_POOL_ADDRESS;\n        (address tokenIn, address from) = abi.decode(data, (address, address));\n        int256 amount = amount0Delta > 0 ? amount0Delta : amount1Delta;\n        if (amount <= 0) revert UnexpectedUniV3Swap();\n        if (from == address(this)) {\n            IERC20(tokenIn).safeTransfer(msg.sender, uint256(amount));\n        } else {\n            IERC20(tokenIn).safeTransferFrom(from, msg.sender, uint256(amount));\n        }\n    }\n\n    /// @notice Wraps/unwraps native token\n    /// @param stream [direction & fake, recipient, wrapToken?]\n    /// @param from Where to take liquidity for swap\n    /// @param tokenIn Input token\n    /// @param amountIn Amount of tokenIn to take for swap\n    function _wrapNative(\n        uint256 stream, \n        address from, \n        address tokenIn, \n        uint256 amountIn\n    ) private {\n        uint8 directionAndFake = stream.readUint8();\n        address to = stream.readAddress();\n\n        if (directionAndFake & 1 == 1) {\n            address wrapToken = stream.readAddress();\n            if (directionAndFake & 2 == 0) IWETH(wrapToken).deposit{value: amountIn}();\n            if (to != address(this)) IERC20(wrapToken).safeTransfer(to, amountIn);\n        } else {\n            if (directionAndFake & 2 == 0) {\n                if (from != address(this)) IERC20(tokenIn).safeTransferFrom(from, address(this), amountIn);\n                IWETH(tokenIn).withdraw(amountIn);\n            }\n            to.safeTransferETH(address(this).balance);\n        }\n    }\n\n    /// @notice Performs a Zenlink stable pool swap\n    /// @param stream [isMetaSwap, To, [Pool, Option(isNativePool), TokenInIndex, TokenOutIndex, TokenOut]]\n    /// @param from Where to take liquidity for swap\n    /// @param tokenIn Input token\n    /// @param amountIn Amount of tokenIn to take for swap\n    function _swapStableSwap(\n        uint256 stream, \n        address from, \n        address tokenIn, \n        uint256 amountIn\n    ) private {\n        uint8 isMetaSwap = stream.readUint8();\n        address to = stream.readAddress();\n        bytes memory swapData = stream.readBytes();\n        \n        if (isMetaSwap == 1) {\n            (\n                address pool,\n                uint8 tokenInIndex, \n                uint8 tokenOutIndex, \n                address tokenOut\n            ) = abi.decode(\n                swapData, \n                (address, uint8, uint8, address)\n            );\n            if (from == address(this)) {\n                IERC20(tokenIn).safeTransfer(address(stableSwapDispatcher), amountIn);\n            } else {\n                IERC20(tokenIn).safeTransferFrom(from, address(stableSwapDispatcher), amountIn);\n            }\n            stableSwapDispatcher.swapUnderlying(\n                pool, \n                tokenInIndex, \n                tokenOutIndex, \n                tokenIn, \n                tokenOut, \n                to\n            );\n        } else {\n            (\n                address pool,\n                bool isNativePool,\n                uint8 tokenInIndex, \n                uint8 tokenOutIndex, \n                address tokenOut\n            ) = abi.decode(\n                swapData, \n                (address, bool, uint8, uint8, address)\n            );\n            if (from == address(this)) {\n                IERC20(tokenIn).safeTransfer(address(stableSwapDispatcher), amountIn);\n            } else {\n                IERC20(tokenIn).safeTransferFrom(from, address(stableSwapDispatcher), amountIn);\n            }\n            stableSwapDispatcher.swap(\n                pool, \n                isNativePool, \n                tokenInIndex, \n                tokenOutIndex, \n                tokenIn, \n                tokenOut, \n                to\n            );\n        }\n    }\n}\n"
    },
    "contracts/universal-router/InputStream.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary InputStream {\n    function createStream(bytes memory data) internal pure returns (uint256 stream) {\n        assembly {\n            stream := mload(0x40)\n            mstore(0x40, add(stream, 64))\n            mstore(stream, data)\n            let length := mload(data)\n            mstore(add(stream, 32), add(data, length))\n        }\n    }\n\n    function isNotEmpty(uint256 stream) internal pure returns (bool) {\n        uint256 pos;\n        uint256 finish;\n        assembly {\n            pos := mload(stream)\n            finish := mload(add(stream, 32))\n        }\n        return pos < finish;\n    }\n\n    function readUint8(uint256 stream) internal pure returns (uint8 res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 1)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readUint16(uint256 stream) internal pure returns (uint16 res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 2)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readUint32(uint256 stream) internal pure returns (uint32 res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 4)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readUint(uint256 stream) internal pure returns (uint256 res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 32)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readAddress(uint256 stream) internal pure returns (address res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 20)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readBytes(uint256 stream) internal pure returns (bytes memory res) {\n        assembly {\n            let pos := mload(stream)\n            res := add(pos, 32)\n            let length := mload(res)\n            mstore(stream, add(res, length))\n        }\n    }\n}\n"
    },
    "contracts/core/interfaces/IPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IPair {\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n    function price1CumulativeLast() external view returns (uint256);\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/universal-router/interfaces/IStableSwapDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStableSwapDispatcher {\n    function swap(\n        address pool, \n        bool isNativePool,\n        uint8 tokenInIndex, \n        uint8 tokenOutIndex, \n        address tokenIn,\n        address tokenOut,\n        address to\n    ) external;\n    function swapUnderlying(\n        address pool, \n        uint8 tokenInIndex, \n        uint8 tokenOutIndex,\n        address tokenIn,\n        address tokenOut,\n        address to\n    ) external;\n}\n"
    },
    "contracts/universal-router/interfaces/uniswap/v3/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IUniswapV3PoolImmutables} from \"./IUniswapV3PoolImmutables.sol\";\nimport {IUniswapV3PoolState} from \"./IUniswapV3PoolState.sol\";\nimport {IUniswapV3PoolActions} from \"./IUniswapV3PoolActions.sol\";\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\n// solhint-disable-next-line no-empty-blocks\ninterface IUniswapV3Pool is \n  IUniswapV3PoolImmutables, \n  IUniswapV3PoolState,\n  IUniswapV3PoolActions\n{\n    \n}\n"
    },
    "contracts/universal-router/interfaces/uniswap/v3/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "contracts/universal-router/interfaces/uniswap/v3/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees()\n        external\n        view\n        returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "contracts/universal-router/interfaces/uniswap/v3/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "contracts/universal-router/UniversalRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {InputStream} from './InputStream.sol';\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {SafeTransferLib} from 'lib/solmate/src/utils/SafeTransferLib.sol';\nimport {IPair} from \"../core/interfaces/IPair.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\nimport {IStableSwapDispatcher} from \"./interfaces/IStableSwapDispatcher.sol\";\nimport {IFeeSettlement} from \"./interfaces/IFeeSettlement.sol\" ;\nimport {AdminUpgradeable} from \"../libraries/AdminUpgradeable.sol\";\nimport {Constants} from \"../libraries/Constants.sol\";\nimport {Commands} from \"./modules/Commands.sol\";\n\ncontract UniversalRouter is ReentrancyGuard, AdminUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeTransferLib for address;\n    using InputStream for uint256;\n\n    IStableSwapDispatcher public stableSwapDispatcher;\n    IFeeSettlement public feeSettlement;\n\n    error InvalidCommandCode(uint8 code);\n    error WrongAmountInValue(uint256 accAmount, uint256 amountIn);\n    error InsufficientOutAmount();\n    error InvalidPool(address pool);\n\n    event SetStableSwapDispatcher(IStableSwapDispatcher stableSwapDispatcher);\n    event SetFeeSettlement(IFeeSettlement feeSettlement);\n    \n    constructor(\n        IStableSwapDispatcher _stableSwapDispatcher,\n        IFeeSettlement _feeSettlement\n    ) {\n        stableSwapDispatcher = _stableSwapDispatcher;\n        feeSettlement = _feeSettlement;\n        _initializeAdmin(msg.sender);\n    }\n\n    /// @notice To receive ETH from WETH\n    receive() external payable {}\n\n    /// @notice Set StableSwapDispatcher by admin\n    /// @param _stableSwapDispatcher StableSwapDispatcher address\n    function setStableSwapDispatcher(IStableSwapDispatcher _stableSwapDispatcher) external onlyAdmin {\n        stableSwapDispatcher = _stableSwapDispatcher;\n        emit SetStableSwapDispatcher(_stableSwapDispatcher);\n    }\n\n    /// @notice Set FeeSettlement by admin\n    /// @param _feeSettlement FeeSettlement address\n    function setFeeSettlement(IFeeSettlement _feeSettlement) external onlyAdmin {\n        feeSettlement = _feeSettlement;\n        emit SetFeeSettlement(_feeSettlement);\n    }\n\n    /// @notice Decodes and executes the given route\n    /// @param tokenIn Address of the input token\n    /// @param amountIn Amount of the input token\n    /// @param tokenOut Address of the output token\n    /// @param amountOutMin Minimum amount of the output token\n    /// @param to Receiver address\n    /// @param route The encoded route to execute with\n    /// @return amountOut Actual amount of the output token\n    function processRoute(\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        uint256 amountOutMin,\n        address to,\n        bytes memory route\n    ) external payable nonReentrant returns (uint256 amountOut) {\n        return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\n    }\n\n    /// @notice Decodes and executes the given route\n    /// @param tokenIn Address of the input token\n    /// @param amountIn Amount of the input token\n    /// @param tokenOut Address of the output token\n    /// @param amountOutMin Minimum amount of the output token\n    /// @param to Receiver address\n    /// @param route The encoded route to execute with\n    /// @return amountOut Actual amount of the output token\n    function processRouteInternal(\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        uint256 amountOutMin,\n        address to,\n        bytes memory route\n    ) private returns (uint256 amountOut) {\n        uint256 amountInAcc = 0;\n        uint256 balanceInitial = tokenOut == Constants.NATIVE_ADDRESS ? \n            address(to).balance \n            : IERC20(tokenOut).balanceOf(to);\n\n        uint256 stream = InputStream.createStream(route);\n        while (stream.isNotEmpty()) {\n            uint8 commandCode = stream.readUint8();\n            if (commandCode < 20) {\n                // 0 <= command < 20\n                if (commandCode == Commands.SWAP_UNISWAPV2_POOL) {\n                    // UniswapV2 pool swap\n                    swapUniswapV2Pool(stream);\n                } else if (commandCode == Commands.DISTRIBUTE_ERC20_SHARES) {\n                    // distribute ERC20 tokens from this router to pools\n                    distributeERC20Shares(stream);\n                } else if (commandCode == Commands.DISTRIBUTE_ERC20_AMOUNTS) {\n                    // initial distribution\n                    amountInAcc += distributeERC20Amounts(stream, tokenIn);\n                } else if (commandCode == Commands.WRAP_AND_DISTRIBUTE_ERC20_AMOUNTS) {\n                    // wrap natives and initial distribution \n                    amountInAcc += wrapAndDistributeERC20Amounts(stream, amountIn);\n                } else if (commandCode == Commands.UNWRAP_NATIVE) {\n                    // unwrap natives\n                    unwrapNative(stream);\n                } else {    \n                    revert InvalidCommandCode(commandCode);\n                }\n            } else if (commandCode < 24) {\n                // 20 <= command < 24\n                if (commandCode == Commands.SWAP_ZENLINK_STABLESWAP) {\n                    // Zenlink stable pool swap\n                    swapZenlinkStableSwap(stream);\n                } else {\n                    revert InvalidCommandCode(commandCode);\n                }\n            } else {\n                // placeholder area for commands 24-255\n                revert InvalidCommandCode(commandCode);\n            }\n        }\n\n        if (amountInAcc != amountIn) revert WrongAmountInValue(amountInAcc, amountIn);\n        \n        feeSettlement.processSettlement(tokenOut, amountOutMin, msg.sender, to);\n        uint256 balanceFinal = tokenOut == Constants.NATIVE_ADDRESS ? \n            address(to).balance \n            : IERC20(tokenOut).balanceOf(to);\n        if (balanceFinal < balanceInitial + amountOutMin) revert InsufficientOutAmount();\n        amountOut = balanceFinal - balanceInitial;\n    }\n\n    /// @notice Performs a UniswapV2 pool swap\n    /// @param stream [Pool, TokenIn, Direction, To]\n    /// @return amountOut Amount of the output token\n    function swapUniswapV2Pool(uint256 stream) private returns (uint256 amountOut) {\n        address pool = stream.readAddress();\n        address tokenIn = stream.readAddress();\n        uint8 direction = stream.readUint8();\n        address to = stream.readAddress();\n\n        (uint256 reserve0, uint256 reserve1, ) = IPair(pool).getReserves();\n        if (reserve0 == 0 || reserve1 == 0) revert InvalidPool(pool);\n        (uint256 reserveIn, uint256 reserveOut) = direction == 1 \n            ? (reserve0, reserve1) \n            : (reserve1, reserve0);\n\n        uint256 amountIn = IERC20(tokenIn).balanceOf(pool) - reserveIn;\n        uint256 amountInWithFee = amountIn * 997;\n        amountOut = (amountInWithFee * reserveOut) / (reserveIn * 1000 + amountInWithFee);\n        (uint256 amount0Out, uint256 amount1Out) = direction == 1 \n            ? (uint256(0), amountOut) \n            : (amountOut, uint256(0));\n\n        IPair(pool).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n\n    /// @notice Performs a Zenlink stable pool swap\n    /// @param stream [isMetaSwap, To, [Pool, Option(isNativePool), TokenInIndex, TokenOutIndex, TokenIn, TokenOut]]\n    function swapZenlinkStableSwap(uint256 stream) private {\n        uint8 isMetaSwap = stream.readUint8();\n        address to = stream.readAddress();\n        bytes memory swapData = stream.readBytes();\n        \n        if (isMetaSwap == 1) {\n            (\n                address pool,\n                uint8 tokenInIndex, \n                uint8 tokenOutIndex, \n                address tokenIn,\n                address tokenOut\n            ) = abi.decode(\n                swapData, \n                (address, uint8, uint8, address, address)\n            );\n            stableSwapDispatcher.swapUnderlying(\n                pool, \n                tokenInIndex, \n                tokenOutIndex, \n                tokenIn, \n                tokenOut, \n                to\n            );\n        } else {\n            (\n                address pool,\n                bool isNativePool,\n                uint8 tokenInIndex, \n                uint8 tokenOutIndex, \n                address tokenIn,\n                address tokenOut\n            ) = abi.decode(\n                swapData, \n                (address, bool, uint8, uint8, address, address)\n            );\n            stableSwapDispatcher.swap(\n                pool, \n                isNativePool, \n                tokenInIndex, \n                tokenOutIndex, \n                tokenIn, \n                tokenOut, \n                to\n            );\n        }\n    \n    }\n\n    /// @notice Distributes input ERC20 tokens from msg.sender to addresses. Tokens should be approved\n    /// @param stream [ArrayLength, ...[To, Amount][]]. An array of destinations and token amounts\n    /// @param token Token to distribute\n    /// @return amountTotal Total amount distributed\n    function distributeERC20Amounts(uint256 stream, address token) private returns (uint256 amountTotal) {\n        uint8 num = stream.readUint8();\n        amountTotal = 0;\n        for (uint256 i = 0; i < num; ++i) {\n            address to = stream.readAddress();\n            uint256 amount = stream.readUint();\n            amountTotal += amount;\n            IERC20(token).safeTransferFrom(msg.sender, to, amount);\n        }\n    }\n\n    /// @notice Wraps all native inputs and distributes wrapped ERC20 tokens from router to addresses\n    /// @param stream [WrapToken, ArrayLength, ...[To, Amount][]]. An array of destinations and token amounts\n    /// @return amountTotal Total amount distributed\n    function wrapAndDistributeERC20Amounts(uint256 stream, uint256 amountIn) private returns (uint256 amountTotal) {\n        address token = stream.readAddress();\n        IWETH(token).deposit{value: amountIn}();\n        uint8 num = stream.readUint8();\n        amountTotal = 0;\n        for (uint256 i = 0; i < num; ++i) {\n            address to = stream.readAddress();\n            uint256 amount = stream.readUint();\n            amountTotal += amount;\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n\n    /// @notice Distributes ERC20 tokens from router to addresses\n    /// @notice Quantity for sending is determined by share in 1/65535\n    /// @notice During routing we can't predict in advance the actual value of internal swaps because of slippage,\n    /// @notice so we have to work with shares - not fixed amounts\n    /// @param stream [Token, ArrayLength, ...[To, ShareAmount][]]. Token to distribute. An array of destinations and token share amounts\n    function distributeERC20Shares(uint256 stream) private {\n        address token = stream.readAddress();\n        uint8 num = stream.readUint8();\n        // slot undrain protection\n        uint256 amountTotal = IERC20(token).balanceOf(address(this)) - 1;     \n\n        for (uint256 i = 0; i < num; ++i) {\n            address to = stream.readAddress();\n            uint16 share = stream.readUint16();\n            uint256 amount = (amountTotal * share) / 65535;\n            amountTotal -= amount;\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n\n    /// @notice Unwraps the Native Token\n    /// @param stream [Token]. Token to unwrap native\n    function unwrapNative(uint256 stream) private {\n        address token = stream.readAddress();\n        address receiver = stream.readAddress();\n        uint256 amount = IERC20(token).balanceOf(address(this)) - 1;\n        // slot undrain protection\n        IWETH(token).withdraw(amount);     \n        receiver.safeTransferETH(amount);\n    }\n}\n"
    },
    "contracts/universal-router/modules/Commands.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary Commands {\n    // Command Types. Maximum supported command at this moment is 255.\n\n    // Command Types where value<20, executed in the first nested-if block\n    uint8 constant DISTRIBUTE_ERC20_AMOUNTS = 3;\n    uint8 constant DISTRIBUTE_ERC20_SHARES = 4;\n    uint8 constant WRAP_AND_DISTRIBUTE_ERC20_AMOUNTS = 5;\n    uint8 constant UNWRAP_NATIVE = 6;\n    uint8 constant SWAP_UNISWAPV2_POOL = 10;\n    uint8 constant SWAP_UNISWAPV3_POOL = 11;\n\n    // Command Types where 20<=value<24, executed in the second nested-if block\n    uint8 constant SWAP_ZENLINK_STABLESWAP = 20;\n}\n"
    },
    "contracts/universal-router/modules/uniswap/v3/UniswapV3StateMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IUniswapV3Pool} from \"../../../interfaces/uniswap/v3/IUniswapV3Pool.sol\";\nimport {IUniswapV3Factory} from \"../../../interfaces/uniswap/v3/IUniswapV3Factory.sol\";\nimport {IUniswapV3StateMulticall} from \"../../../interfaces/uniswap/v3/IUniswapV3StateMulticall.sol\";\nimport {IERC20Minimal} from \"../../../interfaces/IERC20Minimal.sol\";\n\ncontract UniswapV3StateMulticall is IUniswapV3StateMulticall {\n    function getFullState(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    ) external view override returns (StateResult memory state) {\n        require(\n            tickBitmapEnd >= tickBitmapStart,\n            \"tickBitmapEnd < tickBitmapStart\"\n        );\n\n        state = _fillStateWithoutTicks(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee,\n            tickBitmapStart,\n            tickBitmapEnd\n        );\n        state.ticks = _calcTicksFromBitMap(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee,\n            state.tickBitmap\n        );\n    }\n\n    function getFullStateWithoutTicks(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    ) external view override returns (StateResult memory state) {\n        require(\n            tickBitmapEnd >= tickBitmapStart,\n            \"tickBitmapEnd < tickBitmapStart\"\n        );\n\n        return\n            _fillStateWithoutTicks(\n                factory,\n                tokenIn,\n                tokenOut,\n                fee,\n                tickBitmapStart,\n                tickBitmapEnd\n            );\n    }\n\n    function getFullStateWithRelativeBitmaps(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 leftBitmapAmount,\n        int16 rightBitmapAmount\n    ) external view override returns (StateResult memory state) {\n        require(leftBitmapAmount > 0, \"leftBitmapAmount <= 0\");\n        require(rightBitmapAmount > 0, \"rightBitmapAmount <= 0\");\n\n        state = _fillStateWithoutBitmapsAndTicks(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee\n        );\n        int16 currentBitmapIndex = _getBitmapIndexFromTick(\n            state.slot0.tick / state.tickSpacing\n        );\n\n        state.tickBitmap = _calcTickBitmaps(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee,\n            currentBitmapIndex - leftBitmapAmount,\n            currentBitmapIndex + rightBitmapAmount\n        );\n        state.ticks = _calcTicksFromBitMap(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee,\n            state.tickBitmap\n        );\n    }\n\n    function getAdditionalBitmapWithTicks(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    )\n        external\n        view\n        override\n        returns (\n            TickBitMapMappings[] memory tickBitmap,\n            TickInfoMappings[] memory ticks\n        )\n    {\n        require(\n            tickBitmapEnd >= tickBitmapStart,\n            \"tickBitmapEnd < tickBitmapStart\"\n        );\n\n        tickBitmap = _calcTickBitmaps(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee,\n            tickBitmapStart,\n            tickBitmapEnd\n        );\n        ticks = _calcTicksFromBitMap(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee,\n            tickBitmap\n        );\n    }\n\n    function getAdditionalBitmapWithoutTicks(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    ) external view override returns (TickBitMapMappings[] memory tickBitmap) {\n        require(\n            tickBitmapEnd >= tickBitmapStart,\n            \"tickBitmapEnd < tickBitmapStart\"\n        );\n\n        return\n            _calcTickBitmaps(\n                factory,\n                tokenIn,\n                tokenOut,\n                fee,\n                tickBitmapStart,\n                tickBitmapEnd\n            );\n    }\n\n    function _fillStateWithoutTicks(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    ) internal view returns (StateResult memory state) {\n        state = _fillStateWithoutBitmapsAndTicks(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee\n        );\n        state.tickBitmap = _calcTickBitmaps(\n            factory,\n            tokenIn,\n            tokenOut,\n            fee,\n            tickBitmapStart,\n            tickBitmapEnd\n        );\n    }\n\n    function _fillStateWithoutBitmapsAndTicks(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) internal view returns (StateResult memory state) {\n        IUniswapV3Pool pool = _getPool(factory, tokenIn, tokenOut, fee);\n\n        state.pool = pool;\n        state.blockTimestamp = block.timestamp;\n        state.liquidity = pool.liquidity();\n        state.tickSpacing = pool.tickSpacing();\n        state.maxLiquidityPerTick = pool.maxLiquidityPerTick();\n        state.balance0 = _getBalance(pool.token0(), address(pool));\n        state.balance1= _getBalance(pool.token1(), address(pool));\n\n        (\n            state.slot0.sqrtPriceX96,\n            state.slot0.tick,\n            state.slot0.observationIndex,\n            state.slot0.observationCardinality,\n            state.slot0.observationCardinalityNext,\n            state.slot0.feeProtocol,\n            state.slot0.unlocked\n        ) = pool.slot0();\n\n        (\n            state.observation.blockTimestamp,\n            state.observation.tickCumulative,\n            state.observation.secondsPerLiquidityCumulativeX128,\n            state.observation.initialized\n        ) = pool.observations(state.slot0.observationIndex);\n    }\n\n    function _calcTickBitmaps(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    ) internal view returns (TickBitMapMappings[] memory tickBitmap) {\n        IUniswapV3Pool pool = _getPool(factory, tokenIn, tokenOut, fee);\n        uint256 numberOfPopulatedBitmaps = 0;\n        for (int256 i = tickBitmapStart; i <= tickBitmapEnd; i++) {\n            uint256 bitmap = pool.tickBitmap(int16(i));\n            if (bitmap == 0) continue;\n            numberOfPopulatedBitmaps++;\n        }\n\n        tickBitmap = new TickBitMapMappings[](numberOfPopulatedBitmaps);\n        uint256 globalIndex = 0;\n        for (int256 i = tickBitmapStart; i <= tickBitmapEnd; i++) {\n            int16 index = int16(i);\n            uint256 bitmap = pool.tickBitmap(index);\n            if (bitmap == 0) continue;\n\n            tickBitmap[globalIndex] = TickBitMapMappings({\n                index: index,\n                value: bitmap\n            });\n            globalIndex++;\n        }\n    }\n\n    function _calcTicksFromBitMap(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        TickBitMapMappings[] memory tickBitmap\n    ) internal view returns (TickInfoMappings[] memory ticks) {\n        IUniswapV3Pool pool = _getPool(factory, tokenIn, tokenOut, fee);\n\n        uint256 numberOfPopulatedTicks = 0;\n        for (uint256 i = 0; i < tickBitmap.length; i++) {\n            uint256 bitmap = tickBitmap[i].value;\n\n            for (uint256 j = 0; j < 256; j++) {\n                if (bitmap & (1 << j) > 0) numberOfPopulatedTicks++;\n            }\n        }\n\n        ticks = new TickInfoMappings[](numberOfPopulatedTicks);\n        int24 tickSpacing = pool.tickSpacing();\n\n        uint256 globalIndex = 0;\n        for (uint256 i = 0; i < tickBitmap.length; i++) {\n            uint256 bitmap = tickBitmap[i].value;\n\n            for (uint256 j = 0; j < 256; j++) {\n                if (bitmap & (1 << j) > 0) {\n                    int24 populatedTick = ((int24(tickBitmap[i].index) << 8) +\n                        int24(uint24(j))) * tickSpacing;\n\n                    ticks[globalIndex].index = populatedTick;\n                    TickInfo memory newTickInfo = ticks[globalIndex].value;\n\n                    (\n                        newTickInfo.liquidityGross,\n                        newTickInfo.liquidityNet,\n                        ,\n                        ,\n                        newTickInfo.tickCumulativeOutside,\n                        newTickInfo.secondsPerLiquidityOutsideX128,\n                        newTickInfo.secondsOutside,\n                        newTickInfo.initialized\n                    ) = pool.ticks(populatedTick);\n\n                    globalIndex++;\n                }\n            }\n        }\n    }\n\n    function _getPool(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) internal view returns (IUniswapV3Pool pool) {\n        pool = IUniswapV3Pool(factory.getPool(tokenIn, tokenOut, fee));\n        require(address(pool) != address(0), \"Pool does not exist\");\n    }\n\n    function _getBitmapIndexFromTick(int24 tick) internal pure returns (int16) {\n        return int16(tick >> 8);\n    }\n\n    function _getBalance(address token, address pool) internal view returns (uint256) {\n        (bool success, bytes memory data) = token.staticcall(\n            abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, pool)\n        );\n        require(success && data.length >= 32);\n        return abi.decode(data, (uint256));\n    }\n}\n"
    },
    "contracts/universal-router/interfaces/uniswap/v3/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/universal-router/interfaces/uniswap/v3/IUniswapV3StateMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IUniswapV3Pool} from \"./IUniswapV3Pool.sol\";\nimport {IUniswapV3Factory} from \"./IUniswapV3Factory.sol\";\n\ninterface IUniswapV3StateMulticall {\n    struct Slot0 {\n        uint160 sqrtPriceX96;\n        int24 tick;\n        uint16 observationIndex;\n        uint16 observationCardinality;\n        uint16 observationCardinalityNext;\n        uint8 feeProtocol;\n        bool unlocked;\n    }\n\n    struct TickBitMapMappings {\n        int16 index;\n        uint256 value;\n    }\n\n    struct TickInfo {\n        uint128 liquidityGross;\n        int128 liquidityNet;\n        int56 tickCumulativeOutside;\n        uint160 secondsPerLiquidityOutsideX128;\n        uint32 secondsOutside;\n        bool initialized;\n    }\n\n    struct TickInfoMappings {\n        int24 index;\n        TickInfo value;\n    }\n\n    struct Observation {\n        uint32 blockTimestamp;\n        int56 tickCumulative;\n        uint160 secondsPerLiquidityCumulativeX128;\n        bool initialized;\n    }\n\n    struct StateResult {\n        IUniswapV3Pool pool;\n        uint256 blockTimestamp;\n        Slot0 slot0;\n        uint128 liquidity;\n        int24 tickSpacing;\n        uint128 maxLiquidityPerTick;\n        uint256 balance0;\n        uint256 balance1;\n        Observation observation;\n        TickBitMapMappings[] tickBitmap;\n        TickInfoMappings[] ticks;\n    }\n\n    function getFullState(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    ) external view returns (StateResult memory state);\n\n    function getFullStateWithoutTicks(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    ) external view returns (StateResult memory state);\n\n    function getFullStateWithRelativeBitmaps(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 leftBitmapAmount,\n        int16 rightBitmapAmount\n    ) external view returns (StateResult memory state);\n\n    function getAdditionalBitmapWithTicks(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    )\n        external\n        view\n        returns (\n            TickBitMapMappings[] memory tickBitmap,\n            TickInfoMappings[] memory ticks\n        );\n\n    function getAdditionalBitmapWithoutTicks(\n        IUniswapV3Factory factory,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        int16 tickBitmapStart,\n        int16 tickBitmapEnd\n    ) external view returns (TickBitMapMappings[] memory tickBitmap);\n}\n"
    },
    "contracts/universal-router/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}