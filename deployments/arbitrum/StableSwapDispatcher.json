{
  "address": "0x6D48a5Ce3815c29Ff1Deea157380e896bdb9f346",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientAmountIn",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isNativePool",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_tokenInIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_tokenOutIndex",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_tokenInIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_tokenOutIndex",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swapUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x45a55b41d23068f55533295aca172c2657c6036f7f68703944ba68c57063df4f",
  "receipt": {
    "to": null,
    "from": "0x4dA60510480aC2c6768893bC18aBBBb7c141f58D",
    "contractAddress": "0x6D48a5Ce3815c29Ff1Deea157380e896bdb9f346",
    "transactionIndex": 3,
    "gasUsed": "4736259",
    "logsBloom": "0x
    "blockHash": "0xea3b65d7b060ffe13945a0b08b0e19836aea3d2158f91f4e5bde4df412f467ad",
    "transactionHash": "0x45a55b41d23068f55533295aca172c2657c6036f7f68703944ba68c57063df4f",
    "logs": [],
    "blockNumber": 75512914,
    "cumulativeGasUsed": "5841851",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"
  ],
  "numDeployments": 1,
  "solcInputHash": "57234885d522063e85d58ac2161f8d5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientAmountIn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNativePool\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_tokenInIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_tokenOutIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_tokenInIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_tokenOutIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swapUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal-router/modules/StableSwapDispatcher.sol\":\"StableSwapDispatcher\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/IMetaSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMetaSwap {\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x091459d3498fba18906d117d197e1c2ef4586e4c7f05e9cd0e6da61756ae64ce\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/IStableSwapDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IStableSwapDispatcher {\\n    function swap(\\n        address pool, \\n        bool isNativePool,\\n        uint8 tokenInIndex, \\n        uint8 tokenOutIndex, \\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external;\\n    function swapUnderlying(\\n        address pool, \\n        uint8 tokenInIndex, \\n        uint8 tokenOutIndex,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4649e5dbd86a642d6b5f9fcc7a2ea239b42365770350aeac901e19df84576828\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ISwap {\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x79990b3a1725e3a5c4add7e5406680d800df7583d772d16c8bb894a9bd206e75\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x118c37f936d4ef54a98bb692edee39083dc6258d733fc9d185027eb73df15552\",\"license\":\"MIT\"},\"contracts/universal-router/modules/StableSwapDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ISwap} from \\\"../interfaces/ISwap.sol\\\";\\nimport {IMetaSwap} from \\\"../interfaces/IMetaSwap.sol\\\";\\nimport {IStableSwapDispatcher} from \\\"../interfaces/IStableSwapDispatcher.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\n\\ncontract StableSwapDispatcher is IStableSwapDispatcher {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable weth;\\n\\n    error InsufficientAmountIn();\\n\\n    constructor(address _weth) {\\n        weth = _weth;\\n    }\\n\\n    /// @notice To receive ETH from WETH\\n    receive() external payable {}\\n\\n    function swap(\\n        address _pool,\\n        bool _isNativePool,\\n        uint8 _tokenInIndex,\\n        uint8 _tokenOutIndex,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) external override {\\n        ISwap pool = ISwap(_pool);\\n        IERC20 tokenIn = IERC20(_tokenIn);\\n        IERC20 tokenOut = IERC20(_tokenOut);\\n        bool isNativeTokenIn = _tokenIn == weth && _isNativePool;\\n        bool isNatvieTokenOut = _tokenOut == weth && _isNativePool;\\n        uint256 amountIn = tokenIn.balanceOf(address(this));\\n        if (amountIn == 0) revert InsufficientAmountIn();\\n        if (isNativeTokenIn) {\\n            IWETH(_tokenIn).withdraw(amountIn); \\n            pool.swap{value: address(this).balance}(\\n                _tokenInIndex, \\n                _tokenOutIndex, \\n                address(this).balance, \\n                0, \\n                type(uint256).max\\n            );\\n        } else {\\n            tokenIn.safeIncreaseAllowance(address(pool), amountIn);\\n            pool.swap(_tokenInIndex, _tokenOutIndex, amountIn, 0, type(uint256).max);\\n        }\\n        if (isNatvieTokenOut) {\\n            IWETH(_tokenOut).deposit{value: address(this).balance}();\\n        }\\n        tokenOut.safeTransfer(_to, tokenOut.balanceOf(address(this)));\\n    }\\n\\n    function swapUnderlying(\\n        address _pool,\\n        uint8 _tokenInIndex,\\n        uint8 _tokenOutIndex,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) external override {\\n        IMetaSwap metaPool = IMetaSwap(_pool);\\n        IERC20 tokenIn = IERC20(_tokenIn);\\n        IERC20 tokenOut = IERC20(_tokenOut);\\n        uint256 amountIn = tokenIn.balanceOf(address(this));\\n        if (amountIn == 0) revert InsufficientAmountIn();\\n        tokenIn.safeIncreaseAllowance(address(metaPool), amountIn);\\n        metaPool.swapUnderlying(\\n            _tokenInIndex,\\n            _tokenOutIndex,\\n            amountIn,\\n            0,\\n            type(uint256).max\\n        );\\n        tokenOut.safeTransfer(_to, tokenOut.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xcc9da53d321d1be057893dd49e426dc97c66ea63771717e494f5208166faf35a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610cf4380380610cf483398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c610c5561009f600039600081816078015281816102c601526103030152610c556000f3fe6080604052600436106100385760003560e01c80630ba1448d146100445780633fc8cef314610066578063cbf45e88146100b657600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f366004610ac3565b6100d6565b005b34801561007257600080fd5b5061009a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c257600080fd5b506100646100d1366004610a3b565b6102bf565b6040516370a0823160e01b81523060048201528690849084906000906001600160a01b038416906370a082319060240160206040518083038186803b15801561011e57600080fd5b505afa158015610132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101569190610b54565b90508061017657604051636fad977360e11b815260040160405180910390fd5b61018a6001600160a01b0384168583610685565b604051630f1c1f5d60e31b815260ff808b16600483015289166024820152604481018290526000606482015260001960848201526001600160a01b038516906378e0fae89060a401602060405180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102249190610b54565b506040516370a0823160e01b81523060048201526102b39086906001600160a01b038516906370a082319060240160206040518083038186803b15801561026a57600080fd5b505afa15801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a29190610b54565b6001600160a01b038516919061077f565b50505050505050505050565b86838360007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169084161480156102fd5750895b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b031614801561033f57508a5b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a082319060240160206040518083038186803b15801561038457600080fd5b505afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190610b54565b9050806103dc57604051636fad977360e11b815260040160405180910390fd5b82156104dd57604051632e1a7d4d60e01b8152600481018290526001600160a01b038a1690632e1a7d4d90602401600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b50506040516348b4aac360e11b815260ff808f1660048301528d1660248201524760448201526000606482015260001960848201526001600160a01b038916925063916955869150479060a4016020604051808303818588803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104d79190610b54565b5061058d565b6104f16001600160a01b0386168783610685565b6040516348b4aac360e11b815260ff808d1660048301528b166024820152604481018290526000606482015260001960848201526001600160a01b0387169063916955869060a401602060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190610b54565b505b81156105e857876001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b81523060048201526106769088906001600160a01b038716906370a082319060240160206040518083038186803b15801561062d57600080fd5b505afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610b54565b6001600160a01b038716919061077f565b50505050505050505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156106d157600080fd5b505afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190610b54565b6107139190610bbc565b6040516001600160a01b03851660248201526044810182905290915061077990859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107b4565b50505050565b6040516001600160a01b0383166024820152604481018290526107af90849063a9059cbb60e01b90606401610742565b505050565b6000610809826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661088b9092919063ffffffff16565b8051909150156107af57808060200190518101906108279190610b37565b6107af5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b606061089a84846000856108a4565b90505b9392505050565b6060824710156109055760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610882565b6001600160a01b0385163b61095c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610882565b600080866001600160a01b031685876040516109789190610b6d565b60006040518083038185875af1925050503d80600081146109b5576040519150601f19603f3d011682016040523d82523d6000602084013e6109ba565b606091505b50915091506109ca8282866109d5565b979650505050505050565b606083156109e457508161089d565b8251156109f45782518084602001fd5b8160405162461bcd60e51b81526004016108829190610b89565b80356001600160a01b0381168114610a2557600080fd5b919050565b803560ff81168114610a2557600080fd5b600080600080600080600060e0888a031215610a5657600080fd5b610a5f88610a0e565b96506020880135610a6f81610c0e565b9550610a7d60408901610a2a565b9450610a8b60608901610a2a565b9350610a9960808901610a0e565b9250610aa760a08901610a0e565b9150610ab560c08901610a0e565b905092959891949750929550565b60008060008060008060c08789031215610adc57600080fd5b610ae587610a0e565b9550610af360208801610a2a565b9450610b0160408801610a2a565b9350610b0f60608801610a0e565b9250610b1d60808801610a0e565b9150610b2b60a08801610a0e565b90509295509295509295565b600060208284031215610b4957600080fd5b815161089d81610c0e565b600060208284031215610b6657600080fd5b5051919050565b60008251610b7f818460208701610be2565b9190910192915050565b6020815260008251806020840152610ba8816040850160208701610be2565b601f01601f19169190910160400192915050565b60008219821115610bdd57634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015610bfd578181015183820152602001610be5565b838111156107795750506000910152565b8015158114610c1c57600080fd5b5056fea264697066735822122044621631e4e3d3d4a3d17a853b202d4c0b0b2d5aa8c3fdd0de7c170bd8bd9d6164736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c80630ba1448d146100445780633fc8cef314610066578063cbf45e88146100b657600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f366004610ac3565b6100d6565b005b34801561007257600080fd5b5061009a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c257600080fd5b506100646100d1366004610a3b565b6102bf565b6040516370a0823160e01b81523060048201528690849084906000906001600160a01b038416906370a082319060240160206040518083038186803b15801561011e57600080fd5b505afa158015610132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101569190610b54565b90508061017657604051636fad977360e11b815260040160405180910390fd5b61018a6001600160a01b0384168583610685565b604051630f1c1f5d60e31b815260ff808b16600483015289166024820152604481018290526000606482015260001960848201526001600160a01b038516906378e0fae89060a401602060405180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102249190610b54565b506040516370a0823160e01b81523060048201526102b39086906001600160a01b038516906370a082319060240160206040518083038186803b15801561026a57600080fd5b505afa15801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a29190610b54565b6001600160a01b038516919061077f565b50505050505050505050565b86838360007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169084161480156102fd5750895b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b031614801561033f57508a5b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a082319060240160206040518083038186803b15801561038457600080fd5b505afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190610b54565b9050806103dc57604051636fad977360e11b815260040160405180910390fd5b82156104dd57604051632e1a7d4d60e01b8152600481018290526001600160a01b038a1690632e1a7d4d90602401600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b50506040516348b4aac360e11b815260ff808f1660048301528d1660248201524760448201526000606482015260001960848201526001600160a01b038916925063916955869150479060a4016020604051808303818588803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104d79190610b54565b5061058d565b6104f16001600160a01b0386168783610685565b6040516348b4aac360e11b815260ff808d1660048301528b166024820152604481018290526000606482015260001960848201526001600160a01b0387169063916955869060a401602060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190610b54565b505b81156105e857876001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b81523060048201526106769088906001600160a01b038716906370a082319060240160206040518083038186803b15801561062d57600080fd5b505afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610b54565b6001600160a01b038716919061077f565b50505050505050505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156106d157600080fd5b505afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190610b54565b6107139190610bbc565b6040516001600160a01b03851660248201526044810182905290915061077990859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107b4565b50505050565b6040516001600160a01b0383166024820152604481018290526107af90849063a9059cbb60e01b90606401610742565b505050565b6000610809826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661088b9092919063ffffffff16565b8051909150156107af57808060200190518101906108279190610b37565b6107af5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b606061089a84846000856108a4565b90505b9392505050565b6060824710156109055760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610882565b6001600160a01b0385163b61095c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610882565b600080866001600160a01b031685876040516109789190610b6d565b60006040518083038185875af1925050503d80600081146109b5576040519150601f19603f3d011682016040523d82523d6000602084013e6109ba565b606091505b50915091506109ca8282866109d5565b979650505050505050565b606083156109e457508161089d565b8251156109f45782518084602001fd5b8160405162461bcd60e51b81526004016108829190610b89565b80356001600160a01b0381168114610a2557600080fd5b919050565b803560ff81168114610a2557600080fd5b600080600080600080600060e0888a031215610a5657600080fd5b610a5f88610a0e565b96506020880135610a6f81610c0e565b9550610a7d60408901610a2a565b9450610a8b60608901610a2a565b9350610a9960808901610a0e565b9250610aa760a08901610a0e565b9150610ab560c08901610a0e565b905092959891949750929550565b60008060008060008060c08789031215610adc57600080fd5b610ae587610a0e565b9550610af360208801610a2a565b9450610b0160408801610a2a565b9350610b0f60608801610a0e565b9250610b1d60808801610a0e565b9150610b2b60a08801610a0e565b90509295509295509295565b600060208284031215610b4957600080fd5b815161089d81610c0e565b600060208284031215610b6657600080fd5b5051919050565b60008251610b7f818460208701610be2565b9190910192915050565b6020815260008251806020840152610ba8816040850160208701610be2565b601f01601f19169190910160400192915050565b60008219821115610bdd57634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015610bfd578181015183820152602001610be5565b838111156107795750506000910152565b8015158114610c1c57600080fd5b5056fea264697066735822122044621631e4e3d3d4a3d17a853b202d4c0b0b2d5aa8c3fdd0de7c170bd8bd9d6164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}