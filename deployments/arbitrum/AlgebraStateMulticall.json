{
  "address": "0xf6EA707CBf38f2Acf3bf029429B55192c61c67ad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAlgebraFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "int16",
          "name": "leftBitmapAmount",
          "type": "int16"
        },
        {
          "internalType": "int16",
          "name": "rightBitmapAmount",
          "type": "int16"
        }
      ],
      "name": "getFullStateWithRelativeBitmaps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IAlgebraPool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockTimestamp",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint160",
                  "name": "sqrtPriceX96",
                  "type": "uint160"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                },
                {
                  "internalType": "int24",
                  "name": "tick",
                  "type": "int24"
                },
                {
                  "internalType": "uint16",
                  "name": "observationIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint8",
                  "name": "communityFeeToken0",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "communityFeeToken1",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "unlocked",
                  "type": "bool"
                }
              ],
              "internalType": "struct AlgebraStateMulticall.Slot0",
              "name": "slot0",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "int24",
              "name": "tickSpacing",
              "type": "int24"
            },
            {
              "internalType": "uint128",
              "name": "maxLiquidityPerTick",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "balance0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance1",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "blockTimestamp",
                  "type": "uint32"
                },
                {
                  "internalType": "int56",
                  "name": "tickCumulative",
                  "type": "int56"
                },
                {
                  "internalType": "uint160",
                  "name": "secondsPerLiquidityCumulativeX128",
                  "type": "uint160"
                },
                {
                  "internalType": "bool",
                  "name": "initialized",
                  "type": "bool"
                }
              ],
              "internalType": "struct AlgebraStateMulticall.Observation",
              "name": "observation",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int16",
                  "name": "index",
                  "type": "int16"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AlgebraStateMulticall.TickBitMapMappings[]",
              "name": "tickBitmap",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "int24",
                  "name": "index",
                  "type": "int24"
                },
                {
                  "components": [
                    {
                      "internalType": "uint128",
                      "name": "liquidityGross",
                      "type": "uint128"
                    },
                    {
                      "internalType": "int128",
                      "name": "liquidityNet",
                      "type": "int128"
                    },
                    {
                      "internalType": "int56",
                      "name": "tickCumulativeOutside",
                      "type": "int56"
                    },
                    {
                      "internalType": "uint160",
                      "name": "secondsPerLiquidityOutsideX128",
                      "type": "uint160"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondsOutside",
                      "type": "uint32"
                    },
                    {
                      "internalType": "bool",
                      "name": "initialized",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct AlgebraStateMulticall.TickInfo",
                  "name": "value",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AlgebraStateMulticall.TickInfoMappings[]",
              "name": "ticks",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AlgebraStateMulticall.StateResult",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bf9e0f142b62171770377a97919ba6588de194ca032ab268554b3ad1c55dea6",
  "receipt": {
    "to": null,
    "from": "0x4dA60510480aC2c6768893bC18aBBBb7c141f58D",
    "contractAddress": "0xf6EA707CBf38f2Acf3bf029429B55192c61c67ad",
    "transactionIndex": 1,
    "gasUsed": "11313084",
    "logsBloom": "0x
    "blockHash": "0x383873a2d838f81ab6da61cd8293447f1b15086505e035ed21fafec6e110b3e0",
    "transactionHash": "0x2bf9e0f142b62171770377a97919ba6588de194ca032ab268554b3ad1c55dea6",
    "logs": [],
    "blockNumber": 81603502,
    "cumulativeGasUsed": "11313084",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dddf701cbd27969aa038d6f9cabcafcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAlgebraFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"leftBitmapAmount\",\"type\":\"int16\"},{\"internalType\":\"int16\",\"name\":\"rightBitmapAmount\",\"type\":\"int16\"}],\"name\":\"getFullStateWithRelativeBitmaps\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IAlgebraPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"communityFeeToken0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"communityFeeToken1\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"internalType\":\"struct AlgebraStateMulticall.Slot0\",\"name\":\"slot0\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"maxLiquidityPerTick\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"balance0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct AlgebraStateMulticall.Observation\",\"name\":\"observation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"index\",\"type\":\"int16\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AlgebraStateMulticall.TickBitMapMappings[]\",\"name\":\"tickBitmap\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"index\",\"type\":\"int24\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct AlgebraStateMulticall.TickInfo\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct AlgebraStateMulticall.TickInfoMappings[]\",\"name\":\"ticks\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AlgebraStateMulticall.StateResult\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal-router/modules/algebra/AlgebraStateMulticall.sol\":\"AlgebraStateMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/universal-router/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x73057ad07e5bde1b8ae86001fd4dfe983a124eafa827f82123a7022686c85707\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/algebra/IAlgebraFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title The interface for the Algebra Factory\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\n */\\ninterface IAlgebraFactory {\\n  /**\\n   *  @notice Emitted when the owner of the factory is changed\\n   *  @param newOwner The owner after the owner was changed\\n   */\\n  event Owner(address indexed newOwner);\\n\\n  /**\\n   *  @notice Emitted when the vault address is changed\\n   *  @param newVaultAddress The vault address after the address was changed\\n   */\\n  event VaultAddress(address indexed newVaultAddress);\\n\\n  /**\\n   *  @notice Emitted when a pool is created\\n   *  @param token0 The first token of the pool by address sort order\\n   *  @param token1 The second token of the pool by address sort order\\n   *  @param pool The address of the created pool\\n   */\\n  event Pool(address indexed token0, address indexed token1, address pool);\\n\\n  /**\\n   *  @notice Emitted when the farming address is changed\\n   *  @param newFarmingAddress The farming address after the address was changed\\n   */\\n  event FarmingAddress(address indexed newFarmingAddress);\\n\\n  event FeeConfiguration(\\n    uint16 alpha1,\\n    uint16 alpha2,\\n    uint32 beta1,\\n    uint32 beta2,\\n    uint16 gamma1,\\n    uint16 gamma2,\\n    uint32 volumeBeta,\\n    uint16 volumeGamma,\\n    uint16 baseFee\\n  );\\n\\n  /**\\n   *  @notice Returns the current owner of the factory\\n   *  @dev Can be changed by the current owner via setOwner\\n   *  @return The address of the factory owner\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   *  @notice Returns the current poolDeployerAddress\\n   *  @return The address of the poolDeployer\\n   */\\n  function poolDeployer() external view returns (address);\\n\\n  /**\\n   * @dev Is retrieved from the pools to restrict calling\\n   * certain functions not by a tokenomics contract\\n   * @return The tokenomics contract address\\n   */\\n  function farmingAddress() external view returns (address);\\n\\n  function vaultAddress() external view returns (address);\\n\\n  /**\\n   *  @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n   *  @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n   *  @param tokenA The contract address of either token0 or token1\\n   *  @param tokenB The contract address of the other token\\n   *  @return pool The pool address\\n   */\\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\\n\\n  /**\\n   *  @notice Creates a pool for the given two tokens and fee\\n   *  @param tokenA One of the two tokens in the desired pool\\n   *  @param tokenB The other of the two tokens in the desired pool\\n   *  @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n   *  from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n   *  are invalid.\\n   *  @return pool The address of the newly created pool\\n   */\\n  function createPool(address tokenA, address tokenB) external returns (address pool);\\n\\n  /**\\n   *  @notice Updates the owner of the factory\\n   *  @dev Must be called by the current owner\\n   *  @param _owner The new owner of the factory\\n   */\\n  function setOwner(address _owner) external;\\n\\n  /**\\n   * @dev updates tokenomics address on the factory\\n   * @param _farmingAddress The new tokenomics contract address\\n   */\\n  function setFarmingAddress(address _farmingAddress) external;\\n\\n  /**\\n   * @dev updates vault address on the factory\\n   * @param _vaultAddress The new vault contract address\\n   */\\n  function setVaultAddress(address _vaultAddress) external;\\n\\n  /**\\n   * @notice Changes initial fee configuration for new pools\\n   * @dev changes coefficients for sigmoids: \\u03b1 / (1 + e^( (\\u03b2-x) / \\u03b3))\\n   * alpha1 + alpha2 + baseFee (max possible fee) must be <= type(uint16).max\\n   * gammas must be > 0\\n   * @param alpha1 max value of the first sigmoid\\n   * @param alpha2 max value of the second sigmoid\\n   * @param beta1 shift along the x-axis for the first sigmoid\\n   * @param beta2 shift along the x-axis for the second sigmoid\\n   * @param gamma1 horizontal stretch factor for the first sigmoid\\n   * @param gamma2 horizontal stretch factor for the second sigmoid\\n   * @param volumeBeta shift along the x-axis for the outer volume-sigmoid\\n   * @param volumeGamma horizontal stretch factor the outer volume-sigmoid\\n   * @param baseFee minimum possible fee\\n   */\\n  function setBaseFeeConfiguration(\\n    uint16 alpha1,\\n    uint16 alpha2,\\n    uint32 beta1,\\n    uint32 beta2,\\n    uint16 gamma1,\\n    uint16 gamma2,\\n    uint32 volumeBeta,\\n    uint16 volumeGamma,\\n    uint16 baseFee\\n  ) external;\\n}\\n\",\"keccak256\":\"0x78d6b2224c0510f7c91de2eb0fcb73c34ad4d992011c5b231a7960de5e93245b\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/algebra/IAlgebraPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IAlgebraPoolState} from './IAlgebraPoolState.sol';\\nimport {IAlgebraPoolActions} from './IAlgebraPoolActions.sol';\\nimport {IAlgebraPoolImmutables} from \\\"./IAlgebraPoolImmutables.sol\\\";\\n\\n/**\\n * @title The interface for a Algebra Pool\\n * @dev The pool interface is broken up into many smaller pieces.\\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\n */\\ninterface IAlgebraPool is\\n  IAlgebraPoolState,\\n  IAlgebraPoolActions,\\n  IAlgebraPoolImmutables\\n{\\n  // used only for combining interfaces\\n}\\n\",\"keccak256\":\"0x397c982ae556bd19a9addaaca8074a8c87d75c65a8576b27f569828e14c1283d\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/algebra/IAlgebraPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Permissionless pool actions\\ninterface IAlgebraPoolActions {\\n  /**\\n   * @notice Sets the initial price for the pool\\n   * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n   * @param price the initial sqrt price of the pool as a Q64.96\\n   */\\n  function initialize(uint160 price) external;\\n\\n  /**\\n   * @notice Adds liquidity for the given recipient/bottomTick/topTick position\\n   * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\\n   * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n   * on bottomTick, topTick, the amount of liquidity, and the current price.\\n   * @param sender The address which will receive potential surplus of paid tokens\\n   * @param recipient The address for which the liquidity will be created\\n   * @param bottomTick The lower tick of the position in which to add liquidity\\n   * @param topTick The upper tick of the position in which to add liquidity\\n   * @param amount The desired amount of liquidity to mint\\n   * @param data Any data that should be passed through to the callback\\n   * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n   * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n   * @return liquidityActual The actual minted amount of liquidity\\n   */\\n  function mint(\\n    address sender,\\n    address recipient,\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 amount,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint128 liquidityActual\\n    );\\n\\n  /**\\n   * @notice Collects tokens owed to a position\\n   * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n   * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n   * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n   * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n   * @param recipient The address which should receive the fees collected\\n   * @param bottomTick The lower tick of the position for which to collect fees\\n   * @param topTick The upper tick of the position for which to collect fees\\n   * @param amount0Requested How much token0 should be withdrawn from the fees owed\\n   * @param amount1Requested How much token1 should be withdrawn from the fees owed\\n   * @return amount0 The amount of fees collected in token0\\n   * @return amount1 The amount of fees collected in token1\\n   */\\n  function collect(\\n    address recipient,\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /**\\n   * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n   * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n   * @dev Fees must be collected separately via a call to #collect\\n   * @param bottomTick The lower tick of the position for which to burn liquidity\\n   * @param topTick The upper tick of the position for which to burn liquidity\\n   * @param amount How much liquidity to burn\\n   * @return amount0 The amount of token0 sent to the recipient\\n   * @return amount1 The amount of token1 sent to the recipient\\n   */\\n  function burn(\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 amount\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /**\\n   * @notice Swap token0 for token1, or token1 for token0\\n   * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\n   * @param recipient The address to receive the output of the swap\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\n   * SwapRouter#SwapCallbackData\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n   */\\n  function swap(\\n    address recipient,\\n    bool zeroToOne,\\n    int256 amountSpecified,\\n    uint160 limitSqrtPrice,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /**\\n   * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\\n   * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\\n   * @param sender The address called this function (Comes from the Router)\\n   * @param recipient The address to receive the output of the swap\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\n   * SwapRouter#SwapCallbackData\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n   */\\n  function swapSupportingFeeOnInputTokens(\\n    address sender,\\n    address recipient,\\n    bool zeroToOne,\\n    int256 amountSpecified,\\n    uint160 limitSqrtPrice,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /**\\n   * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n   * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\\n   * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\\n   * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\\n   * the donation amount(s) from the callback\\n   * @param recipient The address which will receive the token0 and token1 amounts\\n   * @param amount0 The amount of token0 to send\\n   * @param amount1 The amount of token1 to send\\n   * @param data Any data to be passed through to the callback\\n   */\\n  function flash(\\n    address recipient,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1dba0336aa1d34214ad032b31c278532659e82319b75b11c8ac7c8af0c4c3317\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/algebra/IAlgebraPoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Pool state that never changes\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraPoolImmutables {\\n  /**\\n   * @notice The contract that stores all the timepoints and can perform actions with them\\n   * @return The operator address\\n   */\\n  function dataStorageOperator() external view returns (address);\\n\\n  /**\\n   * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\\n   * @return The contract address\\n   */\\n  function factory() external view returns (address);\\n\\n  /**\\n   * @notice The first of the two tokens of the pool, sorted by address\\n   * @return The token contract address\\n   */\\n  function token0() external view returns (address);\\n\\n  /**\\n   * @notice The second of the two tokens of the pool, sorted by address\\n   * @return The token contract address\\n   */\\n  function token1() external view returns (address);\\n\\n  /**\\n   * @notice The pool tick spacing\\n   * @dev Ticks can only be used at multiples of this value\\n   * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\n   * This value is an int24 to avoid casting even though it is always positive.\\n   * @return The tick spacing\\n   */\\n  function tickSpacing() external view returns (int24);\\n\\n  /**\\n   * @notice The maximum amount of position liquidity that can use any tick in the range\\n   * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n   * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n   * @return The max amount of liquidity per tick\\n   */\\n  function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xa77730a819a47827878ed420151c4f571633227d77d34602fa337f2617fdc01e\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/algebra/IAlgebraPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Pool state that can change\\ninterface IAlgebraPoolState {\\n  /**\\n   * @notice The globalState structure in the pool stores many values but requires only one slot\\n   * and is exposed as a single method to save gas when accessed externally.\\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\n   * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\n   * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\n   * boundary;\\n   * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\n   * Returns timepointIndex The index of the last written timepoint;\\n   * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\n   * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\n   * Returns unlocked Whether the pool is currently locked to reentrancy;\\n   */\\n  function globalState()\\n    external\\n    view\\n    returns (\\n      uint160 price,\\n      int24 tick,\\n      uint16 fee,\\n      uint16 timepointIndex,\\n      uint8 communityFeeToken0,\\n      uint8 communityFeeToken1,\\n      bool unlocked\\n    );\\n\\n  /**\\n   * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n   * @dev This value can overflow the uint256\\n   */\\n  function totalFeeGrowth0Token() external view returns (uint256);\\n\\n  /**\\n   * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n   * @dev This value can overflow the uint256\\n   */\\n  function totalFeeGrowth1Token() external view returns (uint256);\\n\\n  /**\\n   * @notice The currently in range liquidity available to the pool\\n   * @dev This value has no relationship to the total liquidity across all ticks.\\n   * Returned value cannot exceed type(uint128).max\\n   */\\n  function liquidity() external view returns (uint128);\\n\\n  /**\\n   * @notice Look up information about a specific tick in the pool\\n   * @dev This is a public structure, so the `return` natspec tags are omitted.\\n   * @param tick The tick to look up\\n   * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\n   * tick upper;\\n   * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;\\n   * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\n   * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\n   * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\n   * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\n   * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\n   * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\n   * otherwise equal to false. Outside values can only be used if the tick is initialized.\\n   * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n   * a specific position.\\n   */\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityTotal,\\n      int128 liquidityDelta,\\n      uint256 outerFeeGrowth0Token,\\n      uint256 outerFeeGrowth1Token,\\n      int56 outerTickCumulative,\\n      uint160 outerSecondsPerLiquidity,\\n      uint32 outerSecondsSpent,\\n      bool initialized\\n    );\\n\\n  /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the information about a position by the position's key\\n   * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\n   * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\n   * @return liquidityAmount The amount of liquidity in the position;\\n   * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\n   * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\n   * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\n   * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\n   * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\n   */\\n  function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityAmount,\\n      uint32 lastLiquidityAddTimestamp,\\n      uint256 innerFeeGrowth0Token,\\n      uint256 innerFeeGrowth1Token,\\n      uint128 fees0,\\n      uint128 fees1\\n    );\\n\\n  /**\\n   * @notice Returns data about a specific timepoint index\\n   * @param index The element of the timepoints array to fetch\\n   * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\\n   * ago, rather than at a specific index in the array.\\n   * This is a public mapping of structures, so the `return` natspec tags are omitted.\\n   * @return initialized whether the timepoint has been initialized and the values are safe to use;\\n   * Returns blockTimestamp The timestamp of the timepoint;\\n   * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;\\n   * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;\\n   * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;\\n   * Returns averageTick Time-weighted average tick;\\n   * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\\n   */\\n  function timepoints(uint256 index)\\n    external\\n    view\\n    returns (\\n      bool initialized,\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint88 volatilityCumulative,\\n      int24 averageTick,\\n      uint144 volumePerLiquidityCumulative\\n    );\\n\\n  /**\\n   * @notice Returns the information about active incentive\\n   * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\\n   * @return virtualPool The address of a virtual pool associated with the current active incentive\\n   */\\n  function activeIncentive() external view returns (address virtualPool);\\n\\n  /**\\n   * @notice Returns the lock time for added liquidity\\n   */\\n  function liquidityCooldown() external view returns (uint32 cooldownInSeconds);\\n}\\n\",\"keccak256\":\"0xefa6c0e25adf716e2b01c8eaf97aecf32cc575f73a12438a4baa1a971d43665d\",\"license\":\"MIT\"},\"contracts/universal-router/modules/algebra/AlgebraStateMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IAlgebraPool} from \\\"../../interfaces/algebra/IAlgebraPool.sol\\\";\\nimport {IAlgebraFactory} from \\\"../../interfaces/algebra/IAlgebraFactory.sol\\\";\\nimport {IERC20Minimal} from \\\"../../interfaces/IERC20Minimal.sol\\\";\\n\\ncontract AlgebraStateMulticall {\\n    struct Slot0 {\\n        uint160 sqrtPriceX96;\\n        uint16 fee;\\n        int24 tick;\\n        uint16 observationIndex;\\n        uint8 communityFeeToken0;\\n        uint8 communityFeeToken1;\\n        bool unlocked;\\n    }\\n\\n    struct TickBitMapMappings {\\n        int16 index;\\n        uint256 value;\\n    }\\n\\n    struct TickInfo {\\n        uint128 liquidityGross;\\n        int128 liquidityNet;\\n        int56 tickCumulativeOutside;\\n        uint160 secondsPerLiquidityOutsideX128;\\n        uint32 secondsOutside;\\n        bool initialized;\\n    }\\n\\n    struct TickInfoMappings {\\n        int24 index;\\n        TickInfo value;\\n    }\\n\\n    struct Observation {\\n        uint32 blockTimestamp;\\n        int56 tickCumulative;\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        bool initialized;\\n    }\\n\\n    struct StateResult {\\n        IAlgebraPool pool;\\n        uint256 blockTimestamp;\\n        Slot0 slot0;\\n        uint128 liquidity;\\n        int24 tickSpacing;\\n        uint128 maxLiquidityPerTick;\\n        uint256 balance0;\\n        uint256 balance1;\\n        Observation observation;\\n        TickBitMapMappings[] tickBitmap;\\n        TickInfoMappings[] ticks;\\n    }\\n\\n    function getFullStateWithRelativeBitmaps(\\n        IAlgebraFactory factory,\\n        address tokenIn,\\n        address tokenOut,\\n        int16 leftBitmapAmount,\\n        int16 rightBitmapAmount\\n    ) external view returns (StateResult memory state) {\\n        require(leftBitmapAmount > 0, \\\"leftBitmapAmount <= 0\\\");\\n        require(rightBitmapAmount > 0, \\\"rightBitmapAmount <= 0\\\");\\n\\n        state = _fillStateWithoutBitmapsAndTicks(\\n            factory,\\n            tokenIn,\\n            tokenOut\\n        );\\n        int16 currentBitmapIndex = _getBitmapIndexFromTick(\\n            state.slot0.tick / state.tickSpacing\\n        );\\n\\n        state.tickBitmap = _calcTickBitmaps(\\n            factory,\\n            tokenIn,\\n            tokenOut,\\n            currentBitmapIndex - leftBitmapAmount,\\n            currentBitmapIndex + rightBitmapAmount\\n        );\\n    }\\n\\n    function _fillStateWithoutBitmapsAndTicks(\\n        IAlgebraFactory factory,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (StateResult memory state) {\\n        IAlgebraPool pool = _getPool(factory, tokenIn, tokenOut);\\n\\n        state.pool = pool;\\n        state.blockTimestamp = block.timestamp;\\n        state.liquidity = pool.liquidity();\\n        state.tickSpacing = pool.tickSpacing();\\n        state.maxLiquidityPerTick = pool.maxLiquidityPerTick();\\n        state.balance0 = _getBalance(pool.token0(), address(pool));\\n        state.balance1= _getBalance(pool.token1(), address(pool));\\n\\n        (\\n            state.slot0.sqrtPriceX96,\\n            state.slot0.tick,\\n            state.slot0.fee,\\n            state.slot0.observationIndex,\\n            state.slot0.communityFeeToken0,\\n            state.slot0.communityFeeToken1,\\n            state.slot0.unlocked\\n        ) = pool.globalState();\\n\\n        (\\n            state.observation.initialized,\\n            state.observation.blockTimestamp,\\n            state.observation.tickCumulative,\\n            state.observation.secondsPerLiquidityCumulativeX128,\\n            ,\\n            ,\\n        ) = pool.timepoints(state.slot0.observationIndex);\\n    }\\n\\n    function _calcTickBitmaps(\\n        IAlgebraFactory factory,\\n        address tokenIn,\\n        address tokenOut,\\n        int16 tickBitmapStart,\\n        int16 tickBitmapEnd\\n    ) internal view returns (TickBitMapMappings[] memory tickBitmap) {\\n        IAlgebraPool pool = _getPool(factory, tokenIn, tokenOut);\\n        uint256 numberOfPopulatedBitmaps = 0;\\n        for (int256 i = tickBitmapStart; i <= tickBitmapEnd; i++) {\\n            uint256 bitmap = pool.tickTable(int16(i));\\n            if (bitmap == 0) continue;\\n            numberOfPopulatedBitmaps++;\\n        }\\n\\n        tickBitmap = new TickBitMapMappings[](numberOfPopulatedBitmaps);\\n        uint256 globalIndex = 0;\\n        for (int256 i = tickBitmapStart; i <= tickBitmapEnd; i++) {\\n            int16 index = int16(i);\\n            uint256 bitmap = pool.tickTable(index);\\n            if (bitmap == 0) continue;\\n\\n            tickBitmap[globalIndex] = TickBitMapMappings({\\n                index: index,\\n                value: bitmap\\n            });\\n            globalIndex++;\\n        }\\n    }\\n\\n    function _getPool(\\n        IAlgebraFactory factory,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (IAlgebraPool pool) {\\n        pool = IAlgebraPool(factory.poolByPair(tokenIn, tokenOut));\\n        require(address(pool) != address(0), \\\"Pool does not exist\\\");\\n    }\\n\\n    function _getBitmapIndexFromTick(int24 tick) internal pure returns (int16) {\\n        return int16(tick >> 8);\\n    }\\n\\n    function _getBalance(address token, address pool) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, pool)\\n        );\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0xbcd69ba0b3ef842cf44ae1a6cdc1ee1b8356256072ea604e952f1d06da7f837c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506110ab806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806306cbe3ba14610030575b600080fd5b61004361003e366004610b45565b610059565b6040516100509190610da4565b60405180910390f35b610061610947565b60008360010b136100b15760405162461bcd60e51b815260206004820152601560248201527406c6566744269746d6170416d6f756e74203c3d203605c1b60448201526064015b60405180910390fd5b60008260010b136100fd5760405162461bcd60e51b8152602060048201526016602482015275072696768744269746d6170416d6f756e74203c3d20360541b60448201526064016100a8565b610108868686610161565b9050600061013082608001518360400151604001516101279190610f5d565b60020b60081d90565b90506101518787876101428886610fa5565b61014c8887610f18565b610563565b6101208301525095945050505050565b610169610947565b6000610176858585610799565b6001600160a01b0381168084524260208086019190915260408051630d34328160e11b815290519394509192631a686502926004808201939291829003018186803b1580156101c457600080fd5b505afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc9190610bcb565b6001600160801b03166060830152604080516334324e9f60e21b815290516001600160a01b0383169163d0c93a7c916004808301926020929190829003018186803b15801561024a57600080fd5b505afa15801561025e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102829190610bb0565b826080019060020b908160020b81525050806001600160a01b03166370cf754a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cc57600080fd5b505afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103049190610bcb565b8260a001906001600160801b031690816001600160801b03168152505061039b816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561035d57600080fd5b505afa158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610a77565b82610873565b8260c00181815250506103e0816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561035d57600080fd5b8260e0018181525050806001600160a01b031663e76c01e46040518163ffffffff1660e01b815260040160e06040518083038186803b15801561042257600080fd5b505afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190610bf4565b6040898101805192151560c084015260ff93841660a084015293909216608082015261ffff9384166060808301919091529484166020820152600295860b90950b858201526001600160a01b0395861690945251909101519151633a76757360e11b815291166004820152908216906374eceae69060240160e06040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610a94565b5050506101008601516001600160a01b039091166040820152600691820b90910b602082015263ffffffff9091168152901515606090910152509392505050565b60606000610572878787610799565b90506000600185900b5b8460010b811361063257604051630633bf1f60e51b8152600182900b60048201526000906001600160a01b0385169063c677e3e09060240160206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190610c6e565b9050806106115750610620565b8261061b8161100b565b935050505b8061062a81610feb565b91505061057c565b508067ffffffffffffffff81111561064c5761064c611047565b60405190808252806020026020018201604052801561069157816020015b604080518082019091526000808252602082015281526020019060019003908161066a5790505b5092506000600186900b5b8560010b811361078c57604051630633bf1f60e51b8152600182900b600482015281906000906001600160a01b0387169063c677e3e09060240160206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610c6e565b90508061073457505061077a565b60405180604001604052808360010b81526020018281525087858151811061075e5761075e611031565b602002602001018190525083806107749061100b565b94505050505b8061078481610feb565b91505061069c565b5050505095945050505050565b60405163d9a641e160e01b81526001600160a01b03838116600483015282811660248301526000919085169063d9a641e19060440160206040518083038186803b1580156107e657600080fd5b505afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190610a77565b90506001600160a01b03811661086c5760405162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b60448201526064016100a8565b9392505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916108cd9190610d69565b600060405180830381855afa9150503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915081801561092157506020815110155b61092a57600080fd5b8080602001905181019061093e9190610c6e565b95945050505050565b604080516101608101825260008082526020808301829052835160e081018552828152908101829052808401829052606081018290526080810182905260a0810182905260c0810191909152909182019081526000602080830182905260408084018390526060808501849052608080860185905260a086018590528251908101835284815292830184905290820183905281019190915260c090910190815260200160608152602001606081525090565b80518015158114610a0957600080fd5b919050565b8035600181900b8114610a0957600080fd5b8051600281900b8114610a0957600080fd5b805171ffffffffffffffffffffffffffffffffffff81168114610a0957600080fd5b805161ffff81168114610a0957600080fd5b805160ff81168114610a0957600080fd5b600060208284031215610a8957600080fd5b815161086c8161105d565b600080600080600080600060e0888a031215610aaf57600080fd5b610ab8886109f9565b9650602088015163ffffffff81168114610ad157600080fd5b8096505060408801518060060b8114610ae957600080fd5b6060890151909550610afa8161105d565b60808901519094506affffffffffffffffffffff81168114610b1b57600080fd5b9250610b2960a08901610a20565b9150610b3760c08901610a32565b905092959891949750929550565b600080600080600060a08688031215610b5d57600080fd5b8535610b688161105d565b94506020860135610b788161105d565b93506040860135610b888161105d565b9250610b9660608701610a0e565b9150610ba460808701610a0e565b90509295509295909350565b600060208284031215610bc257600080fd5b61086c82610a20565b600060208284031215610bdd57600080fd5b81516001600160801b038116811461086c57600080fd5b600080600080600080600060e0888a031215610c0f57600080fd5b8751610c1a8161105d565b9650610c2860208901610a20565b9550610c3660408901610a54565b9450610c4460608901610a54565b9350610c5260808901610a66565b9250610c6060a08901610a66565b9150610b3760c089016109f9565b600060208284031215610c8057600080fd5b5051919050565b600081518084526020808501945080840160005b83811015610cc65781518051600190810b895290840151848901526040909701969183019101610c9b565b509495945050505050565b600081518084526020808501945080840160005b83811015610cc6578151805160020b885283015180516001600160801b03168489015280840151600f0b6040808a019190915281015160060b6060808a01919091528101516001600160a01b03166080808a019190915281015163ffffffff1660a0808a01919091520151151560c088015260e09096019590820190600101610ce5565b6000825160005b81811015610d8a5760208186018101518583015201610d70565b81811115610d99576000828501525b509190910192915050565b60208152610dbe6020820183516001600160a01b03169052565b6020820151604082015260006040830151610e38606084018260018060a01b038151168252602081015161ffff8082166020850152604083015160020b6040850152806060840151166060850152505060ff608082015116608083015260ff60a08201511660a083015260c0810151151560c08301525050565b506060830151610140610e55818501836001600160801b03169052565b60808501519150610e6c61016085018360020b9052565b60a08501516001600160801b031661018085015260c08501516101a085015260e08501516101c0850152610100850151805163ffffffff166101e0860152602081015160060b61020086015260408101516001600160a01b03166102208601526060015115156102408501526101208501516102806102608601819052909250610efa6102a0860184610c87565b9250818601519150601f1985840301818601525061093e8282610cd1565b60008160010b8360010b6000821282617fff03821381151615610f3d57610f3d61101b565b82617fff19038212811615610f5457610f5461101b565b50019392505050565b60008160020b8360020b80610f8257634e487b7160e01b600052601260045260246000fd5b627fffff19821460001982141615610f9c57610f9c61101b565b90059392505050565b60008160010b8360010b6000811281617fff1901831281151615610fcb57610fcb61101b565b81617fff018313811615610fe157610fe161101b565b5090039392505050565b60006001600160ff1b038214156110045761100461101b565b5060010190565b6000600019821415611004576110045b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461107257600080fd5b5056fea26469706673582212208130fcdb2c5fde0d0a61027f4688a8dddcaf5298cc0965917062d8c13fcd910664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806306cbe3ba14610030575b600080fd5b61004361003e366004610b45565b610059565b6040516100509190610da4565b60405180910390f35b610061610947565b60008360010b136100b15760405162461bcd60e51b815260206004820152601560248201527406c6566744269746d6170416d6f756e74203c3d203605c1b60448201526064015b60405180910390fd5b60008260010b136100fd5760405162461bcd60e51b8152602060048201526016602482015275072696768744269746d6170416d6f756e74203c3d20360541b60448201526064016100a8565b610108868686610161565b9050600061013082608001518360400151604001516101279190610f5d565b60020b60081d90565b90506101518787876101428886610fa5565b61014c8887610f18565b610563565b6101208301525095945050505050565b610169610947565b6000610176858585610799565b6001600160a01b0381168084524260208086019190915260408051630d34328160e11b815290519394509192631a686502926004808201939291829003018186803b1580156101c457600080fd5b505afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc9190610bcb565b6001600160801b03166060830152604080516334324e9f60e21b815290516001600160a01b0383169163d0c93a7c916004808301926020929190829003018186803b15801561024a57600080fd5b505afa15801561025e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102829190610bb0565b826080019060020b908160020b81525050806001600160a01b03166370cf754a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cc57600080fd5b505afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103049190610bcb565b8260a001906001600160801b031690816001600160801b03168152505061039b816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561035d57600080fd5b505afa158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610a77565b82610873565b8260c00181815250506103e0816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561035d57600080fd5b8260e0018181525050806001600160a01b031663e76c01e46040518163ffffffff1660e01b815260040160e06040518083038186803b15801561042257600080fd5b505afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190610bf4565b6040898101805192151560c084015260ff93841660a084015293909216608082015261ffff9384166060808301919091529484166020820152600295860b90950b858201526001600160a01b0395861690945251909101519151633a76757360e11b815291166004820152908216906374eceae69060240160e06040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610a94565b5050506101008601516001600160a01b039091166040820152600691820b90910b602082015263ffffffff9091168152901515606090910152509392505050565b60606000610572878787610799565b90506000600185900b5b8460010b811361063257604051630633bf1f60e51b8152600182900b60048201526000906001600160a01b0385169063c677e3e09060240160206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190610c6e565b9050806106115750610620565b8261061b8161100b565b935050505b8061062a81610feb565b91505061057c565b508067ffffffffffffffff81111561064c5761064c611047565b60405190808252806020026020018201604052801561069157816020015b604080518082019091526000808252602082015281526020019060019003908161066a5790505b5092506000600186900b5b8560010b811361078c57604051630633bf1f60e51b8152600182900b600482015281906000906001600160a01b0387169063c677e3e09060240160206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610c6e565b90508061073457505061077a565b60405180604001604052808360010b81526020018281525087858151811061075e5761075e611031565b602002602001018190525083806107749061100b565b94505050505b8061078481610feb565b91505061069c565b5050505095945050505050565b60405163d9a641e160e01b81526001600160a01b03838116600483015282811660248301526000919085169063d9a641e19060440160206040518083038186803b1580156107e657600080fd5b505afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190610a77565b90506001600160a01b03811661086c5760405162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b60448201526064016100a8565b9392505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916108cd9190610d69565b600060405180830381855afa9150503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915081801561092157506020815110155b61092a57600080fd5b8080602001905181019061093e9190610c6e565b95945050505050565b604080516101608101825260008082526020808301829052835160e081018552828152908101829052808401829052606081018290526080810182905260a0810182905260c0810191909152909182019081526000602080830182905260408084018390526060808501849052608080860185905260a086018590528251908101835284815292830184905290820183905281019190915260c090910190815260200160608152602001606081525090565b80518015158114610a0957600080fd5b919050565b8035600181900b8114610a0957600080fd5b8051600281900b8114610a0957600080fd5b805171ffffffffffffffffffffffffffffffffffff81168114610a0957600080fd5b805161ffff81168114610a0957600080fd5b805160ff81168114610a0957600080fd5b600060208284031215610a8957600080fd5b815161086c8161105d565b600080600080600080600060e0888a031215610aaf57600080fd5b610ab8886109f9565b9650602088015163ffffffff81168114610ad157600080fd5b8096505060408801518060060b8114610ae957600080fd5b6060890151909550610afa8161105d565b60808901519094506affffffffffffffffffffff81168114610b1b57600080fd5b9250610b2960a08901610a20565b9150610b3760c08901610a32565b905092959891949750929550565b600080600080600060a08688031215610b5d57600080fd5b8535610b688161105d565b94506020860135610b788161105d565b93506040860135610b888161105d565b9250610b9660608701610a0e565b9150610ba460808701610a0e565b90509295509295909350565b600060208284031215610bc257600080fd5b61086c82610a20565b600060208284031215610bdd57600080fd5b81516001600160801b038116811461086c57600080fd5b600080600080600080600060e0888a031215610c0f57600080fd5b8751610c1a8161105d565b9650610c2860208901610a20565b9550610c3660408901610a54565b9450610c4460608901610a54565b9350610c5260808901610a66565b9250610c6060a08901610a66565b9150610b3760c089016109f9565b600060208284031215610c8057600080fd5b5051919050565b600081518084526020808501945080840160005b83811015610cc65781518051600190810b895290840151848901526040909701969183019101610c9b565b509495945050505050565b600081518084526020808501945080840160005b83811015610cc6578151805160020b885283015180516001600160801b03168489015280840151600f0b6040808a019190915281015160060b6060808a01919091528101516001600160a01b03166080808a019190915281015163ffffffff1660a0808a01919091520151151560c088015260e09096019590820190600101610ce5565b6000825160005b81811015610d8a5760208186018101518583015201610d70565b81811115610d99576000828501525b509190910192915050565b60208152610dbe6020820183516001600160a01b03169052565b6020820151604082015260006040830151610e38606084018260018060a01b038151168252602081015161ffff8082166020850152604083015160020b6040850152806060840151166060850152505060ff608082015116608083015260ff60a08201511660a083015260c0810151151560c08301525050565b506060830151610140610e55818501836001600160801b03169052565b60808501519150610e6c61016085018360020b9052565b60a08501516001600160801b031661018085015260c08501516101a085015260e08501516101c0850152610100850151805163ffffffff166101e0860152602081015160060b61020086015260408101516001600160a01b03166102208601526060015115156102408501526101208501516102806102608601819052909250610efa6102a0860184610c87565b9250818601519150601f1985840301818601525061093e8282610cd1565b60008160010b8360010b6000821282617fff03821381151615610f3d57610f3d61101b565b82617fff19038212811615610f5457610f5461101b565b50019392505050565b60008160020b8360020b80610f8257634e487b7160e01b600052601260045260246000fd5b627fffff19821460001982141615610f9c57610f9c61101b565b90059392505050565b60008160010b8360010b6000811281617fff1901831281151615610fcb57610fcb61101b565b81617fff018313811615610fe157610fe161101b565b5090039392505050565b60006001600160ff1b038214156110045761100461101b565b5060010190565b6000600019821415611004576110045b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461107257600080fd5b5056fea26469706673582212208130fcdb2c5fde0d0a61027f4688a8dddcaf5298cc0965917062d8c13fcd910664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}