{
  "address": "0x4A7Dc8a7f62c46353dF2529c0789cF83C0e0e016",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILBFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "leftBinLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rightBinLength",
          "type": "uint256"
        }
      ],
      "name": "getFullState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract ILBPair",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "activeId",
              "type": "uint24"
            },
            {
              "internalType": "uint16",
              "name": "binStep",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint24",
                  "name": "id",
                  "type": "uint24"
                },
                {
                  "internalType": "uint128",
                  "name": "reserveX",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "reserveY",
                  "type": "uint128"
                }
              ],
              "internalType": "struct JoeV2StateMulticall.BinInfo[]",
              "name": "binInfos",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct JoeV2StateMulticall.StateResult[]",
          "name": "states",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbef322b9e1bb014c8a9fc6d8111b9ec04a8073a30ced8681eadaee6587770b42",
  "receipt": {
    "to": null,
    "from": "0x4dA60510480aC2c6768893bC18aBBBb7c141f58D",
    "contractAddress": "0x4A7Dc8a7f62c46353dF2529c0789cF83C0e0e016",
    "transactionIndex": 6,
    "gasUsed": "6012676",
    "logsBloom": "0x
    "blockHash": "0x53cb70448b729334d45c5ca65b914120f8599bb0c29c605ba68089257abcf8c1",
    "transactionHash": "0xbef322b9e1bb014c8a9fc6d8111b9ec04a8073a30ced8681eadaee6587770b42",
    "logs": [],
    "blockNumber": 79949189,
    "cumulativeGasUsed": "10270511",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e10f78f03b8cd184eee66c9f75407be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILBFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leftBinLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightBinLength\",\"type\":\"uint256\"}],\"name\":\"getFullState\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ILBPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"activeId\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"binStep\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"id\",\"type\":\"uint24\"},{\"internalType\":\"uint128\",\"name\":\"reserveX\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reserveY\",\"type\":\"uint128\"}],\"internalType\":\"struct JoeV2StateMulticall.BinInfo[]\",\"name\":\"binInfos\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JoeV2StateMulticall.StateResult[]\",\"name\":\"states\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal-router/modules/joe/v2/JoeV2StateMulticall.sol\":\"JoeV2StateMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/joe/v2/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\",\"keccak256\":\"0x19dc0812014644ccafede85c61b29fdfe89f43b0665aadfe050f88819c5e190f\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/joe/v2/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x11722f2a4e9811fcc434964898ccb6f0e8e3b626ba4882f0929eeb3efb3a55c8\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/joe/v2/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\",\"keccak256\":\"0xefcfb5de93dbc2b0fb6199f1d561c8eb6eb2bee4fc1e71529e9467f735d55070\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/joe/v2/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0xa3c3801a648cf43fb6a0ae6e11c740df5f253bc7f3421d355c95fbc34947f59d\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/joe/v2/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0x04fbfea1f6d4e20f23c569b2a8e4c1cfa600b4bd6cfc4dbf781b11126d413ad2\",\"license\":\"MIT\"},\"contracts/universal-router/modules/joe/v2/JoeV2StateMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ILBFactory} from \\\"../../../interfaces/joe/v2/ILBFactory.sol\\\";\\nimport {ILBPair} from \\\"../../../interfaces/joe/v2/ILBPair.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract JoeV2StateMulticall {\\n    struct BinInfo {\\n        uint24 id;\\n        uint128 reserveX;\\n        uint128 reserveY;\\n    }\\n\\n    struct StateResult {\\n        ILBPair pair;\\n        uint24 activeId;\\n        uint16 binStep;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 totalFee;\\n        BinInfo[] binInfos;\\n    }\\n\\n    function getFullState(\\n        ILBFactory factory,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint256 leftBinLength,\\n        uint256 rightBinLength\\n    ) external view returns (StateResult[] memory states) {\\n        ILBFactory.LBPairInformation[] memory pairsInformation = factory.getAllLBPairs(tokenX, tokenY);\\n        uint256 numOfAvailablePairs = 0;\\n\\n        for (uint256 i = 0; i < pairsInformation.length; i++) {\\n            if (pairsInformation[i].ignoredForRouting) {\\n                continue;\\n            } else {\\n                numOfAvailablePairs++;\\n            }\\n        }\\n\\n        states = new StateResult[](numOfAvailablePairs);\\n        for (uint256 i = 0; i < pairsInformation.length; i++) {\\n            ILBFactory.LBPairInformation memory pairInformation = pairsInformation[i];\\n            if (pairInformation.ignoredForRouting) {\\n                continue;\\n            } else {\\n                ILBPair pair = pairInformation.LBPair;\\n                uint16 binStep = pairInformation.binStep;\\n                uint24 activeId = pair.getActiveId();\\n                StateResult memory state;\\n                state.pair = pair;\\n                state.activeId = activeId;\\n                state.binStep = binStep;\\n                (state.reserve0, state.reserve1) = pair.getReserves();\\n                {\\n                    (uint16 baseFactor, , , , uint24 variableFeeControl, , ) = pair.getStaticFeeParameters();\\n                    (uint24 volatilityAccumulator, , , ) = pair.getVariableFeeParameters();\\n                    uint256 baseFee = uint256(baseFactor) * binStep * 1e10;\\n                    uint256 variableFee;\\n                    if (variableFeeControl != 0) {\\n                        uint256 prod = uint256(volatilityAccumulator) * binStep;\\n                        variableFee = (prod * prod * variableFeeControl + 99) / 100;\\n                    }\\n                    state.totalFee = baseFee + variableFee;\\n                }\\n                state.binInfos = _getBinInfos(pair, leftBinLength, rightBinLength);\\n                states[i] = state;\\n            }\\n        }\\n    }\\n\\n    function _getBinInfo( ILBPair pair, uint24 id) internal view returns (BinInfo memory) {\\n        (uint128 binReserveX, uint128 binReserveY) = pair.getBin(id);\\n        return BinInfo({\\n            id: id,\\n            reserveX: binReserveX,\\n            reserveY: binReserveY\\n        });\\n    }\\n\\n    function _getBinInfos(\\n        ILBPair pair,\\n        uint256 leftBinLength,\\n        uint256 rightBinLength\\n    ) internal view returns (BinInfo[] memory binInfos) {\\n        binInfos = new BinInfo[](leftBinLength + rightBinLength + 1);\\n        uint24 activeId = pair.getActiveId();\\n        binInfos[leftBinLength] = _getBinInfo(pair, activeId);\\n\\n        uint24 leftBinId = activeId;\\n        for (uint256 i = 0; i < leftBinLength; i++) {\\n            uint24 nextLeftBinId = pair.getNextNonEmptyBin(false, leftBinId);\\n            binInfos[leftBinLength - i - 1] = _getBinInfo(pair, nextLeftBinId);\\n            leftBinId = nextLeftBinId;\\n        }\\n\\n        uint24 rightBinId = activeId;\\n        for (uint256 i = 0; i < rightBinLength; i++) {\\n            uint24 nextRightBinId = pair.getNextNonEmptyBin(true, rightBinId);\\n            binInfos[leftBinLength + i + 1] = _getBinInfo(pair, nextRightBinId);\\n            rightBinId = nextRightBinId;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x12fa9a9d4fdffe92333813321adafa53eb29bc06b7f8a88de6e655990c56be2b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e64806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638b4eb1fc14610030575b600080fd5b61004361003e366004610a4a565b610059565b6040516100509190610c42565b60405180910390f35b604051636622e0d760e01b81526001600160a01b0385811660048301528481166024830152606091600091881690636622e0d79060440160006040518083038186803b1580156100a857600080fd5b505afa1580156100bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e49190810190610946565b90506000805b825181101561013b5782818151811061010557610105610dea565b6020026020010151606001511561011b57610129565b8161012581610db9565b9250505b8061013381610db9565b9150506100ea565b508067ffffffffffffffff81111561015557610155610e00565b60405190808252806020026020018201604052801561018e57816020015b61017b6108a6565b8152602001906001900390816101735790505b50925060005b82518110156104de5760008382815181106101b1576101b1610dea565b602002602001015190508060600151156101cb57506104cc565b6000816020015190506000826000015190506000826001600160a01b031663dbe65edc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021857600080fd5b505afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190610b5e565b905061025a6108a6565b6001600160a01b03841680825262ffffff8316602083015261ffff84166040808401919091528051630240bc6b60e21b81528151630902f1ac92600480840193919291829003018186803b1580156102b157600080fd5b505afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e99190610aa5565b6001600160801b039081166080840152166060820152604080516307ca0de360e41b8152905160009182916001600160a01b03881691637ca0de309160048083019260e0929190829003018186803b15801561034457600080fd5b505afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c9190610ad8565b5050945050505091506000866001600160a01b0316638d7024e56040518163ffffffff1660e01b815260040160806040518083038186803b1580156103c057600080fd5b505afa1580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610b80565b505050905060008661ffff168461ffff166104139190610d83565b610422906402540be400610d83565b9050600062ffffff84161561047d57600061044661ffff8a1662ffffff8616610d83565b9050606462ffffff861661045a8380610d83565b6104649190610d83565b61046f906063610d49565b6104799190610d61565b9150505b6104878183610d49565b8660a001818152505050505050506104a0848c8c6104ea565b8160c00181905250808987815181106104bb576104bb610dea565b602002602001018190525050505050505b806104d681610db9565b915050610194565b50505095945050505050565b60606104f68284610d49565b610501906001610d49565b67ffffffffffffffff81111561051957610519610e00565b60405190808252806020026020018201604052801561056457816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816105375790505b5090506000846001600160a01b031663dbe65edc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a257600080fd5b505afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610b5e565b90506105e685826107d6565b8285815181106105f8576105f8610dea565b60209081029190910101528060005b858110156106e75760405163a41a01fb60e01b815260006004820181905262ffffff84166024830152906001600160a01b0389169063a41a01fb9060440160206040518083038186803b15801561065d57600080fd5b505afa158015610671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106959190610b5e565b90506106a188826107d6565b8560016106ae858b610da2565b6106b89190610da2565b815181106106c8576106c8610dea565b60209081029190910101529150806106df81610db9565b915050610607565b508160005b858110156107cb5760405163a41a01fb60e01b81526001600482015262ffffff831660248201526000906001600160a01b038a169063a41a01fb9060440160206040518083038186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a9190610b5e565b905061078689826107d6565b86610791848b610d49565b61079c906001610d49565b815181106107ac576107ac610dea565b60209081029190910101529150806107c381610db9565b9150506106ec565b505050509392505050565b6040805160608101825260008082526020820181905291810191909152604051630157d2d160e31b815262ffffff8316600482015260009081906001600160a01b03861690630abe968890602401604080518083038186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108739190610aa5565b6040805160608101825262ffffff9790971687526001600160801b03928316602088015291169085015250919392505050565b6040518060e0016040528060006001600160a01b03168152602001600062ffffff168152602001600061ffff168152602001600081526020016000815260200160008152602001606081525090565b8051801515811461090557600080fd5b919050565b80516001600160801b038116811461090557600080fd5b805161ffff8116811461090557600080fd5b805162ffffff8116811461090557600080fd5b6000602080838503121561095957600080fd5b825167ffffffffffffffff8082111561097157600080fd5b818501915085601f83011261098557600080fd5b81518181111561099757610997610e00565b6109a5848260051b01610d18565b8181528481019250838501600783901b850186018910156109c557600080fd5b60009450845b83811015610a3c57608080838c0312156109e3578687fd5b6109eb610cef565b6109f484610921565b815288840151610a0381610e16565b818a01526040610a148582016108f5565b908201526060610a258582016108f5565b9082015286529487019491909101906001016109cb565b509098975050505050505050565b600080600080600060a08688031215610a6257600080fd5b8535610a6d81610e16565b94506020860135610a7d81610e16565b93506040860135610a8d81610e16565b94979396509394606081013594506080013592915050565b60008060408385031215610ab857600080fd5b610ac18361090a565b9150610acf6020840161090a565b90509250929050565b600080600080600080600060e0888a031215610af357600080fd5b610afc88610921565b9650610b0a60208901610921565b9550610b1860408901610921565b9450610b2660608901610921565b9350610b3460808901610933565b9250610b4260a08901610921565b9150610b5060c08901610933565b905092959891949750929550565b600060208284031215610b7057600080fd5b610b7982610933565b9392505050565b60008060008060808587031215610b9657600080fd5b610b9f85610933565b9350610bad60208601610933565b9250610bbb60408601610933565b9150606085015164ffffffffff81168114610bd557600080fd5b939692955090935050565b600081518084526020808501945080840160005b83811015610c37578151805162ffffff168852838101516001600160801b03908116858a0152604091820151169088015260609096019590820190600101610bf4565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610a3c57888303603f19018552815180516001600160a01b031684528781015162ffffff16888501528681015161ffff1687850152606080820151908501526080808201519085015260a0808201519085015260c09081015160e091850182905290610cdb81860183610be0565b968901969450505090860190600101610c69565b6040516080810167ffffffffffffffff81118282101715610d1257610d12610e00565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d4157610d41610e00565b604052919050565b60008219821115610d5c57610d5c610dd4565b500190565b600082610d7e57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610d9d57610d9d610dd4565b500290565b600082821015610db457610db4610dd4565b500390565b6000600019821415610dcd57610dcd610dd4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e2b57600080fd5b5056fea26469706673582212204ffd78312e068d60fd4f558055889a1093f51d7f4a606ae47b739cafb660366a64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638b4eb1fc14610030575b600080fd5b61004361003e366004610a4a565b610059565b6040516100509190610c42565b60405180910390f35b604051636622e0d760e01b81526001600160a01b0385811660048301528481166024830152606091600091881690636622e0d79060440160006040518083038186803b1580156100a857600080fd5b505afa1580156100bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e49190810190610946565b90506000805b825181101561013b5782818151811061010557610105610dea565b6020026020010151606001511561011b57610129565b8161012581610db9565b9250505b8061013381610db9565b9150506100ea565b508067ffffffffffffffff81111561015557610155610e00565b60405190808252806020026020018201604052801561018e57816020015b61017b6108a6565b8152602001906001900390816101735790505b50925060005b82518110156104de5760008382815181106101b1576101b1610dea565b602002602001015190508060600151156101cb57506104cc565b6000816020015190506000826000015190506000826001600160a01b031663dbe65edc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021857600080fd5b505afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190610b5e565b905061025a6108a6565b6001600160a01b03841680825262ffffff8316602083015261ffff84166040808401919091528051630240bc6b60e21b81528151630902f1ac92600480840193919291829003018186803b1580156102b157600080fd5b505afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e99190610aa5565b6001600160801b039081166080840152166060820152604080516307ca0de360e41b8152905160009182916001600160a01b03881691637ca0de309160048083019260e0929190829003018186803b15801561034457600080fd5b505afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c9190610ad8565b5050945050505091506000866001600160a01b0316638d7024e56040518163ffffffff1660e01b815260040160806040518083038186803b1580156103c057600080fd5b505afa1580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610b80565b505050905060008661ffff168461ffff166104139190610d83565b610422906402540be400610d83565b9050600062ffffff84161561047d57600061044661ffff8a1662ffffff8616610d83565b9050606462ffffff861661045a8380610d83565b6104649190610d83565b61046f906063610d49565b6104799190610d61565b9150505b6104878183610d49565b8660a001818152505050505050506104a0848c8c6104ea565b8160c00181905250808987815181106104bb576104bb610dea565b602002602001018190525050505050505b806104d681610db9565b915050610194565b50505095945050505050565b60606104f68284610d49565b610501906001610d49565b67ffffffffffffffff81111561051957610519610e00565b60405190808252806020026020018201604052801561056457816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816105375790505b5090506000846001600160a01b031663dbe65edc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a257600080fd5b505afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610b5e565b90506105e685826107d6565b8285815181106105f8576105f8610dea565b60209081029190910101528060005b858110156106e75760405163a41a01fb60e01b815260006004820181905262ffffff84166024830152906001600160a01b0389169063a41a01fb9060440160206040518083038186803b15801561065d57600080fd5b505afa158015610671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106959190610b5e565b90506106a188826107d6565b8560016106ae858b610da2565b6106b89190610da2565b815181106106c8576106c8610dea565b60209081029190910101529150806106df81610db9565b915050610607565b508160005b858110156107cb5760405163a41a01fb60e01b81526001600482015262ffffff831660248201526000906001600160a01b038a169063a41a01fb9060440160206040518083038186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a9190610b5e565b905061078689826107d6565b86610791848b610d49565b61079c906001610d49565b815181106107ac576107ac610dea565b60209081029190910101529150806107c381610db9565b9150506106ec565b505050509392505050565b6040805160608101825260008082526020820181905291810191909152604051630157d2d160e31b815262ffffff8316600482015260009081906001600160a01b03861690630abe968890602401604080518083038186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108739190610aa5565b6040805160608101825262ffffff9790971687526001600160801b03928316602088015291169085015250919392505050565b6040518060e0016040528060006001600160a01b03168152602001600062ffffff168152602001600061ffff168152602001600081526020016000815260200160008152602001606081525090565b8051801515811461090557600080fd5b919050565b80516001600160801b038116811461090557600080fd5b805161ffff8116811461090557600080fd5b805162ffffff8116811461090557600080fd5b6000602080838503121561095957600080fd5b825167ffffffffffffffff8082111561097157600080fd5b818501915085601f83011261098557600080fd5b81518181111561099757610997610e00565b6109a5848260051b01610d18565b8181528481019250838501600783901b850186018910156109c557600080fd5b60009450845b83811015610a3c57608080838c0312156109e3578687fd5b6109eb610cef565b6109f484610921565b815288840151610a0381610e16565b818a01526040610a148582016108f5565b908201526060610a258582016108f5565b9082015286529487019491909101906001016109cb565b509098975050505050505050565b600080600080600060a08688031215610a6257600080fd5b8535610a6d81610e16565b94506020860135610a7d81610e16565b93506040860135610a8d81610e16565b94979396509394606081013594506080013592915050565b60008060408385031215610ab857600080fd5b610ac18361090a565b9150610acf6020840161090a565b90509250929050565b600080600080600080600060e0888a031215610af357600080fd5b610afc88610921565b9650610b0a60208901610921565b9550610b1860408901610921565b9450610b2660608901610921565b9350610b3460808901610933565b9250610b4260a08901610921565b9150610b5060c08901610933565b905092959891949750929550565b600060208284031215610b7057600080fd5b610b7982610933565b9392505050565b60008060008060808587031215610b9657600080fd5b610b9f85610933565b9350610bad60208601610933565b9250610bbb60408601610933565b9150606085015164ffffffffff81168114610bd557600080fd5b939692955090935050565b600081518084526020808501945080840160005b83811015610c37578151805162ffffff168852838101516001600160801b03908116858a0152604091820151169088015260609096019590820190600101610bf4565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610a3c57888303603f19018552815180516001600160a01b031684528781015162ffffff16888501528681015161ffff1687850152606080820151908501526080808201519085015260a0808201519085015260c09081015160e091850182905290610cdb81860183610be0565b968901969450505090860190600101610c69565b6040516080810167ffffffffffffffff81118282101715610d1257610d12610e00565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d4157610d41610e00565b604052919050565b60008219821115610d5c57610d5c610dd4565b500190565b600082610d7e57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610d9d57610d9d610dd4565b500290565b600082821015610db457610db4610dd4565b500390565b6000600019821415610dcd57610dcd610dd4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e2b57600080fd5b5056fea26469706673582212204ffd78312e068d60fd4f558055889a1093f51d7f4a606ae47b739cafb660366a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}