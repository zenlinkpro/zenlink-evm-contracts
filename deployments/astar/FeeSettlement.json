{
  "address": "0xAFCCA0f68e0883b797c71525377DE46B2E65AB28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract IReferralStorage",
          "name": "_referralStorage",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeDiscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeRebate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientOutAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeDiscount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeRebate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeShare",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "Candidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discountAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebateAmount",
          "type": "uint256"
        }
      ],
      "name": "PayRebates",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeDiscount",
          "type": "uint256"
        }
      ],
      "name": "SetFeeDiscount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRebate",
          "type": "uint256"
        }
      ],
      "name": "SetFeeRebate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeShare",
          "type": "uint256"
        }
      ],
      "name": "SetFeeShare",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IReferralStorage",
          "name": "referralStorage",
          "type": "address"
        }
      ],
      "name": "SetReferralStorage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminCandidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidateConfirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRebate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "processSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralStorage",
      "outputs": [
        {
          "internalType": "contract IReferralStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "setAdminCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeDiscount",
          "type": "uint256"
        }
      ],
      "name": "setFeeDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRebate",
          "type": "uint256"
        }
      ],
      "name": "setFeeRebate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeShare",
          "type": "uint256"
        }
      ],
      "name": "setFeeShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IReferralStorage",
          "name": "_referralStorage",
          "type": "address"
        }
      ],
      "name": "setReferralStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x00eb4ce9dc8fda95f57000595243dd2a018d4696590efc8538361e5f0ca4b9f6",
  "receipt": {
    "to": null,
    "from": "0x4dA60510480aC2c6768893bC18aBBBb7c141f58D",
    "contractAddress": "0xAFCCA0f68e0883b797c71525377DE46B2E65AB28",
    "transactionIndex": 51,
    "gasUsed": "1218639",
    "logsBloom": "0x
    "blockHash": "0x814e1f15a818fbd858701ddacc95d0df02b84e5fdb85eedf7a847558e61ee04d",
    "transactionHash": "0x00eb4ce9dc8fda95f57000595243dd2a018d4696590efc8538361e5f0ca4b9f6",
    "logs": [],
    "blockNumber": 2983187,
    "cumulativeGasUsed": "6602906",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAeaaf0e2c81Af264101B9129C00F4440cCF0F720",
    "0xf6EA707CBf38f2Acf3bf029429B55192c61c67ad",
    10,
    2000,
    2500,
    "0x4dA60510480aC2c6768893bC18aBBBb7c141f58D"
  ],
  "numDeployments": 1,
  "solcInputHash": "3168633c3e9b08bae58c555bb1ad218f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IReferralStorage\",\"name\":\"_referralStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRebate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientOutAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeDiscount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeRebate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeShare\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"Candidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebateAmount\",\"type\":\"uint256\"}],\"name\":\"PayRebates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDiscount\",\"type\":\"uint256\"}],\"name\":\"SetFeeDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRebate\",\"type\":\"uint256\"}],\"name\":\"SetFeeRebate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeShare\",\"type\":\"uint256\"}],\"name\":\"SetFeeShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IReferralStorage\",\"name\":\"referralStorage\",\"type\":\"address\"}],\"name\":\"SetReferralStorage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRebate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"processSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralStorage\",\"outputs\":[{\"internalType\":\"contract IReferralStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setAdminCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeDiscount\",\"type\":\"uint256\"}],\"name\":\"setFeeDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRebate\",\"type\":\"uint256\"}],\"name\":\"setFeeRebate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeShare\",\"type\":\"uint256\"}],\"name\":\"setFeeShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReferralStorage\",\"name\":\"_referralStorage\",\"type\":\"address\"}],\"name\":\"setReferralStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"processSettlement(address,uint256,address,address)\":{\"params\":{\"amountOutMin\":\"Minimum amount of the output token\",\"from\":\"Trader address\",\"to\":\"Receiver address\",\"tokenOut\":\"Address of the output token\"}},\"setFeeDiscount(uint256)\":{\"params\":{\"_feeDiscount\":\"Percent of feeDiscount\"}},\"setFeeRebate(uint256)\":{\"params\":{\"_feeRebate\":\"Percent of feeRebate\"}},\"setFeeShare(uint256)\":{\"params\":{\"_feeShare\":\"Percent of fee\"}},\"setFeeTo(address)\":{\"params\":{\"_feeTo\":\"FeeTo address\"}},\"setReferralStorage(address)\":{\"params\":{\"_referralStorage\":\"ReferralStorage address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"processSettlement(address,uint256,address,address)\":{\"notice\":\"Executes the fee settlement, including pay referrer rebates\"},\"setFeeDiscount(uint256)\":{\"notice\":\"Set feeDicount by admin\"},\"setFeeRebate(uint256)\":{\"notice\":\"Set feeRebate by admin\"},\"setFeeShare(uint256)\":{\"notice\":\"Set feeShare by admin\"},\"setFeeTo(address)\":{\"notice\":\"Set feeTo by admin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal-router/modules/FeeSettlement.sol\":\"FeeSettlement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/libraries/AdminUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract AdminUpgradeable {\\n    address public admin;\\n    address public adminCandidate;\\n\\n    function _initializeAdmin(address _admin) internal {\\n        require(admin == address(0), \\\"admin already set\\\");\\n\\n        admin = _admin;\\n    }\\n\\n    function candidateConfirm() external {\\n        require(msg.sender == adminCandidate, \\\"not Candidate\\\");\\n        emit AdminChanged(admin, adminCandidate);\\n\\n        admin = adminCandidate;\\n        adminCandidate = address(0);\\n    }\\n\\n    function setAdminCandidate(address _candidate) external onlyAdmin {\\n        adminCandidate = _candidate;\\n        emit Candidate(_candidate);\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    event Candidate(address indexed newAdmin);\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n}\",\"keccak256\":\"0x1f6a33fd54009078e00c3b586e2b9bb359ff99d9c5cb87e3e32ec109480f99ae\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary Constants {\\n    /// @dev Used as a flag for identifying the transfer of ETH instead of a token\\n    address internal constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n}\\n\",\"keccak256\":\"0x6bbe97d0b603fa921b1ff2cfece57e2075d91287cb1c4605bd11b64bc280faa5\",\"license\":\"MIT\"},\"contracts/referrals/interfaces/IReferralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IReferralStorage {\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    function getReferralInfo(address _account) external view returns (bytes32, address);\\n    function getOwnedCodes(address _account) external view returns (bytes32[] memory);\\n    function setReferralCodeByUser(bytes32 _code) external;\\n}\\n\",\"keccak256\":\"0x992b57818692467efeb439ee9b0a64641e88977f9e4238ea02be3089eeb533e3\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/IFeeSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFeeSettlement {\\n    function processSettlement(address tokenOut, uint256 amountOutMin, address from, address to) external;\\n}\\n\",\"keccak256\":\"0xbddb002e45c3382e04b3551b8e6d6c0e0908eb1741416cc1131098a014daf708\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x118c37f936d4ef54a98bb692edee39083dc6258d733fc9d185027eb73df15552\",\"license\":\"MIT\"},\"contracts/universal-router/modules/FeeSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {SafeTransferLib} from 'lib/solmate/src/utils/SafeTransferLib.sol';\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\nimport {IReferralStorage} from \\\"../../referrals/interfaces/IReferralStorage.sol\\\";\\nimport {AdminUpgradeable} from \\\"../../libraries/AdminUpgradeable.sol\\\";\\nimport {IFeeSettlement} from \\\"../interfaces/IFeeSettlement.sol\\\";\\nimport {Constants} from \\\"../../libraries/Constants.sol\\\";\\n\\ncontract FeeSettlement is IFeeSettlement, ReentrancyGuard, AdminUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeTransferLib for address;\\n\\n    address public immutable weth;\\n\\n    uint256 public constant BASIS_POINTS = 10000;\\n    uint256 public constant MAX_FEE_POINTS = 30; // 0.3%\\n\\n    IReferralStorage public referralStorage;\\n    uint256 public feeShare; // e.g. 10 for 0.1%\\n    uint256 public feeDiscount; // e.g. 2000 for 20%\\n    uint256 public feeRebate; // e.g. 5000 for 50%/50%, 2500 for 75% fee/25% rebate\\n    address public feeTo;\\n\\n    error InvalidFeeShare();\\n    error InvalidFeeDiscount();\\n    error InvalidFeeRebate();\\n    error InsufficientOutAmount();\\n\\n    event PayRebates(\\n        address trader,\\n        address referrer,\\n        address tokenOut,\\n        uint256 discountAmount,\\n        uint256 rebateAmount\\n    );\\n    event SetReferralStorage(IReferralStorage referralStorage);\\n    event SetFeeShare(uint256 feeShare);\\n    event SetFeeDiscount(uint256 feeDiscount);\\n    event SetFeeRebate(uint256 feeRebate);\\n    event SetFeeTo(address feeTo);\\n\\n    constructor(\\n        address _weth, \\n        IReferralStorage _referralStorage,\\n        uint256 _feeShare,\\n        uint256 _feeDiscount,\\n        uint256 _feeRebate,\\n        address _feeTo\\n    ) {\\n        weth = _weth;\\n        referralStorage = _referralStorage;\\n\\n        if (_feeShare > MAX_FEE_POINTS) revert InvalidFeeShare();\\n        if (_feeDiscount > BASIS_POINTS) revert InvalidFeeDiscount();\\n        if (_feeRebate > BASIS_POINTS) revert InvalidFeeRebate();\\n        feeShare = _feeShare;\\n        feeDiscount = _feeDiscount;\\n        feeRebate = _feeRebate;\\n        feeTo = _feeTo;\\n        _initializeAdmin(msg.sender);\\n    }\\n\\n    /// @notice To receive ETH from router\\n    receive() external payable {}\\n\\n    /// @notice Executes the fee settlement, including pay referrer rebates\\n    /// @param tokenOut Address of the output token\\n    /// @param amountOutMin Minimum amount of the output token\\n    /// @param from Trader address\\n    /// @param to Receiver address\\n    function processSettlement(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address from,\\n        address to\\n    ) external override nonReentrant {\\n        bool isNative = tokenOut == Constants.NATIVE_ADDRESS;\\n        uint256 amount = isNative \\n            ? address(this).balance \\n            : IERC20(tokenOut).balanceOf(address(this));\\n        if (amount < amountOutMin) revert InsufficientOutAmount();\\n        (, address referrer) = referralStorage.getReferralInfo(from);\\n        uint256 basisfee = (amount * feeShare) / BASIS_POINTS;\\n        uint256 fee = referrer == address(0) \\n            ? basisfee\\n            : (basisfee * (BASIS_POINTS - feeDiscount)) / BASIS_POINTS;\\n        if (amount - fee < amountOutMin) {\\n            // ensure that fee do not cause the transaction to fail \\n            fee = amount - amountOutMin;\\n        }\\n        if (referrer != address(0)) {\\n            uint256 rebateAmount = (fee * feeRebate) / BASIS_POINTS;\\n            if (isNative) {\\n                IWETH(weth).deposit{value: fee}();\\n                IERC20(weth).safeTransfer(referrer, rebateAmount);\\n                IERC20(weth).safeTransfer(feeTo, IERC20(weth).balanceOf(address(this)));\\n            } else {\\n                IERC20(tokenOut).safeTransfer(referrer, rebateAmount);\\n                IERC20(tokenOut).safeTransfer(feeTo, fee - rebateAmount);\\n            }\\n            emit PayRebates(from, referrer, tokenOut, basisfee - fee, rebateAmount);\\n        } else {\\n            if (isNative) {\\n                IWETH(weth).deposit{value: fee}();\\n                IERC20(weth).safeTransfer(feeTo, IERC20(weth).balanceOf(address(this)));\\n            } else {\\n                IERC20(tokenOut).safeTransfer(feeTo, fee);\\n            }\\n        }\\n        if (isNative) {\\n            to.safeTransferETH(amount - fee);\\n        } else {\\n            IERC20(tokenOut).safeTransfer(to, amount - fee);\\n        }\\n    }\\n\\n    // @notice Set referralStorage by admin\\n    /// @param _referralStorage ReferralStorage address\\n    function setReferralStorage(IReferralStorage _referralStorage) external onlyAdmin {\\n        referralStorage = _referralStorage;\\n        emit SetReferralStorage(_referralStorage);\\n    }\\n\\n    /// @notice Set feeShare by admin\\n    /// @param _feeShare Percent of fee\\n    function setFeeShare(uint256 _feeShare) external onlyAdmin {\\n        if (_feeShare > MAX_FEE_POINTS) revert InvalidFeeShare();\\n        feeShare = _feeShare;\\n        emit SetFeeShare(_feeShare);\\n    }\\n\\n    /// @notice Set feeDicount by admin\\n    /// @param _feeDiscount Percent of feeDiscount\\n    function setFeeDiscount(uint256 _feeDiscount) external onlyAdmin {\\n        if (_feeDiscount > BASIS_POINTS) revert InvalidFeeDiscount();\\n        feeDiscount = _feeDiscount;\\n        emit SetFeeDiscount(_feeDiscount);\\n    }\\n\\n    /// @notice Set feeRebate by admin\\n    /// @param _feeRebate Percent of feeRebate\\n    function setFeeRebate(uint256 _feeRebate) external onlyAdmin {\\n        if (_feeRebate > BASIS_POINTS) revert InvalidFeeRebate();\\n        feeRebate = _feeRebate;\\n        emit SetFeeRebate(_feeRebate);\\n    }\\n\\n    /// @notice Set feeTo by admin\\n    /// @param _feeTo FeeTo address\\n    function setFeeTo(address _feeTo) external onlyAdmin {\\n        feeTo = _feeTo;\\n        emit SetFeeTo(_feeTo);\\n    }\\n}\\n\",\"keccak256\":\"0xb6827cdda702b8cb275e442cf46f1f0043ca1c206e48e8511575a09b2468417e\",\"license\":\"MIT\"},\"lib/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200147838038062001478833981016040819052620000349162000186565b6001600055606086901b6001600160601b031916608052600380546001600160a01b0319166001600160a01b038716179055601e841115620000895760405163e8cdd5bd60e01b815260040160405180910390fd5b612710831115620000ad57604051630823099f60e31b815260040160405180910390fd5b612710821115620000d15760405163b8e2132f60e01b815260040160405180910390fd5b600484905560058390556006829055600780546001600160a01b0319166001600160a01b038316179055620001063362000112565b50505050505062000210565b6001546001600160a01b031615620001645760405162461bcd60e51b815260206004820152601160248201527018591b5a5b88185b1c9958591e481cd95d607a1b604482015260640160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008060008060008060c08789031215620001a057600080fd5b8651620001ad81620001f7565b6020880151909650620001c081620001f7565b8095505060408701519350606087015192506080870151915060a0870151620001e981620001f7565b809150509295509295509295565b6001600160a01b03811681146200020d57600080fd5b50565b60805160601c61121f62000259600039600081816101be0152818161085b015281816108d90152818161092c015281816109b301528181610a950152610b2e015261121f6000f3fe60806040526004361061010c5760003560e01c8063b3cba4a211610095578063e9ade90e11610064578063e9ade90e146102c5578063ee180773146102db578063f46901ed146102fb578063f5a632661461031b578063f851a4401461033b57600080fd5b8063b3cba4a21461025a578063bee514e71461027a578063bf7ca56e1461029a578063e1f1c4a7146102af57600080fd5b80633fc8cef3116100dc5780633fc8cef3146101ac5780633ffcf5ab146101e0578063731c2f811461020457806396de7aa01461021a578063ae4d7f9a1461023a57600080fd5b80626cc35e14610118578063017e7e58146101555780633accfa6c146101755780633f0232301461019557600080fd5b3661011357005b600080fd5b34801561012457600080fd5b50600354610138906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016157600080fd5b50600754610138906001600160a01b031681565b34801561018157600080fd5b50600254610138906001600160a01b031681565b3480156101a157600080fd5b506101aa61035b565b005b3480156101b857600080fd5b506101387f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ec57600080fd5b506101f660055481565b60405190815260200161014c565b34801561021057600080fd5b506101f660065481565b34801561022657600080fd5b506101aa610235366004610fcd565b610410565b34801561024657600080fd5b506101aa610255366004610fcd565b610484565b34801561026657600080fd5b506101aa61027536600461108f565b610503565b34801561028657600080fd5b506101aa61029536600461108f565b610584565b3480156102a657600080fd5b506101f6601e81565b3480156102bb57600080fd5b506101f661271081565b3480156102d157600080fd5b506101f660045481565b3480156102e757600080fd5b506101aa6102f6366004610fea565b610606565b34801561030757600080fd5b506101aa610316366004610fcd565b610bd6565b34801561032757600080fd5b506101aa61033636600461108f565b610c4e565b34801561034757600080fd5b50600154610138906001600160a01b031681565b6002546001600160a01b031633146103aa5760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b60448201526064015b60405180910390fd5b6002546001546040516001600160a01b0392831692909116907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a360028054600180546001600160a01b03199081166001600160a01b03841617909155169055565b6001546001600160a01b0316331461043a5760405162461bcd60e51b81526004016103a190611110565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b6001546001600160a01b031633146104ae5760405162461bcd60e51b81526004016103a190611110565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f828abcccea18192c21d645e575652c49e20b986dab777906fc473d056b01b6a8906020015b60405180910390a150565b6001546001600160a01b0316331461052d5760405162461bcd60e51b81526004016103a190611110565b601e81111561054f5760405163e8cdd5bd60e01b815260040160405180910390fd5b60048190556040518181527f110c64f8b5e69db3c5073ef38ff8c9b9153222e04cb538a860888e5822fb42d1906020016104f8565b6001546001600160a01b031633146105ae5760405162461bcd60e51b81526004016103a190611110565b6127108111156105d157604051630823099f60e31b815260040160405180910390fd5b60058190556040518181527fae8d964c051edf9b7a9b351b2e33c93192db37891822f728b472c9abdb0f15af906020016104f8565b600260005414156106595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103a1565b600260009081556001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee149081610702576040516370a0823160e01b81523060048201526001600160a01b038716906370a082319060240160206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd91906110a8565b610704565b475b905084811015610727576040516357084d7360e11b815260040160405180910390fd5b6003546040516310c3a57160e11b81526001600160a01b03868116600483015260009216906321874ae290602401604080518083038186803b15801561076c57600080fd5b505afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a4919061105f565b9150506000612710600454846107ba9190611155565b6107c49190611133565b905060006001600160a01b03831615610803576127106005546127106107ea9190611174565b6107f49084611155565b6107fe9190611133565b610805565b815b9050876108128286611174565b1015610825576108228885611174565b90505b6001600160a01b03831615610a8d576000612710600654836108479190611155565b6108519190611133565b905085156109df577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b506109049350506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915086905083610cd0565b6007546040516370a0823160e01b81523060048201526109da916001600160a01b03908116917f0000000000000000000000000000000000000000000000000000000000000000909116906370a08231906024015b60206040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a991906110a8565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610cd0565b610a1e565b6109f36001600160a01b038b168583610cd0565b600754610a1e906001600160a01b0316610a0d8385611174565b6001600160a01b038d169190610cd0565b7f11c13103c3d0e9afd6568e050834acf21c224630afc32309390e8c23e27677d488858c610a4c8688611174565b604080516001600160a01b0395861681529385166020850152919093169082015260608101919091526080810183905260a00160405180910390a150610b7f565b8415610b65577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610aee57600080fd5b505af1158015610b02573d6000803e3d6000fd5b50506007546040516370a0823160e01b8152306004820152610b6094506001600160a01b0391821693507f000000000000000000000000000000000000000000000000000000000000000090911691506370a0823190602401610959565b610b7f565b600754610b7f906001600160a01b038b8116911683610cd0565b8415610ba757610ba2610b928286611174565b6001600160a01b03881690610d27565b610bc6565b610bc686610bb58387611174565b6001600160a01b038c169190610cd0565b5050600160005550505050505050565b6001546001600160a01b03163314610c005760405162461bcd60e51b81526004016103a190611110565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e906020016104f8565b6001546001600160a01b03163314610c785760405162461bcd60e51b81526004016103a190611110565b612710811115610c9b5760405163b8e2132f60e01b815260040160405180910390fd5b60068190556040518181527fa4ed15e1d9307ea38cbd10d8b102a75209f076ff571aab3007fcabaa8351059b906020016104f8565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610d22908490610d78565b505050565b600080600080600085875af1905080610d225760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016103a1565b6000610dcd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e4a9092919063ffffffff16565b805190915015610d225780806020019051810190610deb919061103d565b610d225760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103a1565b6060610e598484600085610e63565b90505b9392505050565b606082471015610ec45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103a1565b6001600160a01b0385163b610f1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a1565b600080866001600160a01b03168587604051610f3791906110c1565b60006040518083038185875af1925050503d8060008114610f74576040519150601f19603f3d011682016040523d82523d6000602084013e610f79565b606091505b5091509150610f89828286610f94565b979650505050505050565b60608315610fa3575081610e5c565b825115610fb35782518084602001fd5b8160405162461bcd60e51b81526004016103a191906110dd565b600060208284031215610fdf57600080fd5b8135610e5c816111d1565b6000806000806080858703121561100057600080fd5b843561100b816111d1565b9350602085013592506040850135611022816111d1565b91506060850135611032816111d1565b939692955090935050565b60006020828403121561104f57600080fd5b81518015158114610e5c57600080fd5b6000806040838503121561107257600080fd5b825191506020830151611084816111d1565b809150509250929050565b6000602082840312156110a157600080fd5b5035919050565b6000602082840312156110ba57600080fd5b5051919050565b600082516110d381846020870161118b565b9190910192915050565b60208152600082518060208401526110fc81604085016020870161118b565b601f01601f19169190910160400192915050565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b60008261115057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561116f5761116f6111bb565b500290565b600082821015611186576111866111bb565b500390565b60005b838110156111a657818101518382015260200161118e565b838111156111b5576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146111e657600080fd5b5056fea264697066735822122004cc404dc40f07d0d9ece17655896582d503c827d2d8a190b8f6d62184affcec64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061010c5760003560e01c8063b3cba4a211610095578063e9ade90e11610064578063e9ade90e146102c5578063ee180773146102db578063f46901ed146102fb578063f5a632661461031b578063f851a4401461033b57600080fd5b8063b3cba4a21461025a578063bee514e71461027a578063bf7ca56e1461029a578063e1f1c4a7146102af57600080fd5b80633fc8cef3116100dc5780633fc8cef3146101ac5780633ffcf5ab146101e0578063731c2f811461020457806396de7aa01461021a578063ae4d7f9a1461023a57600080fd5b80626cc35e14610118578063017e7e58146101555780633accfa6c146101755780633f0232301461019557600080fd5b3661011357005b600080fd5b34801561012457600080fd5b50600354610138906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016157600080fd5b50600754610138906001600160a01b031681565b34801561018157600080fd5b50600254610138906001600160a01b031681565b3480156101a157600080fd5b506101aa61035b565b005b3480156101b857600080fd5b506101387f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ec57600080fd5b506101f660055481565b60405190815260200161014c565b34801561021057600080fd5b506101f660065481565b34801561022657600080fd5b506101aa610235366004610fcd565b610410565b34801561024657600080fd5b506101aa610255366004610fcd565b610484565b34801561026657600080fd5b506101aa61027536600461108f565b610503565b34801561028657600080fd5b506101aa61029536600461108f565b610584565b3480156102a657600080fd5b506101f6601e81565b3480156102bb57600080fd5b506101f661271081565b3480156102d157600080fd5b506101f660045481565b3480156102e757600080fd5b506101aa6102f6366004610fea565b610606565b34801561030757600080fd5b506101aa610316366004610fcd565b610bd6565b34801561032757600080fd5b506101aa61033636600461108f565b610c4e565b34801561034757600080fd5b50600154610138906001600160a01b031681565b6002546001600160a01b031633146103aa5760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b60448201526064015b60405180910390fd5b6002546001546040516001600160a01b0392831692909116907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a360028054600180546001600160a01b03199081166001600160a01b03841617909155169055565b6001546001600160a01b0316331461043a5760405162461bcd60e51b81526004016103a190611110565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b6001546001600160a01b031633146104ae5760405162461bcd60e51b81526004016103a190611110565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f828abcccea18192c21d645e575652c49e20b986dab777906fc473d056b01b6a8906020015b60405180910390a150565b6001546001600160a01b0316331461052d5760405162461bcd60e51b81526004016103a190611110565b601e81111561054f5760405163e8cdd5bd60e01b815260040160405180910390fd5b60048190556040518181527f110c64f8b5e69db3c5073ef38ff8c9b9153222e04cb538a860888e5822fb42d1906020016104f8565b6001546001600160a01b031633146105ae5760405162461bcd60e51b81526004016103a190611110565b6127108111156105d157604051630823099f60e31b815260040160405180910390fd5b60058190556040518181527fae8d964c051edf9b7a9b351b2e33c93192db37891822f728b472c9abdb0f15af906020016104f8565b600260005414156106595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103a1565b600260009081556001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee149081610702576040516370a0823160e01b81523060048201526001600160a01b038716906370a082319060240160206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd91906110a8565b610704565b475b905084811015610727576040516357084d7360e11b815260040160405180910390fd5b6003546040516310c3a57160e11b81526001600160a01b03868116600483015260009216906321874ae290602401604080518083038186803b15801561076c57600080fd5b505afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a4919061105f565b9150506000612710600454846107ba9190611155565b6107c49190611133565b905060006001600160a01b03831615610803576127106005546127106107ea9190611174565b6107f49084611155565b6107fe9190611133565b610805565b815b9050876108128286611174565b1015610825576108228885611174565b90505b6001600160a01b03831615610a8d576000612710600654836108479190611155565b6108519190611133565b905085156109df577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b506109049350506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915086905083610cd0565b6007546040516370a0823160e01b81523060048201526109da916001600160a01b03908116917f0000000000000000000000000000000000000000000000000000000000000000909116906370a08231906024015b60206040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a991906110a8565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610cd0565b610a1e565b6109f36001600160a01b038b168583610cd0565b600754610a1e906001600160a01b0316610a0d8385611174565b6001600160a01b038d169190610cd0565b7f11c13103c3d0e9afd6568e050834acf21c224630afc32309390e8c23e27677d488858c610a4c8688611174565b604080516001600160a01b0395861681529385166020850152919093169082015260608101919091526080810183905260a00160405180910390a150610b7f565b8415610b65577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610aee57600080fd5b505af1158015610b02573d6000803e3d6000fd5b50506007546040516370a0823160e01b8152306004820152610b6094506001600160a01b0391821693507f000000000000000000000000000000000000000000000000000000000000000090911691506370a0823190602401610959565b610b7f565b600754610b7f906001600160a01b038b8116911683610cd0565b8415610ba757610ba2610b928286611174565b6001600160a01b03881690610d27565b610bc6565b610bc686610bb58387611174565b6001600160a01b038c169190610cd0565b5050600160005550505050505050565b6001546001600160a01b03163314610c005760405162461bcd60e51b81526004016103a190611110565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e906020016104f8565b6001546001600160a01b03163314610c785760405162461bcd60e51b81526004016103a190611110565b612710811115610c9b5760405163b8e2132f60e01b815260040160405180910390fd5b60068190556040518181527fa4ed15e1d9307ea38cbd10d8b102a75209f076ff571aab3007fcabaa8351059b906020016104f8565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610d22908490610d78565b505050565b600080600080600085875af1905080610d225760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016103a1565b6000610dcd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e4a9092919063ffffffff16565b805190915015610d225780806020019051810190610deb919061103d565b610d225760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103a1565b6060610e598484600085610e63565b90505b9392505050565b606082471015610ec45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103a1565b6001600160a01b0385163b610f1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a1565b600080866001600160a01b03168587604051610f3791906110c1565b60006040518083038185875af1925050503d8060008114610f74576040519150601f19603f3d011682016040523d82523d6000602084013e610f79565b606091505b5091509150610f89828286610f94565b979650505050505050565b60608315610fa3575081610e5c565b825115610fb35782518084602001fd5b8160405162461bcd60e51b81526004016103a191906110dd565b600060208284031215610fdf57600080fd5b8135610e5c816111d1565b6000806000806080858703121561100057600080fd5b843561100b816111d1565b9350602085013592506040850135611022816111d1565b91506060850135611032816111d1565b939692955090935050565b60006020828403121561104f57600080fd5b81518015158114610e5c57600080fd5b6000806040838503121561107257600080fd5b825191506020830151611084816111d1565b809150509250929050565b6000602082840312156110a157600080fd5b5035919050565b6000602082840312156110ba57600080fd5b5051919050565b600082516110d381846020870161118b565b9190910192915050565b60208152600082518060208401526110fc81604085016020870161118b565b601f01601f19169190910160400192915050565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b60008261115057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561116f5761116f6111bb565b500290565b600082821015611186576111866111bb565b500390565b60005b838110156111a657818101518382015260200161118e565b838111156111b5576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146111e657600080fd5b5056fea264697066735822122004cc404dc40f07d0d9ece17655896582d503c827d2d8a190b8f6d62184affcec64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "processSettlement(address,uint256,address,address)": {
        "params": {
          "amountOutMin": "Minimum amount of the output token",
          "from": "Trader address",
          "to": "Receiver address",
          "tokenOut": "Address of the output token"
        }
      },
      "setFeeDiscount(uint256)": {
        "params": {
          "_feeDiscount": "Percent of feeDiscount"
        }
      },
      "setFeeRebate(uint256)": {
        "params": {
          "_feeRebate": "Percent of feeRebate"
        }
      },
      "setFeeShare(uint256)": {
        "params": {
          "_feeShare": "Percent of fee"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "_feeTo": "FeeTo address"
        }
      },
      "setReferralStorage(address)": {
        "params": {
          "_referralStorage": "ReferralStorage address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "processSettlement(address,uint256,address,address)": {
        "notice": "Executes the fee settlement, including pay referrer rebates"
      },
      "setFeeDiscount(uint256)": {
        "notice": "Set feeDicount by admin"
      },
      "setFeeRebate(uint256)": {
        "notice": "Set feeRebate by admin"
      },
      "setFeeShare(uint256)": {
        "notice": "Set feeShare by admin"
      },
      "setFeeTo(address)": {
        "notice": "Set feeTo by admin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/universal-router/modules/FeeSettlement.sol:FeeSettlement",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 733,
        "contract": "contracts/universal-router/modules/FeeSettlement.sol:FeeSettlement",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 735,
        "contract": "contracts/universal-router/modules/FeeSettlement.sol:FeeSettlement",
        "label": "adminCandidate",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 939,
        "contract": "contracts/universal-router/modules/FeeSettlement.sol:FeeSettlement",
        "label": "referralStorage",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IReferralStorage)861"
      },
      {
        "astId": 941,
        "contract": "contracts/universal-router/modules/FeeSettlement.sol:FeeSettlement",
        "label": "feeShare",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 943,
        "contract": "contracts/universal-router/modules/FeeSettlement.sol:FeeSettlement",
        "label": "feeDiscount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 945,
        "contract": "contracts/universal-router/modules/FeeSettlement.sol:FeeSettlement",
        "label": "feeRebate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 947,
        "contract": "contracts/universal-router/modules/FeeSettlement.sol:FeeSettlement",
        "label": "feeTo",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralStorage)861": {
        "encoding": "inplace",
        "label": "contract IReferralStorage",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}