{
  "address": "0x41479dBb983b85587bfEDd11D1Fcfe6ACe138AE1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IStableSwapDispatcher",
          "name": "_stableSwapDispatcher",
          "type": "address"
        },
        {
          "internalType": "contract IFeeSettlement",
          "name": "_feeSettlement",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientOutAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "code",
          "type": "uint8"
        }
      ],
      "name": "InvalidCommandCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "InvalidPool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "WrongAmountInValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "Candidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IFeeSettlement",
          "name": "feeSettlement",
          "type": "address"
        }
      ],
      "name": "SetFeeSettlement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IStableSwapDispatcher",
          "name": "stableSwapDispatcher",
          "type": "address"
        }
      ],
      "name": "SetStableSwapDispatcher",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminCandidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidateConfirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeSettlement",
      "outputs": [
        {
          "internalType": "contract IFeeSettlement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "route",
          "type": "bytes"
        }
      ],
      "name": "processRoute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "setAdminCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeeSettlement",
          "name": "_feeSettlement",
          "type": "address"
        }
      ],
      "name": "setFeeSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwapDispatcher",
          "name": "_stableSwapDispatcher",
          "type": "address"
        }
      ],
      "name": "setStableSwapDispatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwapDispatcher",
      "outputs": [
        {
          "internalType": "contract IStableSwapDispatcher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6c6990dfd9857da8c7a84afe99219f137a02008808f463ed7d0402d2eb8ee8c2",
  "receipt": {
    "to": null,
    "from": "0x4dA60510480aC2c6768893bC18aBBBb7c141f58D",
    "contractAddress": "0x41479dBb983b85587bfEDd11D1Fcfe6ACe138AE1",
    "transactionIndex": 7,
    "gasUsed": "1481163",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x838e6cd1dbd4463ba9b2f6eb53945731126f970600f67c1cebd7c8bf26c7e0a1",
    "transactionHash": "0x6c6990dfd9857da8c7a84afe99219f137a02008808f463ed7d0402d2eb8ee8c2",
    "logs": [],
    "blockNumber": 3081463,
    "cumulativeGasUsed": "6997965",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf3780EBbF5C0055c0951EC1c2Abc1b3D77713459",
    "0xAFCCA0f68e0883b797c71525377DE46B2E65AB28"
  ],
  "numDeployments": 1,
  "solcInputHash": "5c2aed5338a921499a8ffa3f135b051b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IStableSwapDispatcher\",\"name\":\"_stableSwapDispatcher\",\"type\":\"address\"},{\"internalType\":\"contract IFeeSettlement\",\"name\":\"_feeSettlement\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientOutAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"InvalidCommandCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"InvalidPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"WrongAmountInValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"Candidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeeSettlement\",\"name\":\"feeSettlement\",\"type\":\"address\"}],\"name\":\"SetFeeSettlement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStableSwapDispatcher\",\"name\":\"stableSwapDispatcher\",\"type\":\"address\"}],\"name\":\"SetStableSwapDispatcher\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSettlement\",\"outputs\":[{\"internalType\":\"contract IFeeSettlement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"route\",\"type\":\"bytes\"}],\"name\":\"processRoute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setAdminCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeSettlement\",\"name\":\"_feeSettlement\",\"type\":\"address\"}],\"name\":\"setFeeSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwapDispatcher\",\"name\":\"_stableSwapDispatcher\",\"type\":\"address\"}],\"name\":\"setStableSwapDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapDispatcher\",\"outputs\":[{\"internalType\":\"contract IStableSwapDispatcher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"processRoute(address,uint256,address,uint256,address,bytes)\":{\"params\":{\"amountIn\":\"Amount of the input token\",\"amountOutMin\":\"Minimum amount of the output token\",\"route\":\"The encoded route to execute with\",\"to\":\"Receiver address\",\"tokenIn\":\"Address of the input token\",\"tokenOut\":\"Address of the output token\"},\"returns\":{\"amountOut\":\"Actual amount of the output token\"}},\"setFeeSettlement(address)\":{\"params\":{\"_feeSettlement\":\"FeeSettlement address\"}},\"setStableSwapDispatcher(address)\":{\"params\":{\"_stableSwapDispatcher\":\"StableSwapDispatcher address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"processRoute(address,uint256,address,uint256,address,bytes)\":{\"notice\":\"Decodes and executes the given route\"},\"setFeeSettlement(address)\":{\"notice\":\"Set FeeSettlement by admin\"},\"setStableSwapDispatcher(address)\":{\"notice\":\"Set StableSwapDispatcher by admin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal-router/UniversalRouter.sol\":\"UniversalRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPair {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x384acf5ee76958b02b75d074934d79e0e6d0b5fcdb8a5f63752996cb4de7bffa\",\"license\":\"MIT\"},\"contracts/libraries/AdminUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract AdminUpgradeable {\\n    address public admin;\\n    address public adminCandidate;\\n\\n    function _initializeAdmin(address _admin) internal {\\n        require(admin == address(0), \\\"admin already set\\\");\\n\\n        admin = _admin;\\n    }\\n\\n    function candidateConfirm() external {\\n        require(msg.sender == adminCandidate, \\\"not Candidate\\\");\\n        emit AdminChanged(admin, adminCandidate);\\n\\n        admin = adminCandidate;\\n        adminCandidate = address(0);\\n    }\\n\\n    function setAdminCandidate(address _candidate) external onlyAdmin {\\n        adminCandidate = _candidate;\\n        emit Candidate(_candidate);\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    event Candidate(address indexed newAdmin);\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n}\",\"keccak256\":\"0x1f6a33fd54009078e00c3b586e2b9bb359ff99d9c5cb87e3e32ec109480f99ae\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary Constants {\\n    /// @dev Used as a flag for identifying the transfer of ETH instead of a token\\n    address internal constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n}\\n\",\"keccak256\":\"0x6bbe97d0b603fa921b1ff2cfece57e2075d91287cb1c4605bd11b64bc280faa5\",\"license\":\"MIT\"},\"contracts/universal-router/InputStream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary InputStream {\\n    function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n        assembly {\\n            stream := mload(0x40)\\n            mstore(0x40, add(stream, 64))\\n            mstore(stream, data)\\n            let length := mload(data)\\n            mstore(add(stream, 32), add(data, length))\\n        }\\n    }\\n\\n    function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n        uint256 pos;\\n        uint256 finish;\\n        assembly {\\n            pos := mload(stream)\\n            finish := mload(add(stream, 32))\\n        }\\n        return pos < finish;\\n    }\\n\\n    function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n        assembly {\\n            let pos := mload(stream)\\n            pos := add(pos, 1)\\n            res := mload(pos)\\n            mstore(stream, pos)\\n        }\\n    }\\n\\n    function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n        assembly {\\n            let pos := mload(stream)\\n            pos := add(pos, 2)\\n            res := mload(pos)\\n            mstore(stream, pos)\\n        }\\n    }\\n\\n    function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n        assembly {\\n            let pos := mload(stream)\\n            pos := add(pos, 4)\\n            res := mload(pos)\\n            mstore(stream, pos)\\n        }\\n    }\\n\\n    function readUint(uint256 stream) internal pure returns (uint256 res) {\\n        assembly {\\n            let pos := mload(stream)\\n            pos := add(pos, 32)\\n            res := mload(pos)\\n            mstore(stream, pos)\\n        }\\n    }\\n\\n    function readAddress(uint256 stream) internal pure returns (address res) {\\n        assembly {\\n            let pos := mload(stream)\\n            pos := add(pos, 20)\\n            res := mload(pos)\\n            mstore(stream, pos)\\n        }\\n    }\\n\\n    function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n        assembly {\\n            let pos := mload(stream)\\n            res := add(pos, 32)\\n            let length := mload(res)\\n            mstore(stream, add(res, length))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a8e94ecc0f543788e3a7868fcadbff32040efa869da8cd8450451aba10530b8\",\"license\":\"MIT\"},\"contracts/universal-router/UniversalRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {InputStream} from './InputStream.sol';\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {SafeTransferLib} from 'lib/solmate/src/utils/SafeTransferLib.sol';\\nimport {IPair} from \\\"../core/interfaces/IPair.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\nimport {IStableSwapDispatcher} from \\\"./interfaces/IStableSwapDispatcher.sol\\\";\\nimport {IFeeSettlement} from \\\"./interfaces/IFeeSettlement.sol\\\" ;\\nimport {AdminUpgradeable} from \\\"../libraries/AdminUpgradeable.sol\\\";\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\nimport {Commands} from \\\"./modules/Commands.sol\\\";\\n\\ncontract UniversalRouter is ReentrancyGuard, AdminUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeTransferLib for address;\\n    using InputStream for uint256;\\n\\n    IStableSwapDispatcher public stableSwapDispatcher;\\n    IFeeSettlement public feeSettlement;\\n\\n    error InvalidCommandCode(uint8 code);\\n    error WrongAmountInValue(uint256 accAmount, uint256 amountIn);\\n    error InsufficientOutAmount();\\n    error InvalidPool(address pool);\\n\\n    event SetStableSwapDispatcher(IStableSwapDispatcher stableSwapDispatcher);\\n    event SetFeeSettlement(IFeeSettlement feeSettlement);\\n    \\n    constructor(\\n        IStableSwapDispatcher _stableSwapDispatcher,\\n        IFeeSettlement _feeSettlement\\n    ) {\\n        stableSwapDispatcher = _stableSwapDispatcher;\\n        feeSettlement = _feeSettlement;\\n        _initializeAdmin(msg.sender);\\n    }\\n\\n    /// @notice To receive ETH from WETH\\n    receive() external payable {}\\n\\n    /// @notice Set StableSwapDispatcher by admin\\n    /// @param _stableSwapDispatcher StableSwapDispatcher address\\n    function setStableSwapDispatcher(IStableSwapDispatcher _stableSwapDispatcher) external onlyAdmin {\\n        stableSwapDispatcher = _stableSwapDispatcher;\\n        emit SetStableSwapDispatcher(_stableSwapDispatcher);\\n    }\\n\\n    /// @notice Set FeeSettlement by admin\\n    /// @param _feeSettlement FeeSettlement address\\n    function setFeeSettlement(IFeeSettlement _feeSettlement) external onlyAdmin {\\n        feeSettlement = _feeSettlement;\\n        emit SetFeeSettlement(_feeSettlement);\\n    }\\n\\n    /// @notice Decodes and executes the given route\\n    /// @param tokenIn Address of the input token\\n    /// @param amountIn Amount of the input token\\n    /// @param tokenOut Address of the output token\\n    /// @param amountOutMin Minimum amount of the output token\\n    /// @param to Receiver address\\n    /// @param route The encoded route to execute with\\n    /// @return amountOut Actual amount of the output token\\n    function processRoute(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address to,\\n        bytes memory route\\n    ) external payable nonReentrant returns (uint256 amountOut) {\\n        return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\\n    }\\n\\n    /// @notice Decodes and executes the given route\\n    /// @param tokenIn Address of the input token\\n    /// @param amountIn Amount of the input token\\n    /// @param tokenOut Address of the output token\\n    /// @param amountOutMin Minimum amount of the output token\\n    /// @param to Receiver address\\n    /// @param route The encoded route to execute with\\n    /// @return amountOut Actual amount of the output token\\n    function processRouteInternal(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address to,\\n        bytes memory route\\n    ) private returns (uint256 amountOut) {\\n        uint256 amountInAcc = 0;\\n        uint256 balanceInitial = tokenOut == Constants.NATIVE_ADDRESS ? \\n            address(to).balance \\n            : IERC20(tokenOut).balanceOf(to);\\n\\n        uint256 stream = InputStream.createStream(route);\\n        while (stream.isNotEmpty()) {\\n            uint8 commandCode = stream.readUint8();\\n            if (commandCode < 20) {\\n                // 0 <= command < 20\\n                if (commandCode == Commands.SWAP_UNISWAPV2_POOL) {\\n                    // UniswapV2 pool swap\\n                    swapUniswapV2Pool(stream);\\n                } else if (commandCode == Commands.DISTRIBUTE_ERC20_SHARES) {\\n                    // distribute ERC20 tokens from this router to pools\\n                    distributeERC20Shares(stream);\\n                } else if (commandCode == Commands.DISTRIBUTE_ERC20_AMOUNTS) {\\n                    // initial distribution\\n                    amountInAcc += distributeERC20Amounts(stream, tokenIn);\\n                } else if (commandCode == Commands.WRAP_AND_DISTRIBUTE_ERC20_AMOUNTS) {\\n                    // wrap natives and initial distribution \\n                    amountInAcc += wrapAndDistributeERC20Amounts(stream, amountIn);\\n                } else if (commandCode == Commands.UNWRAP_NATIVE) {\\n                    // unwrap natives\\n                    unwrapNative(stream);\\n                } else {    \\n                    revert InvalidCommandCode(commandCode);\\n                }\\n            } else if (commandCode < 24) {\\n                // 20 <= command < 24\\n                if (commandCode == Commands.SWAP_ZENLINK_STABLESWAP) {\\n                    // Zenlink stable pool swap\\n                    swapZenlinkStableSwap(stream);\\n                } else {\\n                    revert InvalidCommandCode(commandCode);\\n                }\\n            } else {\\n                // placeholder area for commands 24-255\\n                revert InvalidCommandCode(commandCode);\\n            }\\n        }\\n\\n        if (amountInAcc != amountIn) revert WrongAmountInValue(amountInAcc, amountIn);\\n        \\n        feeSettlement.processSettlement(tokenOut, amountOutMin, msg.sender, to);\\n        uint256 balanceFinal = tokenOut == Constants.NATIVE_ADDRESS ? \\n            address(to).balance \\n            : IERC20(tokenOut).balanceOf(to);\\n        if (balanceFinal < balanceInitial + amountOutMin) revert InsufficientOutAmount();\\n        amountOut = balanceFinal - balanceInitial;\\n    }\\n\\n    /// @notice Performs a UniswapV2 pool swap\\n    /// @param stream [Pool, TokenIn, Direction, To]\\n    /// @return amountOut Amount of the output token\\n    function swapUniswapV2Pool(uint256 stream) private returns (uint256 amountOut) {\\n        address pool = stream.readAddress();\\n        address tokenIn = stream.readAddress();\\n        uint8 direction = stream.readUint8();\\n        address to = stream.readAddress();\\n\\n        (uint256 reserve0, uint256 reserve1, ) = IPair(pool).getReserves();\\n        if (reserve0 == 0 || reserve1 == 0) revert InvalidPool(pool);\\n        (uint256 reserveIn, uint256 reserveOut) = direction == 1 \\n            ? (reserve0, reserve1) \\n            : (reserve1, reserve0);\\n\\n        uint256 amountIn = IERC20(tokenIn).balanceOf(pool) - reserveIn;\\n        uint256 amountInWithFee = amountIn * 997;\\n        amountOut = (amountInWithFee * reserveOut) / (reserveIn * 1000 + amountInWithFee);\\n        (uint256 amount0Out, uint256 amount1Out) = direction == 1 \\n            ? (uint256(0), amountOut) \\n            : (amountOut, uint256(0));\\n\\n        IPair(pool).swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n\\n    /// @notice Performs a Zenlink stable pool swap\\n    /// @param stream [Pool, To, [TokenIn, TokenOut]]\\n    function swapZenlinkStableSwap(uint256 stream) private {\\n        uint8 isMetaSwap = stream.readUint8();\\n        address to = stream.readAddress();\\n        bytes memory swapData = stream.readBytes();\\n        \\n        if (isMetaSwap == 1) {\\n            (\\n                address pool,\\n                uint8 tokenInIndex, \\n                uint8 tokenOutIndex, \\n                address tokenIn,\\n                address tokenOut\\n            ) = abi.decode(\\n                swapData, \\n                (address, uint8, uint8, address, address)\\n            );\\n            stableSwapDispatcher.swapUnderlying(\\n                pool, \\n                tokenInIndex, \\n                tokenOutIndex, \\n                tokenIn, \\n                tokenOut, \\n                to\\n            );\\n        } else {\\n            (\\n                address pool,\\n                bool isNativePool,\\n                uint8 tokenInIndex, \\n                uint8 tokenOutIndex, \\n                address tokenIn,\\n                address tokenOut\\n            ) = abi.decode(\\n                swapData, \\n                (address, bool, uint8, uint8, address, address)\\n            );\\n            stableSwapDispatcher.swap(\\n                pool, \\n                isNativePool, \\n                tokenInIndex, \\n                tokenOutIndex, \\n                tokenIn, \\n                tokenOut, \\n                to\\n            );\\n        }\\n    \\n    }\\n\\n    /// @notice Distributes input ERC20 tokens from msg.sender to addresses. Tokens should be approved\\n    /// @param stream [ArrayLength, ...[To, Amount][]]. An array of destinations and token amounts\\n    /// @param token Token to distribute\\n    /// @return amountTotal Total amount distributed\\n    function distributeERC20Amounts(uint256 stream, address token) private returns (uint256 amountTotal) {\\n        uint8 num = stream.readUint8();\\n        amountTotal = 0;\\n        for (uint256 i = 0; i < num; ++i) {\\n            address to = stream.readAddress();\\n            uint256 amount = stream.readUint();\\n            amountTotal += amount;\\n            IERC20(token).safeTransferFrom(msg.sender, to, amount);\\n        }\\n    }\\n\\n    /// @notice Wraps all native inputs and distributes wrapped ERC20 tokens from router to addresses\\n    /// @param stream [WrapToken, ArrayLength, ...[To, Amount][]]. An array of destinations and token amounts\\n    /// @return amountTotal Total amount distributed\\n    function wrapAndDistributeERC20Amounts(uint256 stream, uint256 amountIn) private returns (uint256 amountTotal) {\\n        address token = stream.readAddress();\\n        IWETH(token).deposit{value: amountIn}();\\n        uint8 num = stream.readUint8();\\n        amountTotal = 0;\\n        for (uint256 i = 0; i < num; ++i) {\\n            address to = stream.readAddress();\\n            uint256 amount = stream.readUint();\\n            amountTotal += amount;\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /// @notice Distributes ERC20 tokens from router to addresses\\n    /// @notice Quantity for sending is determined by share in 1/65535\\n    /// @notice During routing we can't predict in advance the actual value of internal swaps because of slippage,\\n    /// @notice so we have to work with shares - not fixed amounts\\n    /// @param stream [Token, ArrayLength, ...[To, ShareAmount][]]. Token to distribute. An array of destinations and token share amounts\\n    function distributeERC20Shares(uint256 stream) private {\\n        address token = stream.readAddress();\\n        uint8 num = stream.readUint8();\\n        // slot undrain protection\\n        uint256 amountTotal = IERC20(token).balanceOf(address(this)) - 1;     \\n\\n        for (uint256 i = 0; i < num; ++i) {\\n            address to = stream.readAddress();\\n            uint16 share = stream.readUint16();\\n            uint256 amount = (amountTotal * share) / 65535;\\n            amountTotal -= amount;\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /// @notice Unwraps the Native Token\\n    /// @param stream [Token]. Token to unwrap native\\n    function unwrapNative(uint256 stream) private {\\n        address token = stream.readAddress();\\n        address receiver = stream.readAddress();\\n        uint256 amount = IERC20(token).balanceOf(address(this)) - 1;\\n        // slot undrain protection\\n        IWETH(token).withdraw(amount);     \\n        receiver.safeTransferETH(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1f9dfc4ecdb5e699278f13ed9aa57f85036dd7bd4f4b6be42569de40b4bc2b60\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/IFeeSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFeeSettlement {\\n    function processSettlement(address tokenOut, uint256 amountOutMin, address from, address to) external;\\n}\\n\",\"keccak256\":\"0xbddb002e45c3382e04b3551b8e6d6c0e0908eb1741416cc1131098a014daf708\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/IStableSwapDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IStableSwapDispatcher {\\n    function swap(\\n        address pool, \\n        bool isNativePool,\\n        uint8 tokenInIndex, \\n        uint8 tokenOutIndex, \\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external;\\n    function swapUnderlying(\\n        address pool, \\n        uint8 tokenInIndex, \\n        uint8 tokenOutIndex,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4649e5dbd86a642d6b5f9fcc7a2ea239b42365770350aeac901e19df84576828\",\"license\":\"MIT\"},\"contracts/universal-router/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x118c37f936d4ef54a98bb692edee39083dc6258d733fc9d185027eb73df15552\",\"license\":\"MIT\"},\"contracts/universal-router/modules/Commands.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary Commands {\\n    // Command Types. Maximum supported command at this moment is 255.\\n\\n    // Command Types where value<20, executed in the first nested-if block\\n    uint8 constant DISTRIBUTE_ERC20_AMOUNTS = 3;\\n    uint8 constant DISTRIBUTE_ERC20_SHARES = 4;\\n    uint8 constant WRAP_AND_DISTRIBUTE_ERC20_AMOUNTS = 5;\\n    uint8 constant UNWRAP_NATIVE = 6;\\n    uint8 constant SWAP_UNISWAPV2_POOL = 10;\\n\\n    // Command Types where 20<=value<24, executed in the second nested-if block\\n    uint8 constant SWAP_ZENLINK_STABLESWAP = 20;\\n}\\n\",\"keccak256\":\"0xf14f7ba403f171e3f0f4a93c2d84054e789026d737f89c6a93810b105d9d9db1\",\"license\":\"MIT\"},\"lib/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001979380380620019798339810160408190526200003491620000f0565b6001600055600380546001600160a01b038085166001600160a01b031992831617909255600480549284169290911691909117905562000074336200007c565b505062000148565b6001546001600160a01b031615620000ce5760405162461bcd60e51b815260206004820152601160248201527018591b5a5b88185b1c9958591e481cd95d607a1b604482015260640160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080604083850312156200010457600080fd5b825162000111816200012f565b602084015190925062000124816200012f565b809150509250929050565b6001600160a01b03811681146200014557600080fd5b50565b61182180620001586000396000f3fe60806040526004361061008a5760003560e01c806373ce06271161005957806373ce06271461012b57806377cc4e9a1461014b57806396de7aa01461016b578063a81e200b1461018b578063f851a440146101ab57600080fd5b80632646478b146100965780633accfa6c146100bc5780633f023230146100f45780635efc9dcd1461010b57600080fd5b3661009157005b600080fd5b6100a96100a43660046114bc565b6101cb565b6040519081526020015b60405180910390f35b3480156100c857600080fd5b506002546100dc906001600160a01b031681565b6040516001600160a01b0390911681526020016100b3565b34801561010057600080fd5b50610109610248565b005b34801561011757600080fd5b506101096101263660046113b4565b6102f8565b34801561013757600080fd5b506003546100dc906001600160a01b031681565b34801561015757600080fd5b506101096101663660046113b4565b610377565b34801561017757600080fd5b506101096101863660046113b4565b6103ef565b34801561019757600080fd5b506004546100dc906001600160a01b031681565b3480156101b757600080fd5b506001546100dc906001600160a01b031681565b6000600260005414156102255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055610238878787878787610463565b6001600055979650505050505050565b6002546001600160a01b031633146102925760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b604482015260640161021c565b6002546001546040516001600160a01b0392831692909116907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a360028054600180546001600160a01b03199081166001600160a01b03841617909155169055565b6001546001600160a01b031633146103225760405162461bcd60e51b815260040161021c90611696565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5b63ecb9cf822eda2eff61a085df526dda34a89520e32c60dd98f6d2718e68df906020015b60405180910390a150565b6001546001600160a01b031633146103a15760405162461bcd60e51b815260040161021c90611696565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f8fbcedcd8235dbaa973a11fd69b709a18f639a45103ddb133a16b046e38dcb259060200161036c565b6001546001600160a01b031633146104195760405162461bcd60e51b815260040161021c90611696565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b600080806001600160a01b03871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610509576040516370a0823160e01b81526001600160a01b0386811660048301528816906370a082319060240160206040518083038186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190611622565b610515565b846001600160a01b0316315b604080518082019091528581528551860160208201529091505b80516020820151111561062857600061054e8280516001018051915290565b905060148160ff1610156106015760ff8116600a141561057757610571826107be565b50610622565b60ff8116600414156105915761058c82610a57565b610622565b60ff8116600314156105b8576105a7828c610b97565b6105b190856116f0565b9350610622565b60ff8116600514156105ce576105a7828b610c22565b60ff8116600614156105e35761058c82610d15565b6040516362e84ebf60e01b815260ff8216600482015260240161021c565b60188160ff1610156105e35760ff8116601414156105e35761058c82610e3c565b5061052f565b88831461065257604051635a55ed1360e01b815260048101849052602481018a905260440161021c565b6004805460405163ee18077360e01b81526001600160a01b038b811693820193909352602481018a9052336044820152888316606482015291169063ee18077390608401600060405180830381600087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b506000925050506001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461076d576040516370a0823160e01b81526001600160a01b0388811660048301528a16906370a082319060240160206040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190611622565b610779565b866001600160a01b0316315b905061078588846116f0565b8110156107a5576040516357084d7360e11b815260040160405180910390fd5b6107af8382611749565b9b9a5050505050505050505050565b6000806107d18380516014018051915290565b905060006107e58480516014018051915290565b905060006107f98580516001018051915290565b9050600061080d8680516014018051915290565b9050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088391906115d2565b506001600160701b031691506001600160701b0316915081600014806108a7575080155b156108d057604051630f4c971b60e21b81526001600160a01b038716600482015260240161021c565b6000808560ff166001146108e55782846108e8565b83835b6040516370a0823160e01b81526001600160a01b038b811660048301529294509092506000918491908a16906370a082319060240160206040518083038186803b15801561093557600080fd5b505afa158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d9190611622565b6109779190611749565b90506000610987826103e561172a565b905080610996856103e861172a565b6109a091906116f0565b6109aa848361172a565b6109b49190611708565b9a506000808960ff166001146109cc578c60006109d0565b60008d5b6040805160008152602081019182905263022c0d9f60e01b90915291935091506001600160a01b038d169063022c0d9f90610a1490859085908e90602481016116b9565b600060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b50505050505050505050505050505050919050565b6000610a698280516014018051915290565b90506000610a7d8380516001018051915290565b6040516370a0823160e01b81523060048201529091506000906001906001600160a01b038516906370a082319060240160206040518083038186803b158015610ac557600080fd5b505afa158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd9190611622565b610b079190611749565b905060005b8260ff16811015610b90576000610b298680516014018051915290565b90506000610b3d8780516002018051915290565b9050600061ffff610b508184168761172a565b610b5a9190611708565b9050610b668186611749565b9450610b7c6001600160a01b0388168483611031565b50505080610b899061178c565b9050610b0c565b5050505050565b600080610baa8480516001018051915290565b90506000915060005b8160ff16811015610c1a576000610bd08680516014018051915290565b90506000610be48780516020018051915290565b9050610bf081866116f0565b9450610c076001600160a01b038716338484611099565b505080610c139061178c565b9050610bb3565b505092915050565b600080610c358480516014018051915290565b9050806001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b50505050506000610c9d8580516001018051915290565b90506000925060005b8160ff16811015610d0c576000610cc38780516014018051915290565b90506000610cd78880516020018051915290565b9050610ce381876116f0565b9550610cf96001600160a01b0386168383611031565b505080610d059061178c565b9050610ca6565b50505092915050565b6000610d278280516014018051915290565b90506000610d3b8380516014018051915290565b6040516370a0823160e01b81523060048201529091506000906001906001600160a01b038516906370a082319060240160206040518083038186803b158015610d8357600080fd5b505afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190611622565b610dc59190611749565b604051632e1a7d4d60e01b8152600481018290529091506001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b158015610e0a57600080fd5b505af1158015610e1e573d6000803e3d6000fd5b50610e36925050506001600160a01b038316826110d1565b50505050565b6000610e4e8280516001018051915290565b90506000610e628380516014018051915290565b8351602080820180519092010185529091508260ff1660011415610f3d57600080600080600085806020019051810190610e9c919061144e565b600354604051630ba1448d60e01b81526001600160a01b03808816600483015260ff808816602484015286166044830152808516606483015280841660848301528e811660a4830152969b5094995092975090955093509190911690630ba1448d9060c401600060405180830381600087803b158015610f1b57600080fd5b505af1158015610f2f573d6000803e3d6000fd5b505050505050505050610e36565b60008060008060008086806020019051810190610f5a91906113d1565b955095509550955095509550600360009054906101000a90046001600160a01b03166001600160a01b031663cbf45e888787878787878f6040518863ffffffff1660e01b8152600401610ff397969594939291906001600160a01b039788168152951515602087015260ff94851660408701529290931660608501528416608084015290831660a083015290911660c082015260e00190565b600060405180830381600087803b15801561100d57600080fd5b505af1158015611021573d6000803e3d6000fd5b5050505050505050505050505050565b6040516001600160a01b03831660248201526044810182905261109490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611122565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e369085906323b872dd60e01b9060840161105d565b600080600080600085875af19050806110945760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b604482015260640161021c565b6000611177826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111f49092919063ffffffff16565b805190915015611094578080602001905181019061119591906115b7565b6110945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161021c565b6060611203848460008561120d565b90505b9392505050565b60608247101561126e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161021c565b6001600160a01b0385163b6112c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021c565b600080866001600160a01b031685876040516112e19190611667565b60006040518083038185875af1925050503d806000811461131e576040519150601f19603f3d011682016040523d82523d6000602084013e611323565b606091505b509150915061133382828661133e565b979650505050505050565b6060831561134d575081611206565b82511561135d5782518084602001fd5b8160405162461bcd60e51b815260040161021c9190611683565b8051801515811461138757600080fd5b919050565b80516001600160701b038116811461138757600080fd5b805160ff8116811461138757600080fd5b6000602082840312156113c657600080fd5b8135611206816117d3565b60008060008060008060c087890312156113ea57600080fd5b86516113f5816117d3565b955061140360208801611377565b9450611411604088016113a3565b935061141f606088016113a3565b9250608087015161142f816117d3565b60a0880151909250611440816117d3565b809150509295509295509295565b600080600080600060a0868803121561146657600080fd5b8551611471816117d3565b945061147f602087016113a3565b935061148d604087016113a3565b9250606086015161149d816117d3565b60808701519092506114ae816117d3565b809150509295509295909350565b60008060008060008060c087890312156114d557600080fd5b86356114e0816117d3565b95506020870135945060408701356114f7816117d3565b935060608701359250608087013561150e816117d3565b915060a087013567ffffffffffffffff8082111561152b57600080fd5b818901915089601f83011261153f57600080fd5b813581811115611551576115516117bd565b604051601f8201601f19908116603f01168101908382118183101715611579576115796117bd565b816040528281528c602084870101111561159257600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b6000602082840312156115c957600080fd5b61120682611377565b6000806000606084860312156115e757600080fd5b6115f08461138c565b92506115fe6020850161138c565b9150604084015163ffffffff8116811461161757600080fd5b809150509250925092565b60006020828403121561163457600080fd5b5051919050565b60008151808452611653816020860160208601611760565b601f01601f19169290920160200192915050565b60008251611679818460208701611760565b9190910192915050565b602081526000611206602083018461163b565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b84815283602082015260018060a01b03831660408201526080606082015260006116e6608083018461163b565b9695505050505050565b60008219821115611703576117036117a7565b500190565b60008261172557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611744576117446117a7565b500290565b60008282101561175b5761175b6117a7565b500390565b60005b8381101561177b578181015183820152602001611763565b83811115610e365750506000910152565b60006000198214156117a0576117a06117a7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117e857600080fd5b5056fea2646970667358221220c6fa795df3bf29ff541b7799d6fb27432dadebb6536613d56e161d5b1dbadacb64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c806373ce06271161005957806373ce06271461012b57806377cc4e9a1461014b57806396de7aa01461016b578063a81e200b1461018b578063f851a440146101ab57600080fd5b80632646478b146100965780633accfa6c146100bc5780633f023230146100f45780635efc9dcd1461010b57600080fd5b3661009157005b600080fd5b6100a96100a43660046114bc565b6101cb565b6040519081526020015b60405180910390f35b3480156100c857600080fd5b506002546100dc906001600160a01b031681565b6040516001600160a01b0390911681526020016100b3565b34801561010057600080fd5b50610109610248565b005b34801561011757600080fd5b506101096101263660046113b4565b6102f8565b34801561013757600080fd5b506003546100dc906001600160a01b031681565b34801561015757600080fd5b506101096101663660046113b4565b610377565b34801561017757600080fd5b506101096101863660046113b4565b6103ef565b34801561019757600080fd5b506004546100dc906001600160a01b031681565b3480156101b757600080fd5b506001546100dc906001600160a01b031681565b6000600260005414156102255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055610238878787878787610463565b6001600055979650505050505050565b6002546001600160a01b031633146102925760405162461bcd60e51b815260206004820152600d60248201526c6e6f742043616e64696461746560981b604482015260640161021c565b6002546001546040516001600160a01b0392831692909116907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a360028054600180546001600160a01b03199081166001600160a01b03841617909155169055565b6001546001600160a01b031633146103225760405162461bcd60e51b815260040161021c90611696565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5b63ecb9cf822eda2eff61a085df526dda34a89520e32c60dd98f6d2718e68df906020015b60405180910390a150565b6001546001600160a01b031633146103a15760405162461bcd60e51b815260040161021c90611696565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f8fbcedcd8235dbaa973a11fd69b709a18f639a45103ddb133a16b046e38dcb259060200161036c565b6001546001600160a01b031633146104195760405162461bcd60e51b815260040161021c90611696565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f8cc40b9abca4a505a92028908f9d913d621d18112c69412806506f02333f26b490600090a250565b600080806001600160a01b03871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610509576040516370a0823160e01b81526001600160a01b0386811660048301528816906370a082319060240160206040518083038186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190611622565b610515565b846001600160a01b0316315b604080518082019091528581528551860160208201529091505b80516020820151111561062857600061054e8280516001018051915290565b905060148160ff1610156106015760ff8116600a141561057757610571826107be565b50610622565b60ff8116600414156105915761058c82610a57565b610622565b60ff8116600314156105b8576105a7828c610b97565b6105b190856116f0565b9350610622565b60ff8116600514156105ce576105a7828b610c22565b60ff8116600614156105e35761058c82610d15565b6040516362e84ebf60e01b815260ff8216600482015260240161021c565b60188160ff1610156105e35760ff8116601414156105e35761058c82610e3c565b5061052f565b88831461065257604051635a55ed1360e01b815260048101849052602481018a905260440161021c565b6004805460405163ee18077360e01b81526001600160a01b038b811693820193909352602481018a9052336044820152888316606482015291169063ee18077390608401600060405180830381600087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b506000925050506001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461076d576040516370a0823160e01b81526001600160a01b0388811660048301528a16906370a082319060240160206040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190611622565b610779565b866001600160a01b0316315b905061078588846116f0565b8110156107a5576040516357084d7360e11b815260040160405180910390fd5b6107af8382611749565b9b9a5050505050505050505050565b6000806107d18380516014018051915290565b905060006107e58480516014018051915290565b905060006107f98580516001018051915290565b9050600061080d8680516014018051915290565b9050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088391906115d2565b506001600160701b031691506001600160701b0316915081600014806108a7575080155b156108d057604051630f4c971b60e21b81526001600160a01b038716600482015260240161021c565b6000808560ff166001146108e55782846108e8565b83835b6040516370a0823160e01b81526001600160a01b038b811660048301529294509092506000918491908a16906370a082319060240160206040518083038186803b15801561093557600080fd5b505afa158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d9190611622565b6109779190611749565b90506000610987826103e561172a565b905080610996856103e861172a565b6109a091906116f0565b6109aa848361172a565b6109b49190611708565b9a506000808960ff166001146109cc578c60006109d0565b60008d5b6040805160008152602081019182905263022c0d9f60e01b90915291935091506001600160a01b038d169063022c0d9f90610a1490859085908e90602481016116b9565b600060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b50505050505050505050505050505050919050565b6000610a698280516014018051915290565b90506000610a7d8380516001018051915290565b6040516370a0823160e01b81523060048201529091506000906001906001600160a01b038516906370a082319060240160206040518083038186803b158015610ac557600080fd5b505afa158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd9190611622565b610b079190611749565b905060005b8260ff16811015610b90576000610b298680516014018051915290565b90506000610b3d8780516002018051915290565b9050600061ffff610b508184168761172a565b610b5a9190611708565b9050610b668186611749565b9450610b7c6001600160a01b0388168483611031565b50505080610b899061178c565b9050610b0c565b5050505050565b600080610baa8480516001018051915290565b90506000915060005b8160ff16811015610c1a576000610bd08680516014018051915290565b90506000610be48780516020018051915290565b9050610bf081866116f0565b9450610c076001600160a01b038716338484611099565b505080610c139061178c565b9050610bb3565b505092915050565b600080610c358480516014018051915290565b9050806001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b50505050506000610c9d8580516001018051915290565b90506000925060005b8160ff16811015610d0c576000610cc38780516014018051915290565b90506000610cd78880516020018051915290565b9050610ce381876116f0565b9550610cf96001600160a01b0386168383611031565b505080610d059061178c565b9050610ca6565b50505092915050565b6000610d278280516014018051915290565b90506000610d3b8380516014018051915290565b6040516370a0823160e01b81523060048201529091506000906001906001600160a01b038516906370a082319060240160206040518083038186803b158015610d8357600080fd5b505afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190611622565b610dc59190611749565b604051632e1a7d4d60e01b8152600481018290529091506001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b158015610e0a57600080fd5b505af1158015610e1e573d6000803e3d6000fd5b50610e36925050506001600160a01b038316826110d1565b50505050565b6000610e4e8280516001018051915290565b90506000610e628380516014018051915290565b8351602080820180519092010185529091508260ff1660011415610f3d57600080600080600085806020019051810190610e9c919061144e565b600354604051630ba1448d60e01b81526001600160a01b03808816600483015260ff808816602484015286166044830152808516606483015280841660848301528e811660a4830152969b5094995092975090955093509190911690630ba1448d9060c401600060405180830381600087803b158015610f1b57600080fd5b505af1158015610f2f573d6000803e3d6000fd5b505050505050505050610e36565b60008060008060008086806020019051810190610f5a91906113d1565b955095509550955095509550600360009054906101000a90046001600160a01b03166001600160a01b031663cbf45e888787878787878f6040518863ffffffff1660e01b8152600401610ff397969594939291906001600160a01b039788168152951515602087015260ff94851660408701529290931660608501528416608084015290831660a083015290911660c082015260e00190565b600060405180830381600087803b15801561100d57600080fd5b505af1158015611021573d6000803e3d6000fd5b5050505050505050505050505050565b6040516001600160a01b03831660248201526044810182905261109490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611122565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e369085906323b872dd60e01b9060840161105d565b600080600080600085875af19050806110945760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b604482015260640161021c565b6000611177826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111f49092919063ffffffff16565b805190915015611094578080602001905181019061119591906115b7565b6110945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161021c565b6060611203848460008561120d565b90505b9392505050565b60608247101561126e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161021c565b6001600160a01b0385163b6112c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021c565b600080866001600160a01b031685876040516112e19190611667565b60006040518083038185875af1925050503d806000811461131e576040519150601f19603f3d011682016040523d82523d6000602084013e611323565b606091505b509150915061133382828661133e565b979650505050505050565b6060831561134d575081611206565b82511561135d5782518084602001fd5b8160405162461bcd60e51b815260040161021c9190611683565b8051801515811461138757600080fd5b919050565b80516001600160701b038116811461138757600080fd5b805160ff8116811461138757600080fd5b6000602082840312156113c657600080fd5b8135611206816117d3565b60008060008060008060c087890312156113ea57600080fd5b86516113f5816117d3565b955061140360208801611377565b9450611411604088016113a3565b935061141f606088016113a3565b9250608087015161142f816117d3565b60a0880151909250611440816117d3565b809150509295509295509295565b600080600080600060a0868803121561146657600080fd5b8551611471816117d3565b945061147f602087016113a3565b935061148d604087016113a3565b9250606086015161149d816117d3565b60808701519092506114ae816117d3565b809150509295509295909350565b60008060008060008060c087890312156114d557600080fd5b86356114e0816117d3565b95506020870135945060408701356114f7816117d3565b935060608701359250608087013561150e816117d3565b915060a087013567ffffffffffffffff8082111561152b57600080fd5b818901915089601f83011261153f57600080fd5b813581811115611551576115516117bd565b604051601f8201601f19908116603f01168101908382118183101715611579576115796117bd565b816040528281528c602084870101111561159257600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b6000602082840312156115c957600080fd5b61120682611377565b6000806000606084860312156115e757600080fd5b6115f08461138c565b92506115fe6020850161138c565b9150604084015163ffffffff8116811461161757600080fd5b809150509250925092565b60006020828403121561163457600080fd5b5051919050565b60008151808452611653816020860160208601611760565b601f01601f19169290920160200192915050565b60008251611679818460208701611760565b9190910192915050565b602081526000611206602083018461163b565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b84815283602082015260018060a01b03831660408201526080606082015260006116e6608083018461163b565b9695505050505050565b60008219821115611703576117036117a7565b500190565b60008261172557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611744576117446117a7565b500290565b60008282101561175b5761175b6117a7565b500390565b60005b8381101561177b578181015183820152602001611763565b83811115610e365750506000910152565b60006000198214156117a0576117a06117a7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117e857600080fd5b5056fea2646970667358221220c6fa795df3bf29ff541b7799d6fb27432dadebb6536613d56e161d5b1dbadacb64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "processRoute(address,uint256,address,uint256,address,bytes)": {
        "params": {
          "amountIn": "Amount of the input token",
          "amountOutMin": "Minimum amount of the output token",
          "route": "The encoded route to execute with",
          "to": "Receiver address",
          "tokenIn": "Address of the input token",
          "tokenOut": "Address of the output token"
        },
        "returns": {
          "amountOut": "Actual amount of the output token"
        }
      },
      "setFeeSettlement(address)": {
        "params": {
          "_feeSettlement": "FeeSettlement address"
        }
      },
      "setStableSwapDispatcher(address)": {
        "params": {
          "_stableSwapDispatcher": "StableSwapDispatcher address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "processRoute(address,uint256,address,uint256,address,bytes)": {
        "notice": "Decodes and executes the given route"
      },
      "setFeeSettlement(address)": {
        "notice": "Set FeeSettlement by admin"
      },
      "setStableSwapDispatcher(address)": {
        "notice": "Set StableSwapDispatcher by admin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/universal-router/UniversalRouter.sol:UniversalRouter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 860,
        "contract": "contracts/universal-router/UniversalRouter.sol:UniversalRouter",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 862,
        "contract": "contracts/universal-router/UniversalRouter.sol:UniversalRouter",
        "label": "adminCandidate",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1084,
        "contract": "contracts/universal-router/UniversalRouter.sol:UniversalRouter",
        "label": "stableSwapDispatcher",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStableSwapDispatcher)1995"
      },
      {
        "astId": 1087,
        "contract": "contracts/universal-router/UniversalRouter.sol:UniversalRouter",
        "label": "feeSettlement",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IFeeSettlement)1925"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeSettlement)1925": {
        "encoding": "inplace",
        "label": "contract IFeeSettlement",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwapDispatcher)1995": {
        "encoding": "inplace",
        "label": "contract IStableSwapDispatcher",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}