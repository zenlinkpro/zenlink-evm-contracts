{
  "language": "Solidity",
  "sources": {
    "contracts/universal-router/modules/FeeSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {SafeTransferLib} from 'lib/solmate/src/utils/SafeTransferLib.sol';\nimport {IWETH} from \"../interfaces/IWETH.sol\";\nimport {IReferralStorage} from \"../../referrals/interfaces/IReferralStorage.sol\";\nimport {AdminUpgradeable} from \"../../libraries/AdminUpgradeable.sol\";\nimport {IFeeSettlement} from \"../interfaces/IFeeSettlement.sol\";\n\naddress constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\ncontract FeeSettlement is IFeeSettlement, ReentrancyGuard, AdminUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeTransferLib for address;\n\n    address public immutable weth;\n\n    uint256 public constant BASIS_POINTS = 10000;\n    uint256 public constant MAX_FEE_POINTS = 30; // 0.3%\n\n    IReferralStorage public referralStorage;\n    uint256 public feeShare; // e.g. 10 for 0.1%\n    uint256 public feeDiscount; // e.g. 2000 for 20%\n    uint256 public feeRebate; // e.g. 5000 for 50%/50%, 2500 for 75% fee/25% rebate\n    address public feeTo;\n\n    error InvalidFeeShare();\n    error InvalidFeeDiscount();\n    error InvalidFeeRebate();\n    error InsufficientOutAmount();\n\n    event PayRebates(\n        address trader,\n        address referrer,\n        address tokenOut,\n        uint256 discountAmount,\n        uint256 rebateAmount\n    );\n    event SetReferralStorage(IReferralStorage referralStorage);\n    event SetFeeShare(uint256 feeShare);\n    event SetFeeDiscount(uint256 feeDiscount);\n    event SetFeeRebate(uint256 feeRebate);\n    event SetFeeTo(address feeTo);\n\n    constructor(\n        address _weth, \n        IReferralStorage _referralStorage,\n        uint256 _feeShare,\n        uint256 _feeDiscount,\n        uint256 _feeRebate,\n        address _feeTo\n    ) {\n        weth = _weth;\n        referralStorage = _referralStorage;\n\n        if (_feeShare > MAX_FEE_POINTS) revert InvalidFeeShare();\n        if (_feeDiscount > BASIS_POINTS) revert InvalidFeeDiscount();\n        if (_feeRebate > BASIS_POINTS) revert InvalidFeeRebate();\n        feeShare = _feeShare;\n        feeDiscount = _feeDiscount;\n        feeRebate = _feeRebate;\n        feeTo = _feeTo;\n        _initializeAdmin(msg.sender);\n    }\n\n    /// @notice To receive ETH from router\n    receive() external payable {}\n\n    /// @notice Executes the fee settlement, including pay referrer rebates\n    /// @param tokenOut Address of the output token\n    /// @param amountOutMin Minimum amount of the output token\n    /// @param from Trader address\n    /// @param to Receiver address\n    function processSettlement(\n        address tokenOut,\n        uint256 amountOutMin,\n        address from,\n        address to\n    ) external override nonReentrant {\n        bool isNative = tokenOut == NATIVE_ADDRESS;\n        uint256 amount = isNative \n            ? address(this).balance \n            : IERC20(tokenOut).balanceOf(address(this));\n        if (amount < amountOutMin) revert InsufficientOutAmount();\n        (, address referrer) = referralStorage.getReferralInfo(from);\n        uint256 basisfee = (amount * feeShare) / BASIS_POINTS;\n        uint256 fee = referrer == address(0) \n            ? basisfee\n            : (basisfee * (BASIS_POINTS - feeDiscount)) / BASIS_POINTS;\n        if (amount - fee < amountOutMin) {\n            // ensure that fee do not cause the transaction to fail \n            fee = amount - amountOutMin;\n        }\n        if (referrer != address(0)) {\n            uint256 rebateAmount = (fee * feeRebate) / BASIS_POINTS;\n            if (isNative) {\n                IWETH(weth).deposit{value: rebateAmount}();\n                IERC20(weth).safeTransfer(referrer, IERC20(weth).balanceOf(address(this)));\n                feeTo.safeTransferETH(fee - rebateAmount);\n            } else {\n                IERC20(tokenOut).safeTransfer(referrer, rebateAmount);\n                IERC20(tokenOut).safeTransfer(feeTo, fee - rebateAmount);\n            }\n            emit PayRebates(from, referrer, tokenOut, basisfee - fee, rebateAmount);\n        } else {\n            if (isNative) {\n                feeTo.safeTransferETH(fee);\n            } else {\n                IERC20(tokenOut).safeTransfer(feeTo, fee);\n            }\n        }\n        if (isNative) {\n            to.safeTransferETH(amount - fee);\n        } else {\n            IERC20(tokenOut).safeTransfer(to, amount - fee);\n        }\n    }\n\n    // @notice Set referralStorage by admin\n    /// @param _referralStorage ReferralStorage address\n    function setReferralStorage(IReferralStorage _referralStorage) external onlyAdmin {\n        referralStorage = _referralStorage;\n        emit SetReferralStorage(_referralStorage);\n    }\n\n    /// @notice Set feeShare by admin\n    /// @param _feeShare Percent of fee\n    function setFeeShare(uint256 _feeShare) external onlyAdmin {\n        if (_feeShare > MAX_FEE_POINTS) revert InvalidFeeShare();\n        feeShare = _feeShare;\n        emit SetFeeShare(_feeShare);\n    }\n\n    /// @notice Set feeDicount by admin\n    /// @param _feeDiscount Percent of feeDiscount\n    function setFeeDiscount(uint256 _feeDiscount) external onlyAdmin {\n        if (_feeDiscount > BASIS_POINTS) revert InvalidFeeDiscount();\n        feeDiscount = _feeDiscount;\n        emit SetFeeDiscount(_feeDiscount);\n    }\n\n    /// @notice Set feeRebate by admin\n    /// @param _feeRebate Percent of feeRebate\n    function setFeeRebate(uint256 _feeRebate) external onlyAdmin {\n        if (_feeRebate > BASIS_POINTS) revert InvalidFeeRebate();\n        feeRebate = _feeRebate;\n        emit SetFeeRebate(_feeRebate);\n    }\n\n    /// @notice Set feeTo by admin\n    /// @param _feeTo FeeTo address\n    function setFeeTo(address _feeTo) external onlyAdmin {\n        feeTo = _feeTo;\n        emit SetFeeTo(_feeTo);\n    }\n}\n"
    },
    "contracts/universal-router/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/referrals/interfaces/IReferralStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IReferralStorage {\n    function codeOwners(bytes32 _code) external view returns (address);\n    function getReferralInfo(address _account) external view returns (bytes32, address);\n    function setReferralCodeByUser(bytes32 _code) external;\n}\n"
    },
    "contracts/libraries/AdminUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nabstract contract AdminUpgradeable {\n    address public admin;\n    address public adminCandidate;\n\n    function _initializeAdmin(address _admin) internal {\n        require(admin == address(0), \"admin already set\");\n\n        admin = _admin;\n    }\n\n    function candidateConfirm() external {\n        require(msg.sender == adminCandidate, \"not Candidate\");\n        emit AdminChanged(admin, adminCandidate);\n\n        admin = adminCandidate;\n        adminCandidate = address(0);\n    }\n\n    function setAdminCandidate(address _candidate) external onlyAdmin {\n        adminCandidate = _candidate;\n        emit Candidate(_candidate);\n    }\n\n    modifier onlyAdmin {\n        require(msg.sender == admin, \"not admin\");\n        _;\n    }\n\n    event Candidate(address indexed newAdmin);\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\n}"
    },
    "contracts/universal-router/interfaces/IFeeSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IFeeSettlement {\n    function processSettlement(address tokenOut, uint256 amountOutMin, address from, address to) external;\n}\n"
    },
    "lib/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "lib/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/universal-router/modules/StableSwapDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IStableSwap} from \"../../stableswap/interfaces/IStableSwap.sol\";\nimport {IStableSwapDispatcher} from \"../interfaces/IStableSwapDispatcher.sol\";\n\ncontract StableSwapDispatcher is IStableSwapDispatcher {\n    using SafeERC20 for IERC20;\n\n    error InsufficientAmountIn();\n\n    function swap(address pool, address tokenIn, address tokenOut, address to) override external {\n        uint8 tokenInIndex = IStableSwap(pool).getTokenIndex(tokenIn);\n        uint8 tokenOutIndex = IStableSwap(pool).getTokenIndex(tokenOut);\n        uint256 amountIn = IERC20(tokenIn).balanceOf(address(this));\n        uint256 prevBalanceOut = IERC20(tokenOut).balanceOf(address(this));\n\n        if (amountIn == 0) revert InsufficientAmountIn();\n        IERC20(tokenIn).safeIncreaseAllowance(address(pool), amountIn);\n        IStableSwap(pool).swap(tokenInIndex, tokenOutIndex, amountIn, 0, type(uint256).max);\n\n        IERC20(tokenOut).safeTransfer(to, IERC20(tokenOut).balanceOf(address(this)) - prevBalanceOut);\n    }\n}\n"
    },
    "contracts/stableswap/interfaces/IStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../LPToken.sol\";\n\ninterface IStableSwap {\n    /// EVENTS\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event FlashLoan(\n        address indexed caller,\n        address indexed receiver,\n        uint256[] amounts_out\n    );\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 soldId,\n        uint256 tokensSold,\n        uint256 boughtId,\n        uint256 tokensBought\n    );\n\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\n\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\n\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\n\n    event StopRampA(uint256 A, uint256 timestamp);\n\n    event NewFee(uint256 fee, uint256 adminFee);\n\n    event CollectProtocolFee(address token, uint256 amount);\n\n    event FeeControllerChanged(address newController);\n\n    event FeeDistributorChanged(address newController);\n\n    // pool data view functions\n    function getLpToken() external view returns (IERC20 lpToken);\n\n    function getA() external view returns (uint256);\n\n    function getAPrecise() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokens() external view returns (IERC20[] memory);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getTokenBalances() external view returns (uint256[] memory);\n\n    function getNumberOfTokens() external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\n        external\n        view\n        returns (uint256 availableTokenAmount);\n\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\n\n    function getAdminBalance(uint8 index) external view returns (uint256);\n\n    function swapStorage()\n        external\n        view\n        returns (\n            LPToken,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    // state modifying functions\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function flashLoan(\n        uint256[] memory amountsOut,\n        address to,\n        bytes calldata data,\n        uint256 deadline\n    ) external;\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function withdrawAdminFee() external;\n}\n"
    },
    "contracts/universal-router/interfaces/IStableSwapDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStableSwapDispatcher {\n    function swap(address pool, address tokenIn, address tokenOut, address to) external;\n}\n"
    },
    "contracts/stableswap/LPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IStableSwap.sol\";\n\ncontract LPToken is Ownable, ERC20Burnable {\n    IStableSwap public swap;\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        swap = IStableSwap(msg.sender);\n    }\n\n    function mint(address _to, uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"zeroMintAmount\");\n        _mint(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/universal-router/UniversalRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {InputStream} from './InputStream.sol';\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {SafeTransferLib} from 'lib/solmate/src/utils/SafeTransferLib.sol';\nimport {IPair} from \"../core/interfaces/IPair.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\nimport {IStableSwapDispatcher} from \"./interfaces/IStableSwapDispatcher.sol\";\nimport {IFeeSettlement} from \"./interfaces/IFeeSettlement.sol\" ;\nimport {AdminUpgradeable} from \"../libraries/AdminUpgradeable.sol\";\n\naddress constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\ncontract UniversalRouter is ReentrancyGuard, AdminUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeTransferLib for address;\n    using InputStream for uint256;\n\n    IStableSwapDispatcher public stableSwapDispatcher;\n    IFeeSettlement public feeSettlement;\n\n    error InvalidCommandCode(uint8 code);\n    error WrongAmountInValue(uint256 accAmount, uint256 amountIn);\n    error InsufficientOutAmount();\n    error InvalidPool(address pool);\n\n    event SetStableSwapDispatcher(IStableSwapDispatcher stableSwapDispatcher);\n    event SetFeeSettlement(IFeeSettlement feeSettlement);\n    \n    constructor(\n        IStableSwapDispatcher _stableSwapDispatcher,\n        IFeeSettlement _feeSettlement\n    ) {\n        stableSwapDispatcher = _stableSwapDispatcher;\n        feeSettlement = _feeSettlement;\n        _initializeAdmin(msg.sender);\n    }\n\n    /// @notice To receive ETH from WETH\n    receive() external payable {}\n\n    /// @notice Set StableSwapDispatcher by admin\n    /// @param _stableSwapDispatcher StableSwapDispatcher address\n    function setStableSwapDispatcher(IStableSwapDispatcher _stableSwapDispatcher) external onlyAdmin {\n        stableSwapDispatcher = _stableSwapDispatcher;\n        emit SetStableSwapDispatcher(_stableSwapDispatcher);\n    }\n\n    /// @notice Set FeeSettlement by admin\n    /// @param _feeSettlement FeeSettlement address\n    function setFeeSettlement(IFeeSettlement _feeSettlement) external onlyAdmin {\n        feeSettlement = _feeSettlement;\n        emit SetFeeSettlement(_feeSettlement);\n    }\n\n    /// @notice Decodes and executes the given route\n    /// @param tokenIn Address of the input token\n    /// @param amountIn Amount of the input token\n    /// @param tokenOut Address of the output token\n    /// @param amountOutMin Minimum amount of the output token\n    /// @param to Receiver address\n    /// @param route The encoded route to execute with\n    /// @return amountOut Actual amount of the output token\n    function processRoute(\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        uint256 amountOutMin,\n        address to,\n        bytes memory route\n    ) external payable nonReentrant returns (uint256 amountOut) {\n        return processRouteInternal(tokenIn, amountIn, tokenOut, amountOutMin, to, route);\n    }\n\n    /// @notice Decodes and executes the given route\n    /// @param tokenIn Address of the input token\n    /// @param amountIn Amount of the input token\n    /// @param tokenOut Address of the output token\n    /// @param amountOutMin Minimum amount of the output token\n    /// @param to Receiver address\n    /// @param route The encoded route to execute with\n    /// @return amountOut Actual amount of the output token\n    function processRouteInternal(\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        uint256 amountOutMin,\n        address to,\n        bytes memory route\n    ) private returns (uint256 amountOut) {\n        uint256 amountInAcc = 0;\n        uint256 balanceInitial = tokenOut == NATIVE_ADDRESS ? \n            address(to).balance \n            : IERC20(tokenOut).balanceOf(to);\n\n        uint256 stream = InputStream.createStream(route);\n        while (stream.isNotEmpty()) {\n            uint8 commandCode = stream.readUint8();\n            if (commandCode < 20) {\n                if (commandCode == 10) {\n                    // UniswapV2 pool swap\n                    swapUniswapV2Pool(stream);\n                } else if (commandCode == 4) {\n                    // distribute ERC20 tokens from this router to pools\n                    distributeERC20Shares(stream);\n                } else if (commandCode == 3) {\n                    // initial distribution\n                    amountInAcc += distributeERC20Amounts(stream, tokenIn);\n                } else if (commandCode == 5) {\n                    // wrap natives and initial distribution \n                    amountInAcc += wrapAndDistributeERC20Amounts(stream, amountIn);\n                } else if (commandCode == 6) {\n                    // unwrap natives\n                    unwrapNative(to, stream);\n                } else {    \n                    revert InvalidCommandCode(commandCode);\n                }\n            } else if (commandCode < 24) {\n                if (commandCode == 20) {\n                    // Zenlink stable pool swap\n                    swapZenlinkStableSwap(stream);\n                } else {\n                    revert InvalidCommandCode(commandCode);\n                }\n            } else {\n                revert InvalidCommandCode(commandCode);\n            }\n        }\n\n        if (amountInAcc != amountIn) revert WrongAmountInValue(amountInAcc, amountIn);\n        \n        feeSettlement.processSettlement(tokenOut, amountOutMin, msg.sender, to);\n        uint256 balanceFinal = tokenOut == NATIVE_ADDRESS ? \n            address(to).balance \n            : IERC20(tokenOut).balanceOf(to);\n        if (balanceFinal < balanceInitial + amountOutMin) revert InsufficientOutAmount();\n        amountOut = balanceFinal - balanceInitial;\n    }\n\n    /// @notice Performs a UniswapV2 pool swap\n    /// @param stream [Pool, TokenIn, Direction, To]\n    /// @return amountOut Amount of the output token\n    function swapUniswapV2Pool(uint256 stream) private returns (uint256 amountOut) {\n        address pool = stream.readAddress();\n        address tokenIn = stream.readAddress();\n        uint8 direction = stream.readUint8();\n        address to = stream.readAddress();\n\n        (uint256 reserve0, uint256 reserve1, ) = IPair(pool).getReserves();\n        if (reserve0 == 0 || reserve1 == 0) revert InvalidPool(pool);\n        (uint256 reserveIn, uint256 reserveOut) = direction == 1 \n            ? (reserve0, reserve1) \n            : (reserve1, reserve0);\n\n        uint256 amountIn = IERC20(tokenIn).balanceOf(pool) - reserveIn;\n        uint256 amountInWithFee = amountIn * 997;\n        amountOut = (amountInWithFee * reserveOut) / (reserveIn * 1000 + amountInWithFee);\n        (uint256 amount0Out, uint256 amount1Out) = direction == 1 \n            ? (uint256(0), amountOut) \n            : (amountOut, uint256(0));\n\n        IPair(pool).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n\n    /// @notice Performs a Zenlink stable pool swap\n    /// @param stream [Pool, To, [TokenIn, TokenOut]]\n    function swapZenlinkStableSwap(uint256 stream) private {\n        address pool = stream.readAddress();\n        address to = stream.readAddress();\n        bytes memory swapData = stream.readBytes();\n        (address tokenIn, address tokenOut) = abi.decode(swapData, (address, address));\n    \n        stableSwapDispatcher.swap(pool, tokenIn, tokenOut, to);\n    }\n\n    /// @notice Distributes input ERC20 tokens from msg.sender to addresses. Tokens should be approved\n    /// @param stream [ArrayLength, ...[To, Amount][]]. An array of destinations and token amounts\n    /// @param token Token to distribute\n    /// @return amountTotal Total amount distributed\n    function distributeERC20Amounts(uint256 stream, address token) private returns (uint256 amountTotal) {\n        uint8 num = stream.readUint8();\n        amountTotal = 0;\n        for (uint256 i = 0; i < num; ++i) {\n            address to = stream.readAddress();\n            uint256 amount = stream.readUint();\n            amountTotal += amount;\n            IERC20(token).safeTransferFrom(msg.sender, to, amount);\n        }\n    }\n\n    /// @notice Wraps all native inputs and distributes wrapped ERC20 tokens from router to addresses\n    /// @param stream [WrapToken, ArrayLength, ...[To, Amount][]]. An array of destinations and token amounts\n    /// @return amountTotal Total amount distributed\n    function wrapAndDistributeERC20Amounts(uint256 stream, uint256 amountIn) private returns (uint256 amountTotal) {\n        address token = stream.readAddress();\n        IWETH(token).deposit{value: amountIn}();\n        uint8 num = stream.readUint8();\n        amountTotal = 0;\n        for (uint256 i = 0; i < num; ++i) {\n            address to = stream.readAddress();\n            uint256 amount = stream.readUint();\n            amountTotal += amount;\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n\n    /// @notice Distributes ERC20 tokens from router to addresses\n    /// @notice Quantity for sending is determined by share in 1/65535\n    /// @notice During routing we can't predict in advance the actual value of internal swaps because of slippage,\n    /// @notice so we have to work with shares - not fixed amounts\n    /// @param stream [Token, ArrayLength, ...[To, ShareAmount][]]. Token to distribute. An array of destinations and token share amounts\n    function distributeERC20Shares(uint256 stream) private {\n        address token = stream.readAddress();\n        uint8 num = stream.readUint8();\n        // slot undrain protection\n        uint256 amountTotal = IERC20(token).balanceOf(address(this)) - 1;     \n\n        for (uint256 i = 0; i < num; ++i) {\n            address to = stream.readAddress();\n            uint16 share = stream.readUint16();\n            uint256 amount = (amountTotal * share) / 65535;\n            amountTotal -= amount;\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n\n    /// @notice Unwraps the Native Token\n    /// @param receiver Destination of the unwrapped token\n    /// @param stream [Token]. Token to unwrap native\n    function unwrapNative(address receiver, uint256 stream) private {\n        address token = stream.readAddress();\n        uint256 amount = IERC20(token).balanceOf(address(this)) - 1;\n        // slot undrain protection\n        IWETH(token).withdraw(amount);     \n        receiver.safeTransferETH(amount);\n    }\n}\n"
    },
    "contracts/universal-router/InputStream.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary InputStream {\n    function createStream(bytes memory data) internal pure returns (uint256 stream) {\n        assembly {\n            stream := mload(0x40)\n            mstore(0x40, add(stream, 64))\n            mstore(stream, data)\n            let length := mload(data)\n            mstore(add(stream, 32), add(data, length))\n        }\n    }\n\n    function isNotEmpty(uint256 stream) internal pure returns (bool) {\n        uint256 pos;\n        uint256 finish;\n        assembly {\n            pos := mload(stream)\n            finish := mload(add(stream, 32))\n        }\n        return pos < finish;\n    }\n\n    function readUint8(uint256 stream) internal pure returns (uint8 res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 1)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readUint16(uint256 stream) internal pure returns (uint16 res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 2)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readUint32(uint256 stream) internal pure returns (uint32 res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 4)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readUint(uint256 stream) internal pure returns (uint256 res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 32)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readAddress(uint256 stream) internal pure returns (address res) {\n        assembly {\n            let pos := mload(stream)\n            pos := add(pos, 20)\n            res := mload(pos)\n            mstore(stream, pos)\n        }\n    }\n\n    function readBytes(uint256 stream) internal pure returns (bytes memory res) {\n        assembly {\n            let pos := mload(stream)\n            res := add(pos, 32)\n            let length := mload(res)\n            mstore(stream, add(res, length))\n        }\n    }\n}\n"
    },
    "contracts/core/interfaces/IPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IPair {\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n    function price1CumulativeLast() external view returns (uint256);\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/referrals/ReferralStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IReferralStorage} from \"./interfaces/IReferralStorage.sol\";\n\ncontract ReferralStorage is IReferralStorage {\n    mapping(bytes32 => address) public override codeOwners;\n    mapping(address => bytes32) public referralCodes;\n\n    event SetReferralCode(address account, bytes32 code);\n    event RegisterCode(address account, bytes32 code);\n    event SetCodeOwner(address account, address newAccount, bytes32 code);\n\n    error InvalidCode(bytes32 code);\n    error CodeAlreadyExists();\n    error NotCodeOwner();\n\n    function setReferralCodeByUser(bytes32 _code) override external {\n        _setReferralCode(msg.sender, _code);\n    }\n\n    function registerCode(bytes32 _code) external {\n        if (_code == bytes32(0)) revert InvalidCode(_code);\n        if (codeOwners[_code] != address(0)) revert CodeAlreadyExists();\n\n        codeOwners[_code] = msg.sender;\n        emit RegisterCode(msg.sender, _code);\n    }\n\n    function setCodeOwner(bytes32 _code, address _newAccount) external {\n        if (_code == bytes32(0)) revert InvalidCode(_code);\n\n        address account = codeOwners[_code];\n        if (msg.sender != account) revert NotCodeOwner();\n\n        codeOwners[_code] = _newAccount;\n        emit SetCodeOwner(msg.sender, _newAccount, _code);\n    }\n\n    function getReferralInfo(address _account) override external view returns (bytes32, address) {\n        bytes32 code = referralCodes[_account];\n        address referrer;\n        if (code != bytes32(0)) {\n            referrer = codeOwners[code];\n        }\n        return (code, referrer);\n    }\n\n    function _setReferralCode(address _account, bytes32 _code) private {\n        referralCodes[_account] = _code;\n        emit SetReferralCode(_account, _code);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}